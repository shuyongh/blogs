import{_ as e,c as i,a,o as n}from"./app-C7T5jqfQ.js";const l="/blogs/assets/image-20231002213916509-DhkMNHLh.png",d="/blogs/assets/image-20231002214901115-CqVshTwC.png",r="/blogs/assets/image-20231002215937036-BZf4fbv3.png",c="/blogs/assets/image-20231002220151452-2pfH-SXw.png",h="/blogs/assets/image-20231002220417632-DrCcTE5q.png",p="/blogs/assets/image-20231002220423731-BpvO8QzM.png",t="/blogs/assets/image-20231002220651740-GQXoeuz-.png",g="/blogs/assets/image-20231002220658151-FbzqEcu3.png",o="/blogs/assets/image-20231003085851026-DSWGp9kp.png",m="/blogs/assets/image-20231003085919424-CkUm_AXK.png",v="/blogs/assets/image-20231003091948492-l7Hcef94.png",u="/blogs/assets/image-20231003091959835-Chr4Komz.png",k="/blogs/assets/image-20231003092126456-DvXVxAXi.png",b="/blogs/assets/image-20231003092137489-BsHnWCvR.png",f={};function x(_,s){return n(),i("div",null,s[0]||(s[0]=[a('<h2 id="缓存的概念" tabindex="-1"><a class="header-anchor" href="#缓存的概念"><span>缓存的概念</span></a></h2><p>缓存就是数据交换的缓冲区，当用户要获取数据的时候，会先从缓存中去查询获取数据，如果缓存中有就会直接返回给用户，如果缓存中没有，则会发请求从服务器重新查询数据，将数据返回给用户的同时将数据放入缓存，下次用户就会直接从缓存中获取数据</p><p>缓存其实在很多场景中都有用到，比如</p><p><img src="'+l+'" alt="image-20231002213916509"></p><h2 id="nginx缓存设置的相关指令" tabindex="-1"><a class="header-anchor" href="#nginx缓存设置的相关指令"><span>Nginx缓存设置的相关指令</span></a></h2><p>Nginx的web缓存服务主要是使用<code>ngx_http_proxy_module</code>模块相关指令集来完成</p><h3 id="proxy-cache-path" tabindex="-1"><a class="header-anchor" href="#proxy-cache-path"><span>proxy_cache_path</span></a></h3><ul><li>该指令用于设置缓存文件的存放路径</li></ul><p><img src="'+d+`" alt="image-20231002214901115"></p><p>path:缓存路径地址，如</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>/usr/local/proxy_cahce</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>levels:指定该缓存空间对应的目录，最多可以设置3层，每层取值为1|2</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>levels=1:2 缓存空间有两层目录，第一次是1个字母，第二次是2个</span></span>
<span class="line"><span>字母</span></span>
<span class="line"><span>举例说明:</span></span>
<span class="line"><span>itheima[key]通过MD5加密以后的值为</span></span>
<span class="line"><span>43c8233266edce38c2c9af0694e2107d</span></span>
<span class="line"><span>levels=1:2 最终的存储路径为/usr/local/proxy_cache/d/07</span></span>
<span class="line"><span>levels=2:1:2 最终的存储路径</span></span>
<span class="line"><span>为/usr/local/proxy_cache/7d/0/21</span></span>
<span class="line"><span>levels=2:2:2 最终的存储路径</span></span>
<span class="line"><span>为??/usr/local/proxy_cache/7d/10/e2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>keys_zone:用来为这个缓存区设置名称和指定大小，如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>keys_zone=itcast:200m 缓存区的名称是itcast,大小为200M,1M</span></span>
<span class="line"><span>大概能存储8000个keys</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>inactive:指定缓存的数据多次时间未被访问就将被删除，如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span> inactive=1d 缓存数据在1天内没有被访问就会被删除</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>max_size:设置最大缓存空间，如果缓存空间存满，默认会覆盖缓存时间 最长的资源，如:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>max_size=20g</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>配置实例:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>http{</span></span>
<span class="line"><span>proxy_cache_path /usr/local/proxy_cache</span></span>
<span class="line"><span>keys_zone=itcast:200m levels=1:2:1 inactive=1d</span></span>
<span class="line"><span>max_size=20g;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="proxy-cache" tabindex="-1"><a class="header-anchor" href="#proxy-cache"><span>proxy_cache</span></a></h3><ul><li>该指令用来开启或关闭代理缓存，如果是开启则自定使用哪个缓存区来进行缓存</li></ul><p><img src="`+r+'" alt="image-20231002215937036"></p><p>zone_name:指定使用缓存区的名称</p><h3 id="proxy-cache-key" tabindex="-1"><a class="header-anchor" href="#proxy-cache-key"><span>proxy_cache_key</span></a></h3><ul><li>该指令用来设置web缓存的key值，Nginx会根据key值MD5哈希存缓存</li></ul><p><img src="'+c+'" alt="image-20231002220151452"></p><h3 id="proxy-cache-valid" tabindex="-1"><a class="header-anchor" href="#proxy-cache-valid"><span>proxy_cache_valid</span></a></h3><ul><li>该指令用来对不同返回状态码的URL设置不同的缓存时间</li></ul><p><img src="'+h+'" alt="image-20231002220417632"></p><p><img src="'+p+'" alt="image-20231002220423731"></p><h3 id="proxy-cache-min-uses" tabindex="-1"><a class="header-anchor" href="#proxy-cache-min-uses"><span>proxy_cache_min_uses</span></a></h3><ul><li>该指令用来设置资源被访问多少次后被缓存</li></ul><p><img src="'+t+'" alt="image-20231002220651740"></p><h3 id="proxy-cache-methods" tabindex="-1"><a class="header-anchor" href="#proxy-cache-methods"><span>proxy_cache_methods</span></a></h3><ul><li>该指令用来设置缓存哪些HTTP方法</li></ul><p><img src="'+g+'" alt="image-20231002220658151"></p><p>默认缓存HTTP的GET和HEAD方法，不缓存POST方法</p><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h3><p>需求分析</p><p><img src="'+o+'" alt="image-20231003085851026"></p><p>nginx配置</p><p><img src="'+m+`" alt="image-20231003085919424"></p><h2 id="nginx缓存的清除" tabindex="-1"><a class="header-anchor" href="#nginx缓存的清除"><span>Nginx缓存的清除</span></a></h2><h3 id="方式一-删除对应的缓存目录" tabindex="-1"><a class="header-anchor" href="#方式一-删除对应的缓存目录"><span>方式一：删除对应的缓存目录</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>rm -rf /usr/local/proxy_cache/..</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="方式二-使用第三方扩展模块" tabindex="-1"><a class="header-anchor" href="#方式二-使用第三方扩展模块"><span>方式二：使用第三方扩展模块</span></a></h3><h4 id="ngx-cache-purge" tabindex="-1"><a class="header-anchor" href="#ngx-cache-purge"><span>ngx_cache_purge</span></a></h4><ul><li>下载ngx_cache_purge模块对应的资源包，并上传到服务器上。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>ngx_cache_purge-2.3.tar.gz</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>对资源文件进行解压缩</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>tar -zxf ngx_cache_purge-2.3.tar.gz</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>查询Nginx的配置参数</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>nginx -V</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>进入Nginx的安装目录，使用./configure进行参数配置</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>./configure --add-module=/root/nginx/module/purge</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>使用make进行编译</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>make</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>将nginx安装目录的nginx二级制可执行文件备份</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>mv /usr/local/nginx/sbin/nginx</span></span>
<span class="line"><span>/usr/local/nginx/sbin/nginxold</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将编译后的objs中的nginx拷贝到nginx的sbin目录下</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span> cp objs/nginx /usr/local/nginx/sbin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>使用make进行升级</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>make upgrade</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>在nginx配置文件中进行如下配置</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>server{</span></span>
<span class="line"><span>location ~/purge(/.*) {</span></span>
<span class="line"><span>proxy_cache_purge itcast itheima;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nginx设置资源不缓存" tabindex="-1"><a class="header-anchor" href="#nginx设置资源不缓存"><span>Nginx设置资源不缓存</span></a></h2><p>不是所有的数据都适合进行缓存，比如说对于一些经常发生变化的数据，如果进行缓存的话，就很容易出现用户访问到的数据不是服务器真实的数据，所以对于这些资源我们在缓存的过程中就需要进行过滤，不进行缓存</p><h3 id="proxy-no-cache" tabindex="-1"><a class="header-anchor" href="#proxy-no-cache"><span>proxy_no_cache</span></a></h3><ul><li>该指令是用来定义不将数据进行缓存的条件</li></ul><p><img src="`+v+'" alt="image-20231003091948492"></p><p>配置实例</p><p><img src="'+u+'" alt="image-20231003091959835"></p><h3 id="proxy-cache-bypass" tabindex="-1"><a class="header-anchor" href="#proxy-cache-bypass"><span>proxy_cache_bypass</span></a></h3><ul><li>该指令是用来设置不从缓存中获取数据的条件</li></ul><p><img src="'+k+'" alt="image-20231003092126456"></p><p>配置实例</p><p><img src="'+b+`" alt="image-20231003092137489"></p><h3 id="资源不缓存的条件变量" tabindex="-1"><a class="header-anchor" href="#资源不缓存的条件变量"><span>资源不缓存的条件变量</span></a></h3><p>上述两个指令都有一个指定的条件，这个条件可以是多个，并且多个条件中至少有一个不为空且不等于0，则条件满足成立</p><p>这三个参数分别代表的含义是</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>$cookie_nocache</span></span>
<span class="line"><span>指的是当前请求的cookie中键的名称为nocache对应的值</span></span>
<span class="line"><span>$arg_nocache和$arg_comment</span></span>
<span class="line"><span>指的是当前请求的参数中属性名为nocache和comment对应的属性值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,83)]))}const z=e(f,[["render",x]]),N=JSON.parse('{"path":"/os/fwsxjyrp/","title":"nginx缓存集成","lang":"zh-CN","frontmatter":{"title":"nginx缓存集成","createTime":"2025/04/05 16:44:27","permalink":"/os/fwsxjyrp/"},"headers":[],"readingTime":{"minutes":3.7,"words":1111},"git":{"updatedTime":1743864983000,"contributors":[{"name":"舒永好","username":"舒永好","email":"shuyonghao@guoshenghuaxing.com","commits":1,"avatar":"https://gravatar.com/avatar/4b1c3f37ea707968be73c631a79de33afd360724ce87bf8f9dcacd67d14df92c?d=retro"}]},"filePathRelative":"notes/os/nginx/advance/cache.md"}');export{z as comp,N as data};
