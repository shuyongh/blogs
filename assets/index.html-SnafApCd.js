import{_ as i,c as a,a as n,o as e}from"./app-C7T5jqfQ.js";const h={};function l(t,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h2><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>一个监督者负责启动、停止和监控其子进程。监督者基本思想是，在必要时通过重启来保持其子进程存活。</p><p>启动和监控的子进程由一个列表指定 <a href="https://www.erlang.org/doc/system/sup_princ#spec" target="_blank" rel="noopener noreferrer">子规范</a>。子进程将按照此列表指定的顺序启动，并以相反的顺序终止。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>更详细地说，我们的监督者会启动一个<em>工作者</em>进程，与其链接，并使用<code>process_flag(trap_exit,true)</code>捕获退出信号，以便在进程死亡时重启它。</p><p>工作者负责实际工作的进程，它们在执行任务时可能会死亡。通常情况下，我们不信任工作者。</p></div><p>监督者可以监督工作者和其他监督者，而工作者只能在另一个监督者的管理下使用。</p><p><img src="https://learnyousome.erlang.org.cn/static/img/sup-tree.png" alt="A supervision tree where all the supervisor nodes are above worker nodes (leaves)"></p><h2 id="模板" tabindex="-1"><a class="header-anchor" href="#模板"><span>模板</span></a></h2><p>回调模块，用于从监督器启动服务器 <a href="https://www.erlang.org/doc/system/gen_server_concepts#ex" target="_blank" rel="noopener noreferrer">gen_server 行为</a>可以如下所示：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">behaviour</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">supervisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">    supervisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">?</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MODULE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_Args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    SupFlags</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">strategy</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> one_for_one</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> intensity</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> period</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    ChildSpecs</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">id</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MODULE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">                    start</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">server1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> start_link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []},</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">                    restart</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> permanent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">                    shutdown</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> brutal_kill</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">                    type</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">                    modules</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">server1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]}],</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">ok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">SupFlags</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ChildSpecs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>init/1</code> 的返回值中的 <code>SupFlags</code> 变量表示 <strong>监督 标志</strong></p><p><code>init/1</code> 的返回值中的 <code>ChildSpecs</code> 变量是 <strong>子进程规范</strong></p><h2 id="监督标志" tabindex="-1"><a class="header-anchor" href="#监督标志"><span>监督标志</span></a></h2><p>这是监督标志的类型定义：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> strategy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">one_for_all</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">one_for_one</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                  | </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">rest_for_one</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">simple_one_for_one</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> auto_shutdown</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">never</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">any_significant</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">all_significant</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sup_flags</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">strategy</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> strategy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">           %% 重启策略   				 默认为one_for_one</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">                intensity</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> non_neg_integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   %% 最大重启次数					默认为1</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">                period</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> pos_integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          %% 最大重启时间					默认为5</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">                auto_shutdown</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> auto_shutdown</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()}</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> %% 是否以及何时应该自动关闭自己	   默认为never</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重启策略" tabindex="-1"><a class="header-anchor" href="#重启策略"><span>重启策略</span></a></h3><p>重启策略由回调函数 <code>init</code> 返回的监督标志映射中的 <code>strategy</code> 键指定：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">SupFlags</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">strategy</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Strategy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该集合中<code>stragegy</code>键是可选的。如果没有提供，则默认为 <code>one_for_one</code></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>为了简单起见，本节中所示的图表展示了一个所有 描绘的孩子们被假定有 <a href="https://www.erlang.org/doc/system/sup_princ#restart" target="_blank" rel="noopener noreferrer">重启类型</a>的<code>permanent</code>。</p></div><h4 id="one-for-one" tabindex="-1"><a class="header-anchor" href="#one-for-one"><span>one _for_one</span></a></h4><p>使用场景：如果你的监督者监督多个工作者，其中一个工作者失败了，只有那个工作者应该被重启。只要被监督的进程是独立的，彼此之间没有真正联系，或者进程可以重启并丢失其状态而不会影响其兄弟进程，</p><p><img src="https://learnyousome.erlang.org.cn/static/img/restart-one-for-one.png" alt="Out of 3 children process set out left to right under a single supervisor, the middle one dies and is restarted"></p><h4 id="one-for-all" tabindex="-1"><a class="header-anchor" href="#one-for-all"><span>one_for_all</span></a></h4><p>使用场景：它应该在所有进程在一个监督者管理下，彼此之间高度依赖才能正常工作的情况下使用</p><p><img src="https://learnyousome.erlang.org.cn/static/img/restart-one-for-all.png" alt="Out of 3 children process set out left to right under a single supervisor, the middle one dies, then the two others are killed and then all are restarted"></p><h4 id="rest-for-one" tabindex="-1"><a class="header-anchor" href="#rest-for-one"><span>rest_for_one</span></a></h4><p>使用场景：如果一个进程死亡，所有在它之后启动的进程（依赖于它的进程）都会重启</p><p><img src="https://learnyousome.erlang.org.cn/static/img/restart-rest-for-one.png" alt="Out of 3 children process set out left to right under a single supervisor, the middle one dies, then the rightmost one is killed and then both are restarted"></p><h4 id="simple-one-for-one" tabindex="-1"><a class="header-anchor" href="#simple-one-for-one"><span>simple_one_for_one</span></a></h4><p><code>simple_one_for_one</code> 监督者只是坐在那里，它知道它只能产生一种类型的子进程。每当你想要一个新的子进程时，你都会请求它，然后你就会得到它。理论上，可以使用标准的 <code>one_for_one</code> 监督者来完成这种操作，但使用简单版本有一些实际优势。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>注意：</strong><code>one_for_one</code> 和 <code>simple_one_for_one</code> 之间的最大区别之一是，<code>one_for_one</code> 会保存一个它拥有的所有子进程（以及它曾经拥有过的子进程，如果你没有清除它）的列表，这些子进程按顺序启动，而 <code>simple_one_for_one</code> 保存一个所有子进程的单一定义，并使用 <code>dict</code> 来保存其数据。基本上，当一个进程崩溃时，当你拥有大量子进程时，<code>simple_one_for_one</code> 监督者的速度会快得多。</p></div><h3 id="重启限制" tabindex="-1"><a class="header-anchor" href="#重启限制"><span>重启限制</span></a></h3><blockquote><p>如果在 <code>MaxTime</code>（以秒为单位）内发生了超过 <code>MaxRestart</code> 次重启，监督者就会放弃你的代码，将其关闭，然后自杀，永远不会返回（这就是它有多糟糕）。幸运的是，该监督者的监督者可能仍然对它的子进程抱有希望，并且会重新启动它们。</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">SupFlags</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">intensity</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MaxRestart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> period</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MaxTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="自动关机" tabindex="-1"><a class="header-anchor" href="#自动关机"><span>自动关机</span></a></h3><p>管理员可以配置为自动关闭自身时 <a href="https://www.erlang.org/doc/system/sup_princ#significant_child" target="_blank" rel="noopener noreferrer">重要的子进程</a> 终止。</p><p>这是一个有用的场景，当监督器代表一个协作子进程的工作单元时，而不是独立工作者。当工作单位完成其工作，即任何或所有重要的子进程已终止时，监督器应通过根据各自的关闭规范按相反的启动顺序终止所有剩余的子进程，然后关闭自身。</p><p>自动关机由回调函数<code>auto_shutdown</code>中的监督标志映射中的<code>init</code>键指定：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">SupFlags</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">auto_shutdown</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> AutoShutdown</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该集合中的<code>auto_shutdown</code>键是可选的。如果没有提供，则默认为<code>never</code>。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>自动关闭功能仅适用于重要子进程自行终止的情况，而不是由监督器引起的终止。具体来说，无论是由于兄弟进程终止而在 <code>one_for_all</code> 或 <code>rest_for_one</code> 策略下终止的子进程，还是 <code>supervisor:terminate_child/2</code> 手动终止的子进程，都不会触发自动关闭。</p></div><h4 id="never" tabindex="-1"><a class="header-anchor" href="#never"><span>never</span></a></h4><p>自动关机已禁用。</p><p>在该模式下，指定重要子进程是不被接受的。如果从 <code>init</code> 返回的子进程规格包含重要子进程，监督器将拒绝启动。动态启动重要子进程的尝试将被拒绝。</p><p>这是默认设置。</p><h4 id="any-significant" tabindex="-1"><a class="header-anchor" href="#any-significant"><span>any_significant</span></a></h4><p>监督进程会在任何重要的子进程终止时自动关闭自己，也就是说，当一个瞬时重要的子进程正常终止或一个临时重要的子进程正常或异常终止时</p><h4 id="all-significant" tabindex="-1"><a class="header-anchor" href="#all-significant"><span>all_significant</span></a></h4><p>监督进程将在所有重要的子进程终止后自动关闭，也就是说，在最后一个活跃的重要子进程终止后。同样的规则也适用于 <code>any_significant</code> 。</p><div class="hint-container caution"><p class="hint-container-title">警告</p><p>自动关机功能是在 OTP 24.0 中引入的，但使用此功能的应用程序也可以在较旧的 OTP 版本中编译和运行。</p><p>然而，当使用早于自动关闭功能出现的 OTP 版本编译此类应用程序时，由于它们依赖的自动关闭不会发生，因此会导致进程泄漏。</p><p>开发者需要采取适当的预防措施，如果他们预期其应用程序可能使用较旧的 OTP 版本进行编译。</p></div><div class="hint-container caution"><p class="hint-container-title">警告</p><p>应用程序的顶级监督者不应配置为自动关闭，因为当顶级监督者退出时，应用程序终止。如果应用程序是 <code>permanent</code> ，那么所有其他应用程序和运行时系统也会被终止。</p></div><div class="hint-container caution"><p class="hint-container-title">警告</p><p>自动关闭配置的监督者不应成为其相应父监督者的永久子监督者，因为它们会在自动关闭后立即重启，随后又会在一段时间后自动关闭，从而可能耗尽父监督者的最大重启强度。</p></div><h2 id="子进程规范" tabindex="-1"><a class="header-anchor" href="#子进程规范"><span>子进程规范</span></a></h2><p>子规范类型定义如下：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">child_spec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">id</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> child_id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">             % mandatory</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">start</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> mfargs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            % mandatory</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">restart</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> restart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">         % optional		默认为permanent</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">significant</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> significant</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> % optional</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">shutdown</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> shutdown</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       % optional		若type=worker，则默认为\`5000\` 若type=supervisor 则默认值为\`infinity\` </span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">type</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">             % optional		默认为worker</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">modules</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> modules</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">		  % optional		默认为 \`[M]\` ，其中 \`M\` 来自子进程的启动 \`{M,F,A}\` </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">         </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    child_id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    mfargs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">M</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> F</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> atom</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> A</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()]}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    modules</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">dynamic</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    restart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> permanent</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">transient</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">temporary</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    significant</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> boolean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    shutdown</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> brutal_kill</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">timeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> worker</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">supervisor</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>id</code> 用于由 监督者内部识别子进程规范。</p></li><li><p><code>start</code> 告诉监督者如何启动子进程，使用标准 <code>{M,F,A}</code> 格式。请注意，这里面的启动函数必须符合 OTP 标准</p><p>它应该调用以下任何一个函数：</p><ul><li><a href="https://www.erlang.org/doc/apps/stdlib/supervisor#start_link/3" target="_blank" rel="noopener noreferrer"><code>supervisor:start_link/2,3</code></a></li><li><a href="https://www.erlang.org/doc/apps/stdlib/gen_server#start_link/4" target="_blank" rel="noopener noreferrer"><code>gen_server:start_link/3,4</code></a></li><li><a href="https://www.erlang.org/doc/apps/stdlib/gen_statem#start_link/4" target="_blank" rel="noopener noreferrer"><code>gen_statem:start_link/3,4</code></a></li><li><a href="https://www.erlang.org/doc/apps/stdlib/gen_event#start_link/2" target="_blank" rel="noopener noreferrer"><code>gen_event:start_link/0,1,2</code></a></li></ul></li><li><p><code>restart</code> 告诉监督者当特定的子进程死亡时如何反应</p><ul><li><code>permanent</code> 子进程总是会被重启。</li><li><code>temporary</code> 子进程永远不会被重启（即使监督者的重启策略是 <code>rest_for_one</code> 或 <code>one_for_all</code> ，并且兄弟进程的死亡导致临时进程被终止）。</li><li><code>transient</code> 子进程只有在异常终止时才会被重启，即退出原因不是 <code>normal</code> 、 <code>shutdown</code> 或 <code>{shutdown,Term}</code> 。</li></ul></li><li><p><code>significant</code> 表示子进程是否被视为自动自我关闭监督者的显著子进程。</p><p>将此选项设置为 <code>true</code> 对于具有重启类型 <code>permanent</code> 的子进程无效，也不适用于已将 auto_shutdown 设置为 <code>never</code> 的监督者。</p></li><li><p><code>shutdown</code> 定义了如何终止子进程。</p><ul><li><code>brutal_kill</code> 表示子进程将无条件终止，使用 <code>exit(Child, kill)</code> 。</li><li><code>整数值</code> 意味着监督者会告诉子进程终止，并通过调用 <code>exit(Child, shutdown)</code> 来实现，然后等待返回的退出信号。如果没有在指定时间内收到退出信号，子进程将被无条件地终止，使用 <code>exit(Child, kill)</code> 。</li><li>如果子进程是另一个监督进程，应将其设置为 <code>infinity</code> ，以给子树足够的关闭时间。如果子进程是工作者进程，也可以将其设置为 <code>infinity</code> 。</li></ul></li></ul><div class="hint-container caution"><p class="hint-container-title">警告</p><p>请注意，<code>simple_one_for_one</code>子进程<em>不</em>遵循此规则，即Shutdown时间。在<code>simple_one_for_one</code>的情况下，监管者只会退出，然后由每个工作进程在监管者消失后自行终止。</p></div><ul><li><code>type</code> 指定子进程是监督者还是工作者。</li><li><code>modules</code> 必须是一个包含单个元素的列表。即子进程行为使用的回调模块的名称 <ul><li>如果子进程是一个 <code>gen_event</code> ，该元素必须是原子 <code>dynamic</code> 。</li><li>否则，该元素应为 <code>Module</code> ，其中 <code>Module</code> 是回调模块的名称。</li></ul></li></ul><h2 id="启动一个监督者" tabindex="-1"><a class="header-anchor" href="#启动一个监督者"><span>启动一个监督者</span></a></h2><blockquote><p>在新进程中启动并链接一个新的监督者</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> supervisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">?</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MODULE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [])</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>参数</strong></p><ul><li>第一个参数 是回调模块的名称，即 <code>init</code> 回调函数所在的模块。</li><li>第二个参数 是直接传递给回调函数 <code>init</code> 的一个参数。</li></ul><p><strong>返回值</strong></p><p>新的 supervisor 进程调用回调函数 <code>?MODULE:init([])</code> 。 <code>init</code> 必须返回 <code>{ok, {SupFlags, ChildSpecs}}</code> ：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_Args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    SupFlags</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{},</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    ChildSpecs</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">id</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> ch3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">                    start</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">ch3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> start_link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []},</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">                    shutdown</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> brutal_kill</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}],</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">ok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">SupFlags</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ChildSpecs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后，监督进程根据启动规范中的子进程规范启动其子进程。在这种情况下，只有一个子进程，称为 <code>ch3</code> 。</p><p><code>supervisor:start_link/3</code> 是同步的。它不会返回，直到所有子进程都已启动。</p><h2 id="动态监管" tabindex="-1"><a class="header-anchor" href="#动态监管"><span>动态监管</span></a></h2><blockquote><p>静态监管：在<code>init</code>中指定了所有我们将要拥有的子进程，并在之后让一切运行起来。</p><p>动态监管: 每次使用<code>one_for_one</code>、<code>rest_for_one</code>或<code>one_for_all</code>策略将工作进程添加到监管者时，子进程规范都会与 PID 和一些其他信息一起添加到监管者中的一个列表中。然后，子进程规范可用于重启子进程等等</p></blockquote><h3 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法"><span>常用方法</span></a></h3><table><thead><tr><th>签名</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>which_children(SupervisorNameOrPid)</code></td><td>提供监管者下所有子进程的列表。</td><td></td></tr><tr><td><code>count_children(SupervisorNameOrPid)</code></td><td>计算监管者下的所有子进程，并为您提供一个比较列表，列出哪些子进程处于活动状态、有多少规范、有多少是监管者以及有多少是工作进程。</td><td></td></tr><tr><td><code>restart_child(SupervisorNameOrPid, ChildId)</code></td><td>使用子进程规范让事情开始运转。</td><td></td></tr><tr><td><code>check_childspecs([ChildSpec])</code></td><td>确保子进程规范有效。您可以在使用“start_child/2”之前使用它进行尝试。</td><td></td></tr></tbody></table><h3 id="添加子进程" tabindex="-1"><a class="header-anchor" href="#添加子进程"><span>添加子进程</span></a></h3><blockquote><p>将动态子进程添加到现有的监督器中</p><p>使用 <code>start_child/2</code> 添加的子进程与其他子进程的行为相同，有一个重要的例外：如果 supervisior 死掉并重新创建，那么所有动态添加到 supervisior 的子进程都会丢失。</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">supervisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_child</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Sup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ChildSpec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>参数</strong></p><ul><li><p><code>Sup</code> 是监督者的进程标识符或名称。</p></li><li><p><code>ChildSpec</code> 是一个子进程规范。</p></li></ul><p><strong>返回值</strong></p><h3 id="停止子进程" tabindex="-1"><a class="header-anchor" href="#停止子进程"><span>停止子进程</span></a></h3><blockquote><p>终止或暴力杀死子进程(静态或动态)。子进程规范保留在监管者中</p><p>与动态添加的子进程一样，如果 supervisord 本身重启，删除静态子进程的效果将会丢失。</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">supervisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">terminate_child</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Sup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>参数</strong></p><ul><li><code>Sup</code> 是监督者的 pid 或名称。</li><li><code>Id</code> 是在子进程规范中 <code>id</code> 键关联的值。</li></ul><p><strong>返回值</strong></p><h3 id="删除子进程规范" tabindex="-1"><a class="header-anchor" href="#删除子进程规范"><span>删除子进程规范</span></a></h3><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">supervisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">delete_child</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Sup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>参数</strong></p><ul><li><code>Sup</code> 是监督者的 pid 或名称。</li><li><code>Id</code> 是在子进程规范中 <code>id</code> 键关联的值。</li></ul><h2 id="simple-one-for-one-1" tabindex="-1"><a class="header-anchor" href="#simple-one-for-one-1"><span>simple_one_for_one</span></a></h2><blockquote><p><code>simple_one_for_one</code> 的监督进程是一个简化的 <code>one_for_one</code> 监督进程，其中所有子进程都是同一个进程的动态添加实例。</p></blockquote><p>以下是一个 <code>simple_one_for_one</code> 监督器回调模块的示例：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">simple_sup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">behaviour</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">supervisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">    supervisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">simple_sup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_Args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    SupFlags</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">strategy</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> simple_one_for_one</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">                 intensity</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">                 period</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    ChildSpecs</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">id</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> call</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">                    start</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">call</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> start_link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []},</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">                    shutdown</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> brutal_kill</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}],</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">ok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">SupFlags</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ChildSpecs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当启动时，监督器不会启动任何子进程。相反，所有子进程需要通过调用 <code>supervisor:start_child(Sup, List)</code> 动态添加。</p><p>如果启动函数指定为 <code>{M, F, A}</code> ，子进程将通过调用 <code>apply(M, F, A++List)</code> 来启动。</p><p>例如，在上面的 <code>simple_sup</code> 中添加一个子节点：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">supervisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_child</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">id1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>子进程是通过调用 <code>apply(call, start_link, []++[id1])</code> 启动的，或者更准确地说：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">call</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">id1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>一个由 <code>simple_one_for_one</code> 监督器管理的子进程可以通过以下方式终止：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">supervisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">terminate_child</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Sup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>因为一个 <code>simple_one_for_one</code> supervisör 可以有多个子进程，它会异步地关闭它们。这意味着子进程会并行进行清理工作，因此它们被停止的顺序是未定义的。</p><p>启动、重启和手动终止子进程是同步操作，这些操作在监督进程的上下文中执行。这意味着在执行这些操作时，监督进程会被阻塞。子进程负责尽可能缩短启动和关闭阶段。</p><h2 id="停止" tabindex="-1"><a class="header-anchor" href="#停止"><span>停止</span></a></h2><p>由于监督者是监督树的一部分，因此它会由其监督者自动终止。当被要求关闭时，监督者会根据各自的关闭规范按启动顺序的逆序终止所有子进程，然后自己终止。</p><p>如果监督器配置为在任何或所有重要子进程终止时自动关闭，那么当任何一个或最后一个活跃的重要子进程终止时，监督器本身将会关闭。监督器自身的关闭过程遵循上述描述的相同步骤，即监督器会在终止自身之前，按相反的启动顺序终止所有剩余的子进程。</p><h3 id="手动停止与自动关机" tabindex="-1"><a class="header-anchor" href="#手动停止与自动关机"><span>手动停止与自动关机</span></a></h3><p>由于几个原因，不建议通过 <code>supervisor:terminate_child/2</code> 从其自身树中的子进程手动停止 supervisord。</p><ol><li>子进程不仅需要知道它想要停止的监督者的过程标识符或注册名称，还需要知道该监督者的父监督者的过程标识符或注册名称，以便告诉父监督者停止它想要停止的监督者。这可能会使重新结构化监督树变得困难。</li><li><code>supervisor:terminate_child/2</code> 是一个阻塞调用，只有在父监督进程完成停止监督进程的关闭后才会返回。除非该调用是从一个 spawned 进程发出的，否则这将导致死锁，因为监督进程在关闭过程中等待子进程退出，而子进程则在等待监督进程关闭。如果子进程捕获了退出信号，那么这个死锁将持续到子进程的关闭超时时间到期。</li><li>当 supervisord 停止一个子进程时，它会在等待 shutdown 完成之前拒绝接受其他调用，也就是说，在此之前 supervisord 将不可响应。如果 shutdown 需要较长时间完成，尤其是在没有仔细考虑前面提到的事项时，该 supervisord 可能会长时间不可响应。</li></ol><p>相反，通常更好的做法是依赖自动关闭功能。</p><ol><li>一个子进程不需要知道任何关于其监护人及其相应的父进程的信息，甚至不需要知道它是否是监督树的一部分。相反，只有监护人才需要知道哪些子进程是重要的，并在适当的时候自行关闭。</li><li>一个子进程不需要做任何特殊的事情来关闭它所参与的工作单元。它只需要在完成被启动时的任务后正常终止即可。</li><li>自动关闭自身的监督者将完全独立于其父监督者执行所需的关闭步骤。最终，父监督者只会注意到其子监督者已经终止。由于父监督者不参与关闭过程，因此不会被阻塞。</li></ol>`,111)]))}const p=i(h,[["render",l]]),d=JSON.parse('{"path":"/backend/erlang/uylol2fs/","title":"superivisor行为","lang":"zh-CN","frontmatter":{"title":"superivisor行为","createTime":"2025/03/22 15:22:23","permalink":"/backend/erlang/uylol2fs/"},"headers":[],"readingTime":{"minutes":14.11,"words":4232},"git":{"updatedTime":1758260391000,"contributors":[{"name":"舒永好","username":"舒永好","email":"shuyonghao@guoshenghuaxing.com","commits":1,"avatar":"https://gravatar.com/avatar/4b1c3f37ea707968be73c631a79de33afd360724ce87bf8f9dcacd67d14df92c?d=retro"},{"name":"syh","username":"syh","email":"syh@qq.com","commits":2,"avatar":"https://gravatar.com/avatar/060d67e779a1b0aeace68a2a010b367f852e56888393383ea27302df983f6814?d=retro"}]},"filePathRelative":"notes/backend/erlang/erlang_otp/design_rule/supervisor.md"}');export{p as comp,d as data};
