import{_ as d,c as i,a as s,o as a}from"./app-C7T5jqfQ.js";const e="/blogs/assets/image-20250407185619506-DBajwh50.png",r={};function l(n,t){return a(),i("div",null,t[0]||(t[0]=[s(`<h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h2><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% hello world program</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">helloworld</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">   io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fwrite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello, world!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\\</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>％</code> 符号用于向程序添加注释。</li><li><code>module</code> 语句就像在任何编程语言中添加命令空间一样。在这里，我们要提到的是，这段代码将是一个名为 <code>helloworld</code> 的模块的一部分。</li><li>使用 <strong><code>export</code> 函数可以使用程序中定义的任何函数</strong>。我们正在定义一个名为 start 的函数，为了使用 start 函数，我们必须使用 export 语句。/0 表示我们的函数‘start’ 接受 0 参数.</li><li>我们最终定义了 <code>start</code> 函数。这里我们使用另一个名为 <strong><code>io</code> 的模块，它在 Erlang 中具有所有必需的输入输出函数</strong>。我们使用 <code>fwrite</code> 函数将“Hello World”输出到控制台。</li></ul><h2 id="声明形式" tabindex="-1"><a class="header-anchor" href="#声明形式"><span>声明形式</span></a></h2><blockquote><p>Erlang 语言中使用了不同的符号</p></blockquote><ul><li><strong>连字符(–)通常与模块，导入和导出语句一起使用</strong>。连字符用于为每个语句赋予相应的含义。因此，Hello world 程序的示例显示在以下程序中-</li></ul><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">helloworld</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>每个语句都用点(.)符号定界</strong>。Erlang 中的每个语句都需要以该定界符结尾。Hello world 程序的示例如下例所示：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fwrite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello, world!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\\</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>斜杠 <strong>(/)</strong> 符号与函数一起使用，以<u>定义函数接受的参数数量</u>。</li></ul><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块"><span>模块</span></a></h2><blockquote><p><strong>在 Erlang 中，所有代码都分为模块</strong>。模块由一系列属性和函数声明组成。就像其他编程语言中的名称空间的概念一样，该<u>名称空间用于逻辑上分离不同的代码单元</u>。</p></blockquote><ul><li>定义 <ul><li>该 <code>ModuleName</code> 需求是相同的文件名减去扩展 <code>.erl</code>。否则，代码加载将无法按预期进行。</li></ul></li></ul><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ModuleName</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="导入声明" tabindex="-1"><a class="header-anchor" href="#导入声明"><span>导入声明</span></a></h2><blockquote><p>在 Erlang 中，如果要使用现有 Erlang 模块的功能，则可以使用 import 语句</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">modulename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">functionname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">parameter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>模块名</strong> − 这是需要导入的模块的名称。</li><li><strong>函数名称/参数</strong> − 模块中需要导入的功能。</li></ul><p>更改编写 hello world 程序以使用 import 语句的方式</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% hello world program</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">helloworld</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,[</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fwrite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">   fwrite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello, world!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\\</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们使用 import 关键字导入库“ io”，尤其是 <code>fwrite</code> 函数。因此，现在无论何时调用 <code>fwrite</code> 函数，都不必在任何地方都提及 <strong>io</strong> 模块名称。</p><h2 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字"><span>关键字</span></a></h2><p>关键字是 Erlang 中的保留字，不得将其用于预定目的以外的其他目的。以下是 Erlang 中的关键字列表。</p><table><thead><tr><th>after</th><th>and</th><th>andalso</th><th>band</th></tr></thead><tbody><tr><td>begin</td><td>bnot</td><td>bor</td><td>bsl</td></tr><tr><td>bsr</td><td>bxor</td><td>case</td><td>catch</td></tr><tr><td>cond</td><td>div</td><td>end</td><td>fun</td></tr><tr><td>if</td><td>let</td><td>not</td><td>of</td></tr><tr><td>or</td><td>orelse</td><td>receive</td><td>rem</td></tr><tr><td>try</td><td>when</td><td>xor</td><td></td></tr></tbody></table><h2 id="erlang-注释" tabindex="-1"><a class="header-anchor" href="#erlang-注释"><span>Erlang 注释</span></a></h2><blockquote><p>注释用于记录代码。单行注释通过在行中的任何位置使用%符号来标识</p></blockquote><table><thead><tr><th>类型</th><th>语法格式</th><th>用途</th></tr></thead><tbody><tr><td>单行注释</td><td><code>% 注释内容</code></td><td>用于单行注释，适合对单行代码的解释。</td></tr><tr><td>行尾注释</td><td><code>代码 % 注释内容</code></td><td>用于在代码行尾对该行代码进行简单的解释。</td></tr><tr><td>多行注释</td><td><code>%% 注释内容</code></td><td>用于多行注释，适合较长的注释内容，可以用于模块或函数文档。</td></tr><tr><td>模块文档注释</td><td><code>%% 模块描述</code></td><td>描述模块的作用、功能、作者等信息，通常放在模块声明之前。</td></tr><tr><td>函数文档注释</td><td><code>%% 函数描述</code></td><td>描述函数的输入、输出、功能等信息，通常放在函数定义前。</td></tr><tr><td>内联注释</td><td><code>% 注释内容</code></td><td>用于对复杂代码的某个部分做简单的注释，通常在同一行。</td></tr></tbody></table><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% hello world program</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">helloworld</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% 导入函数，用于导入 io 模块</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,[</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fwrite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%导出函数，用于确保可以访问启动函数。</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">   fwrite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello, world!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\\</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="预处理器" tabindex="-1"><a class="header-anchor" href="#预处理器"><span>预处理器</span></a></h2><blockquote><p>在编译 Erlang 模块之前，Erlang 预处理器会自动处理该模块。预处理器扩展源文件中可能存在的任何宏，并插入任何必要的包含文件。</p><p>通常，您不需要查看预处理器的输出，但在特殊情况下(例如，调试一个错误的宏时)，您可能希望保存预处理器的输出。</p></blockquote><p>查看对模块 <code>some_module</code> 进行预处理的结果。erl 给出操作系统的 shell 命令。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">erlc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -P</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> some_module.erl</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这会生成一个名为 some_module.P 的清单文件</p><h2 id="动态代码载入" tabindex="-1"><a class="header-anchor" href="#动态代码载入"><span>动态代码载入</span></a></h2><blockquote><p>动态代码载入是内建于 Erlang 核心的最惊人特性之一</p></blockquote><p>为了进行热代码加载，Erlang 有一个叫做“代码服务器”的东西。代码服务器基本上是一个负责 <code>ETS 表</code>（内存数据库表，是 VM 本地）的 VM 进程。代码服务器可以在内存中保存一个模块的两个版本，并且两个版本都可以同时运行。使用 <code>c(Module)</code> 编译、使用 <code>l(Module)</code> 加载或使用 <code>code 模块</code> 的许多函数之一加载模块的新版本时，将自动加载该模块的新版本。</p><p>需要理解的一个概念是，Erlang 既有<em>本地</em>调用，也有<em>外部</em>调用。本地调用是指对可能未导出函数的函数调用。它们只是 <code>Atom(Args)</code> 格式。另一方面，外部调用只能通过导出函数完成，并且具有 <code>Module:Function(Args)</code> 格式。</p><p>当 VM 中加载了两个版本的模块时，所有本地调用都通过进程中当前正在运行的版本完成。但是，外部调用<strong>始终</strong>在代码服务器中可用的最新版本代码上完成。然后，如果从外部调用中进行本地调用，则它们位于代码的新版本中。</p><p><img src="`+e+'" alt="image-20250407185619506"></p><p>鉴于 Erlang 中的每个进程/actor 都需要进行递归调用才能改变其状态，因此可以通过进行外部递归调用来加载 actor 的全新版本。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>如果您在进程仍在使用第一个版本的模块运行时加载了模块的第三个版本，那么该进程将被 VM 杀死，VM 假设该进程是一个没有主管或升级自己的方式的孤儿进程。如果没有人运行最旧的版本，它将被简单地删除，而保留最新的版本。</p></div><h2 id="标准-ascii-码对照表" tabindex="-1"><a class="header-anchor" href="#标准-ascii-码对照表"><span>标准 ASCII 码对照表</span></a></h2><table><thead><tr><th>二进制</th><th>八进制</th><th>十进制</th><th>十六进制</th><th>字符/缩写</th><th>解释</th></tr></thead><tbody><tr><td>00000000</td><td>000</td><td>0</td><td>00</td><td>NUL (NULL)</td><td>空字符</td></tr><tr><td>00000001</td><td>001</td><td>1</td><td>01</td><td>SOH (Start Of Headling)</td><td>标题开始</td></tr><tr><td>00000010</td><td>002</td><td>2</td><td>02</td><td>STX (Start Of Text)</td><td>正文开始</td></tr><tr><td>00000011</td><td>003</td><td>3</td><td>03</td><td>ETX (End Of Text)</td><td>正文结束</td></tr><tr><td>00000100</td><td>004</td><td>4</td><td>04</td><td>EOT (End Of Transmission)</td><td>传输结束</td></tr><tr><td>00000101</td><td>005</td><td>5</td><td>05</td><td>ENQ (Enquiry)</td><td>请求</td></tr><tr><td>00000110</td><td>006</td><td>6</td><td>06</td><td>ACK (Acknowledge)</td><td>回应/响应/收到通知</td></tr><tr><td>00000111</td><td>007</td><td>7</td><td>07</td><td>BEL (Bell)</td><td>响铃</td></tr><tr><td>00001000</td><td>010</td><td>8</td><td>08</td><td>BS (Backspace)</td><td>退格</td></tr><tr><td>00001001</td><td>011</td><td>9</td><td>09</td><td>HT (Horizontal Tab)</td><td>水平制表符</td></tr><tr><td>00001010</td><td>012</td><td>10</td><td>0A</td><td>LF/NL(Line Feed/New Line)</td><td>换行键</td></tr><tr><td>00001011</td><td>013</td><td>11</td><td>0B</td><td>VT (Vertical Tab)</td><td>垂直制表符</td></tr><tr><td>00001100</td><td>014</td><td>12</td><td>0C</td><td>FF/NP (Form Feed/New Page)</td><td>换页键</td></tr><tr><td>00001101</td><td>015</td><td>13</td><td>0D</td><td>CR (Carriage Return)</td><td>回车键</td></tr><tr><td>00001110</td><td>016</td><td>14</td><td>0E</td><td>SO (Shift Out)</td><td>不用切换</td></tr><tr><td>00001111</td><td>017</td><td>15</td><td>0F</td><td>SI (Shift In)</td><td>启用切换</td></tr><tr><td>00010000</td><td>020</td><td>16</td><td>10</td><td>DLE (Data Link Escape)</td><td>数据链路转义</td></tr><tr><td>00010001</td><td>021</td><td>17</td><td>11</td><td>DC1/XON (Device Control 1/Transmission On)</td><td>设备控制 1/传输开始</td></tr><tr><td>00010010</td><td>022</td><td>18</td><td>12</td><td>DC2 (Device Control 2)</td><td>设备控制 2</td></tr><tr><td>00010011</td><td>023</td><td>19</td><td>13</td><td>DC3/XOFF (Device Control 3/Transmission Off)</td><td>设备控制 3/传输中断</td></tr><tr><td>00010100</td><td>024</td><td>20</td><td>14</td><td>DC4 (Device Control 4)</td><td>设备控制 4</td></tr><tr><td>00010101</td><td>025</td><td>21</td><td>15</td><td>NAK (Negative Acknowledge)</td><td>无响应/非正常响应/拒绝接收</td></tr><tr><td>00010110</td><td>026</td><td>22</td><td>16</td><td>SYN (Synchronous Idle)</td><td>同步空闲</td></tr><tr><td>00010111</td><td>027</td><td>23</td><td>17</td><td>ETB (End of Transmission Block)</td><td>传输块结束/块传输终止</td></tr><tr><td>00011000</td><td>030</td><td>24</td><td>18</td><td>CAN (Cancel)</td><td>取消</td></tr><tr><td>00011001</td><td>031</td><td>25</td><td>19</td><td>EM (End of Medium)</td><td>已到介质末端/介质存储已满/介质中断</td></tr><tr><td>00011010</td><td>032</td><td>26</td><td>1A</td><td>SUB (Substitute)</td><td>替补/替换</td></tr><tr><td>00011011</td><td>033</td><td>27</td><td>1B</td><td>ESC (Escape)</td><td>逃离/取消</td></tr><tr><td>00011100</td><td>034</td><td>28</td><td>1C</td><td>FS (File Separator)</td><td>文件分割符</td></tr><tr><td>00011101</td><td>035</td><td>29</td><td>1D</td><td>GS (Group Separator)</td><td>组分隔符/分组符</td></tr><tr><td>00011110</td><td>036</td><td>30</td><td>1E</td><td>RS (Record Separator)</td><td>记录分离符</td></tr><tr><td>00011111</td><td>037</td><td>31</td><td>1F</td><td>US (Unit Separator)</td><td>单元分隔符</td></tr><tr><td>00100000</td><td>040</td><td>32</td><td>20</td><td>(Space)</td><td>空格</td></tr><tr><td>00100001</td><td>041</td><td>33</td><td>21</td><td>!</td><td></td></tr><tr><td>00100010</td><td>042</td><td>34</td><td>22</td><td>&quot;</td><td></td></tr><tr><td>00100011</td><td>043</td><td>35</td><td>23</td><td>#</td><td></td></tr><tr><td>00100100</td><td>044</td><td>36</td><td>24</td><td>$</td><td></td></tr><tr><td>00100101</td><td>045</td><td>37</td><td>25</td><td>%</td><td></td></tr><tr><td>00100110</td><td>046</td><td>38</td><td>26</td><td>&amp;</td><td></td></tr><tr><td>00100111</td><td>047</td><td>39</td><td>27</td><td>&#39;</td><td></td></tr><tr><td>00101000</td><td>050</td><td>40</td><td>28</td><td>(</td><td></td></tr><tr><td>00101001</td><td>051</td><td>41</td><td>29</td><td>)</td><td></td></tr><tr><td>00101010</td><td>052</td><td>42</td><td>2A</td><td>*</td><td></td></tr><tr><td>00101011</td><td>053</td><td>43</td><td>2B</td><td>+</td><td></td></tr><tr><td>00101100</td><td>054</td><td>44</td><td>2C</td><td>,</td><td></td></tr><tr><td>00101101</td><td>055</td><td>45</td><td>2D</td><td>-</td><td></td></tr><tr><td>00101110</td><td>056</td><td>46</td><td>2E</td><td>.</td><td></td></tr><tr><td>00101111</td><td>057</td><td>47</td><td>2F</td><td>/</td><td></td></tr><tr><td>00110000</td><td>060</td><td>48</td><td>30</td><td>0</td><td></td></tr><tr><td>00110001</td><td>061</td><td>49</td><td>31</td><td>1</td><td></td></tr><tr><td>00110010</td><td>062</td><td>50</td><td>32</td><td>2</td><td></td></tr><tr><td>00110011</td><td>063</td><td>51</td><td>33</td><td>3</td><td></td></tr><tr><td>00110100</td><td>064</td><td>52</td><td>34</td><td>4</td><td></td></tr><tr><td>00110101</td><td>065</td><td>53</td><td>35</td><td>5</td><td></td></tr><tr><td>00110110</td><td>066</td><td>54</td><td>36</td><td>6</td><td></td></tr><tr><td>00110111</td><td>067</td><td>55</td><td>37</td><td>7</td><td></td></tr><tr><td>00111000</td><td>070</td><td>56</td><td>38</td><td>8</td><td></td></tr><tr><td>00111001</td><td>071</td><td>57</td><td>39</td><td>9</td><td></td></tr><tr><td>00111010</td><td>072</td><td>58</td><td>3A</td><td>:</td><td></td></tr><tr><td>00111011</td><td>073</td><td>59</td><td>3B</td><td>;</td><td></td></tr><tr><td>00111100</td><td>074</td><td>60</td><td>3C</td><td>&lt;</td><td></td></tr><tr><td>00111101</td><td>075</td><td>61</td><td>3D</td><td>=</td><td></td></tr><tr><td>00111110</td><td>076</td><td>62</td><td>3E</td><td>&gt;</td><td></td></tr><tr><td>00111111</td><td>077</td><td>63</td><td>3F</td><td>?</td><td></td></tr><tr><td>01000000</td><td>100</td><td>64</td><td>40</td><td>@</td><td></td></tr><tr><td>01000001</td><td>101</td><td>65</td><td>41</td><td>A</td><td></td></tr><tr><td>01000010</td><td>102</td><td>66</td><td>42</td><td>B</td><td></td></tr><tr><td>01000011</td><td>103</td><td>67</td><td>43</td><td>C</td><td></td></tr><tr><td>01000100</td><td>104</td><td>68</td><td>44</td><td>D</td><td></td></tr><tr><td>01000101</td><td>105</td><td>69</td><td>45</td><td>E</td><td></td></tr><tr><td>01000110</td><td>106</td><td>70</td><td>46</td><td>F</td><td></td></tr><tr><td>01000111</td><td>107</td><td>71</td><td>47</td><td>G</td><td></td></tr><tr><td>01001000</td><td>110</td><td>72</td><td>48</td><td>H</td><td></td></tr><tr><td>01001001</td><td>111</td><td>73</td><td>49</td><td>I</td><td></td></tr><tr><td>01001010</td><td>112</td><td>74</td><td>4A</td><td>J</td><td></td></tr><tr><td>01001011</td><td>113</td><td>75</td><td>4B</td><td>K</td><td></td></tr><tr><td>01001100</td><td>114</td><td>76</td><td>4C</td><td>L</td><td></td></tr><tr><td>01001101</td><td>115</td><td>77</td><td>4D</td><td>M</td><td></td></tr><tr><td>01001110</td><td>116</td><td>78</td><td>4E</td><td>N</td><td></td></tr><tr><td>01001111</td><td>117</td><td>79</td><td>4F</td><td>O</td><td></td></tr><tr><td>01010000</td><td>120</td><td>80</td><td>50</td><td>P</td><td></td></tr><tr><td>01010001</td><td>121</td><td>81</td><td>51</td><td>Q</td><td></td></tr><tr><td>01010010</td><td>122</td><td>82</td><td>52</td><td>R</td><td></td></tr><tr><td>01010011</td><td>123</td><td>83</td><td>53</td><td>S</td><td></td></tr><tr><td>01010100</td><td>124</td><td>84</td><td>54</td><td>T</td><td></td></tr><tr><td>01010101</td><td>125</td><td>85</td><td>55</td><td>U</td><td></td></tr><tr><td>01010110</td><td>126</td><td>86</td><td>56</td><td>V</td><td></td></tr><tr><td>01010111</td><td>127</td><td>87</td><td>57</td><td>W</td><td></td></tr><tr><td>01011000</td><td>130</td><td>88</td><td>58</td><td>X</td><td></td></tr><tr><td>01011001</td><td>131</td><td>89</td><td>59</td><td>Y</td><td></td></tr><tr><td>01011010</td><td>132</td><td>90</td><td>5A</td><td>Z</td><td></td></tr><tr><td>01011011</td><td>133</td><td>91</td><td>5B</td><td>[</td><td></td></tr><tr><td>01011100</td><td>134</td><td>92</td><td>5C</td><td>\\</td><td></td></tr><tr><td>01011101</td><td>135</td><td>93</td><td>5D</td><td>]</td><td></td></tr><tr><td>01011110</td><td>136</td><td>94</td><td>5E</td><td>^</td><td></td></tr><tr><td>01011111</td><td>137</td><td>95</td><td>5F</td><td>_</td><td></td></tr><tr><td>01100000</td><td>140</td><td>96</td><td>60</td><td>`</td><td></td></tr><tr><td>01100001</td><td>141</td><td>97</td><td>61</td><td>a</td><td></td></tr><tr><td>01100010</td><td>142</td><td>98</td><td>62</td><td>b</td><td></td></tr><tr><td>01100011</td><td>143</td><td>99</td><td>63</td><td>c</td><td></td></tr><tr><td>01100100</td><td>144</td><td>100</td><td>64</td><td>d</td><td></td></tr><tr><td>01100101</td><td>145</td><td>101</td><td>65</td><td>e</td><td></td></tr><tr><td>01100110</td><td>146</td><td>102</td><td>66</td><td>f</td><td></td></tr><tr><td>01100111</td><td>147</td><td>103</td><td>67</td><td>g</td><td></td></tr><tr><td>01101000</td><td>150</td><td>104</td><td>68</td><td>h</td><td></td></tr><tr><td>01101001</td><td>151</td><td>105</td><td>69</td><td>i</td><td></td></tr><tr><td>01101010</td><td>152</td><td>106</td><td>6A</td><td>j</td><td></td></tr><tr><td>01101011</td><td>153</td><td>107</td><td>6B</td><td>k</td><td></td></tr><tr><td>01101100</td><td>154</td><td>108</td><td>6C</td><td>l</td><td></td></tr><tr><td>01101101</td><td>155</td><td>109</td><td>6D</td><td>m</td><td></td></tr><tr><td>01101110</td><td>156</td><td>110</td><td>6E</td><td>n</td><td></td></tr><tr><td>01101111</td><td>157</td><td>111</td><td>6F</td><td>o</td><td></td></tr><tr><td>01110000</td><td>160</td><td>112</td><td>70</td><td>p</td><td></td></tr><tr><td>01110001</td><td>161</td><td>113</td><td>71</td><td>q</td><td></td></tr><tr><td>01110010</td><td>162</td><td>114</td><td>72</td><td>r</td><td></td></tr><tr><td>01110011</td><td>163</td><td>115</td><td>73</td><td>s</td><td></td></tr><tr><td>01110100</td><td>164</td><td>116</td><td>74</td><td>t</td><td></td></tr><tr><td>01110101</td><td>165</td><td>117</td><td>75</td><td>u</td><td></td></tr><tr><td>01110110</td><td>166</td><td>118</td><td>76</td><td>v</td><td></td></tr><tr><td>01110111</td><td>167</td><td>119</td><td>77</td><td>w</td><td></td></tr><tr><td>01111000</td><td>170</td><td>120</td><td>78</td><td>x</td><td></td></tr><tr><td>01111001</td><td>171</td><td>121</td><td>79</td><td>y</td><td></td></tr><tr><td>01111010</td><td>172</td><td>122</td><td>7A</td><td>z</td><td></td></tr><tr><td>01111011</td><td>173</td><td>123</td><td>7B</td><td>{</td><td></td></tr><tr><td>01111100</td><td>174</td><td>124</td><td>7C</td><td>|</td><td></td></tr><tr><td>01111101</td><td>175</td><td>125</td><td>7D</td><td>}</td><td></td></tr><tr><td>01111110</td><td>176</td><td>126</td><td>7E</td><td>~</td><td></td></tr><tr><td>01111111</td><td>177</td><td>127</td><td>7F</td><td>DEL (Delete)</td><td>删除</td></tr></tbody></table>',44)]))}const k=d(r,[["render",l]]),p=JSON.parse('{"path":"/backend/erlang/5ifar8ot/","title":"引言","lang":"zh-CN","frontmatter":{"title":"引言","createTime":"2025/03/23 17:02:43","permalink":"/backend/erlang/5ifar8ot/"},"headers":[],"readingTime":{"minutes":8.29,"words":2486},"git":{"updatedTime":1744025546000,"contributors":[{"name":"舒永好","username":"舒永好","email":"shuyonghao@guoshenghuaxing.com","commits":1,"avatar":"https://gravatar.com/avatar/4b1c3f37ea707968be73c631a79de33afd360724ce87bf8f9dcacd67d14df92c?d=retro"},{"name":"syh","username":"syh","email":"syh@qq.com","commits":2,"avatar":"https://gravatar.com/avatar/060d67e779a1b0aeace68a2a010b367f852e56888393383ea27302df983f6814?d=retro"}]},"filePathRelative":"notes/backend/erlang/erlang_foundation/readme.md"}');export{k as comp,p as data};
