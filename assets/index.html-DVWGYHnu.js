import{_ as r,c as o,a,o as n}from"./app-C7T5jqfQ.js";const t={};function s(c,e){return n(),o("div",null,e[0]||(e[0]=[a('<h2 id="sasl报告" tabindex="-1"><a class="header-anchor" href="#sasl报告"><span>SASL报告</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p><a href="https://www.erlang.org/doc/apps/sasl/error_logging#supervisor_report" target="_blank" rel="noopener noreferrer">监督报告</a>和 <a href="https://www.erlang.org/doc/apps/sasl/error_logging#crash_report" target="_blank" rel="noopener noreferrer">崩溃报告</a>通过默认的日志记录方式记录。 内核设置的日志处理器。 <a href="https://www.erlang.org/doc/apps/sasl/error_logging#progress_report" target="_blank" rel="noopener noreferrer">进程报告</a>默认不记录，但可以通过将主日志级别设置为 <code>info</code> 来启用，例如通过使用内核配置参数 <code>例如使用内核配置参数 logger_level。</code></p><p>旧的 SASL 错误日志记录行为可以通过设置内核 配置参数 <a href="https://www.erlang.org/doc/apps/kernel/kernel_app#logger_sasl_compatible" target="_blank" rel="noopener noreferrer"><code>logger_sasl_compatible</code></a> 为 <code>true</code>。</p></div><p>SASL 应用程序引入了三种类型的报告：</p><ul><li>监督报告</li><li>进程报告</li><li>崩溃报告</li></ul><p>当 SASL 应用程序启动时，它会添加一个 Logger 处理器来格式化和 写出这些报告，如 SASL 的配置参数中所指定的那样。</p><h3 id="监督报告" tabindex="-1"><a class="header-anchor" href="#监督报告"><span>监督报告</span></a></h3><p>当受监督的子进程意外终止时，会发出监督报告。监督报告包含以下项目：</p><ul><li><strong><code>Supervisor </code></strong>- 报告主管的名称。</li><li><strong><code>Context </code></strong>- 从主管的角度表示子进程终止的阶段。这可以是<code>start_error</code>，<code>child_terminated</code>， 或<code>shutdown_error </code>。</li><li><strong><code>Reason </code></strong>- 终止原因。</li><li><strong><code>Offender</code></strong>- 子进程的起始规范。</li></ul><h3 id="进程报告" tabindex="-1"><a class="header-anchor" href="#进程报告"><span>进程报告</span></a></h3><p>当主管启动或重启子进程时，会发出进度报告。进度报告包含以下项目：</p><ul><li><strong><code>Supervisor</code></strong> - 报告主管的名字。</li><li><strong><code>Started</code></strong> - 成功启动的子进程的启动说明。</li></ul><h3 id="崩溃报告" tabindex="-1"><a class="header-anchor" href="#崩溃报告"><span>崩溃报告</span></a></h3><p>进程使用 <a href="https://www.erlang.org/doc/apps/stdlib/proc_lib#spawn/1" target="_blank" rel="noopener noreferrer"><code>proc_lib:spawn</code></a> 函数启动 <code>proc_lib:spawn_link</code> 被包裹在一个 <code>catch</code> 中。当这样的进程以意外的原因终止时，会发出崩溃报告，即任何除了 <code>normal</code>、<code>shutdown</code> 或 <code>{shutdown,Term}</code> 之外的原因。使用行为 <code>gen_server</code>、<code>gen_fsm</code> 或 <code>gen_statem</code> 的进程是这类进程的例子。崩溃报告包含以下项：</p><ul><li><strong><code>Crasher</code></strong> - 关于崩溃进程的信息，如初始函数调用、退出原因和消息队列。</li><li><strong><code>Neighbours</code></strong> - 关于与崩溃进程链接且不捕获退出的进程的信息。这些进程因该进程崩溃而终止。收集的信息与 Crasher 描述的信息相同。</li></ul>',14)]))}const d=r(t,[["render",s]]),i=JSON.parse('{"path":"/backend/erlang/tgrej9wf/","title":"错误日志记录","lang":"zh-CN","frontmatter":{"title":"错误日志记录","createTime":"2025/05/13 14:09:23","permalink":"/backend/erlang/tgrej9wf/"},"headers":[],"readingTime":{"minutes":1.71,"words":512},"git":{"updatedTime":1747640284000,"contributors":[{"name":"syh","username":"syh","email":"syh@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/060d67e779a1b0aeace68a2a010b367f852e56888393383ea27302df983f6814?d=retro"}]},"filePathRelative":"notes/backend/erlang/erlang_core/sasl/error_log.md"}');export{d as comp,i as data};
