import{_ as i,c as a,a as e,o as l}from"./app-C7T5jqfQ.js";const t="/blogs/assets/image-20240411094605217-BI0rg1MW.png",p="/blogs/assets/image-20240411094613757-C8B4kgDm.png",m="/blogs/assets/image-20240411094621212-Co5Hk_S5.png",n="/blogs/assets/image-20240411094629719-Do7k81vc.png",g="/blogs/assets/image-20240411094636801-CteadPN_.png",r="/blogs/assets/image-20240411094644343-Dy61ITY7.png",o="/blogs/assets/image-20240411094657716-DDkeN6uW.png",c="/blogs/assets/image-20240411094748635-BG91tCwq.png",d="/blogs/assets/image-20240411094802561-RSFXZR9n.png",h="/blogs/assets/image-20240411094841091-C8rcYkCn.png",f="/blogs/assets/image-20240411094853715-D9Ub6QNI.png",u="/blogs/assets/image-20240411094909675-Tm81qbEJ.png",b="/blogs/assets/image-20240411094924244-Ctue2gK1.png",_="/blogs/assets/image-20240411094939227-_2t29bSK.png",k="/blogs/assets/image-20240411094957370-D1eih_gl.png",x="/blogs/assets/image-20240411095035815-DdNI07PB.png",v="/blogs/assets/image-20240411095048112-B6r3c6AP.png",C="/blogs/assets/image-20240411095106595-CtLnpb3-.png",B="/blogs/assets/image-20240411093922995-fXTdX1mH.png",D="/blogs/assets/image-20240411093937894-DANubjV9.png",L="/blogs/assets/image-20240411094002035-B7DfByCL.png",y="/blogs/assets/image-20240411094020120-BLR3DXRs.png",N="/blogs/assets/image-20240411094027439-BB_3_uMh.png",P={};function K(S,s){return l(),a("div",null,s[0]||(s[0]=[e('<h2 id="硬盘添加和挂载" tabindex="-1"><a class="header-anchor" href="#硬盘添加和挂载"><span>硬盘添加和挂载</span></a></h2><h3 id="添加硬盘" tabindex="-1"><a class="header-anchor" href="#添加硬盘"><span>添加硬盘</span></a></h3><p><img src="'+t+'" alt="image-20240411094605217"></p><p><img src="'+p+'" alt="image-20240411094613757"></p><p><img src="'+m+'" alt="image-20240411094621212"></p><p><img src="'+n+'" alt="image-20240411094629719"></p><p><img src="'+g+'" alt="image-20240411094636801"></p><p><img src="'+r+'" alt="image-20240411094644343"></p><p><img src="'+o+'" alt="image-20240411094657716"></p><ul><li>再次执行：fdisk -l | more，还是只有一个硬盘，还需要执行以下步骤：</li><li>1、cd /sys/class/scsi_host/下，ll查看所有的host文件</li></ul><p><img src="'+c+'" alt="image-20240411094748635"></p><p>2、将&quot;- - -&quot;写到所有的host下的scan文件中，并执行fdisk -l，可以看到当前扫描到了新添加的硬盘：</p><p><img src="'+d+'" alt="image-20240411094802561"></p><h3 id="分区" tabindex="-1"><a class="header-anchor" href="#分区"><span>分区</span></a></h3><ul><li>给新添加的硬盘做分区 fdisk /dev/sdb：注意硬盘名要对应</li></ul><p><img src="'+h+'" alt="image-20240411094841091"></p><ul><li>按照下图输入p和n：</li></ul><p><img src="'+f+'" alt="image-20240411094853715"></p><ul><li>接着输入p，剩下三项默认（回车）：</li></ul><p><img src="'+u+'" alt="image-20240411094909675"></p><ul><li>接着输入t，选择分区的类型，这里看用途，一般是83，即普通的Linux硬盘：</li></ul><p><img src="'+b+'" alt="image-20240411094924244"></p><ul><li>然后输入p，查看一下硬盘情况，输入w写入：</li></ul><p><img src="'+_+'" alt="image-20240411094939227"></p><ul><li>再次查看硬盘情况，可以看到创建了一个分区sdb1：</li></ul><p><img src="'+k+'" alt="image-20240411094957370"></p><h3 id="挂载" tabindex="-1"><a class="header-anchor" href="#挂载"><span>挂载</span></a></h3><ul><li>为分区指定文件系统：mke2fs -t ext4 /dev/sdb1</li></ul><p><img src="'+x+'" alt="image-20240411095035815"></p><ul><li>然后，将硬盘挂载到一个指定目录下，mkdir /vm，创建vm目录，然后将sdb1挂载到/vm上</li></ul><p><img src="'+v+'" alt="image-20240411095048112"></p><ul><li>在文件末尾添加如下内容后保存（文件格式根据系统具体情况来）：</li></ul><p><img src="'+C+'" alt="image-20240411095106595"></p><ul><li>执行mount /dev/sdb1 /vm；</li><li>执行<code>cat /etc/mtab | grep sdb1</code>，如果有返回内容，则挂载成功，就可以使用了。</li></ul><h2 id="磁盘格式化" tabindex="-1"><a class="header-anchor" href="#磁盘格式化"><span>磁盘格式化</span></a></h2><p>一、mkfs命令</p><ul><li>磁盘分区完毕后自然就是要进行文件系统的格式化</li><li>格式化其实就是创建文件系统。命令就是===&gt;mkfs（make fileststem），这个命令只是个综合命令。它会调用正确的文件系统格式化工具</li><li>功能：mkfs是个综合命令</li><li>使用</li><li>mkfs [tab] [tab]：按下两下tab键查看系统支持哪些文件系统的格式化功能</li><li>mkfs -t [文件系统格式名]===&gt;等同于mkfs.文件系统格式名</li><li>mkfs -t xfs 与 mkfs.xfs相同</li><li></li></ul><h3 id="格式化xfs文件系统-mkfs-xfs" tabindex="-1"><a class="header-anchor" href="#格式化xfs文件系统-mkfs-xfs"><span>格式化XFS文件系统（mkfs.xfs）</span></a></h3><ul><li>格式 <ul><li>mkfs.xfs [-b 参数] [-d 参数] [-i 参数] [-l 参数] [-L 参数] [-f] [-r 参数] 设备名称</li></ul></li><li>第一次执行mkfs.xfs可能需要安装：<code>apt-get install xfsprogs</code></li><li>相关参数 <ul><li>-b：后面接的是区块容量，范围是512B-64K。不过Linux最大为4K</li><li>-d：后面接的是data section(数据区)的相关参数值</li></ul></li></ul><p><img src="'+B+'" alt="image-20240411093922995"></p><ul><li>-f：如果设备内已经有了文件系统，则需要使用-f强制格式化</li><li>-i的参数：与inode有较相关的设置</li></ul><p><img src="'+D+'" alt="image-20240411093937894"></p><ul><li>-L参数：后面接这个文件系统的标头名称Label name</li><li>-r参数：指定realtime section(实时运行区)的相关设置值</li></ul><p><img src="'+L+'" alt="image-20240411094002035"></p><h4 id="演示案例" tabindex="-1"><a class="header-anchor" href="#演示案例"><span>演示案例</span></a></h4><ul><li>使用mkfs.xfs命令时，一般默认回车就可以了，使用系统默认的</li><li>演示案例1：使用gdisk新建一个sda2新分区，并格式化成为xfs文件系统</li></ul><p><img src="'+y+'" alt="image-20240411094020120"></p><p><img src="'+N+'" alt="image-20240411094027439"></p><h4 id="演示案例2-设置cpu的数量" tabindex="-1"><a class="header-anchor" href="#演示案例2-设置cpu的数量"><span>演示案例2：设置CPU的数量</span></a></h4><p>有时我们为了使用多个数据流来读写系统，以增加速度，需要设置多个agcount数量，agcount与CPU的内核数有关 查看一下系统的CPU数量：grep &#39;processor&#39; /proc/cpuinfo 如果需要两个线程的CPU数量时：mkfs.xfs -f -d agcount=2 /dev/sda2 XFS文件系统for RAID性能优化</p><h3 id="ext4文件系统格式化-mkfs-ext4" tabindex="-1"><a class="header-anchor" href="#ext4文件系统格式化-mkfs-ext4"><span>ext4文件系统格式化（mkfs.ext4）</span></a></h3><ul><li>功能：创建ext4文件系统</li><li>格式</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>mkfs.ext4 [-b 参数]  [-L 参数]  设备名称</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>参数</p><ul><li><p>-b：后面设置区块的大小，有1K、2K、4K</p></li><li><p>-L：后面接这个设备的标头名称Label name</p></li></ul></li><li><p>提示：</p><ul><li>ext4的默认值已经相当合适我们系统使用，大部分的默认值写入至/etc/mke2fs.conf这个文件中</li><li>因此我们无需额外指定inode的容量，系统都帮我们做好了默认值，只需要知道uuid即可</li></ul></li><li><p>演示案例：</p></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>mkfs.ext4 /dev/sda2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="四、其他文件系统格式化" tabindex="-1"><a class="header-anchor" href="#四、其他文件系统格式化"><span>四、其他文件系统格式化</span></a></h3><p>mkswap 设备文件名：用于内存交换分区的格式化 mkfs.vfta 设备文件名：vfat文件系统格式的格式化</p>',57)]))}const T=i(P,[["render",K]]),X=JSON.parse('{"path":"/os/4ramz2vo/","title":"文件系统","lang":"zh-CN","frontmatter":{"title":"文件系统","createTime":"2025/03/23 18:19:58","permalink":"/os/4ramz2vo/"},"headers":[],"readingTime":{"minutes":3.47,"words":1042},"git":{"updatedTime":1743091220000,"contributors":[{"name":"舒永好","username":"舒永好","email":"shuyonghao@guoshenghuaxing.com","commits":1,"avatar":"https://gravatar.com/avatar/4b1c3f37ea707968be73c631a79de33afd360724ce87bf8f9dcacd67d14df92c?d=retro"}]},"filePathRelative":"notes/os/linux/file_sys.md"}');export{T as comp,X as data};
