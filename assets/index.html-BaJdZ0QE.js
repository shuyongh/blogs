import{_ as o,c as p,a,o as c}from"./app-C7T5jqfQ.js";const t="/blogs/assets/image-20250328113912116-plrbqQlM.png",s="/blogs/assets/image-20250328113929570-B-p1p1N_.png",d="/blogs/assets/image-20250328113944001-BpzXT2E-.png",n="/blogs/assets/image-20250328114006378-COd9Osfz.png",r="/blogs/assets/image-20250328114036229-C2F_HLcE.png",i="/blogs/assets/image-20250328114054370-BPdwdVVE.png",l="/blogs/assets/image-20250328114110464-CH8PjzHR.png",h={};function m(g,e){return c(),p("div",null,e[0]||(e[0]=[a('<p>本章将通过一系列不同的图表来解释 REST 处理器状态机。</p><p>请求可能遵循四种主要路径。一种是 OPTIONS 方法；一种是 GET 和 HEAD 方法；一种是 PUT、POST 和 PATCH 方法；一种是 DELETE 方法。</p><p>所有路径都始于“开始”图表，除了 OPTIONS 路径外，所有路径都会经过“内容协商”图表，并且如果资源存在，则可选地经过“条件请求”图表。</p><p>红色方块指的是另一个图表。浅绿色方块表示一个响应。其他方块可能是回调或由 Cowboy 本身回答的问题。绿色箭头通常表示如果回调未定义，则默认行为。星号旁边的值表示描述性的而不是精确的。</p><h2 id="开始" tabindex="-1"><a class="header-anchor" href="#开始"><span>开始</span></a></h2><p>所有的请求都从这里开始。</p><p><img src="'+t+'" alt="image-20250328113912116"></p><p>一系列回调依次被调用来执行对服务、请求行和请求头的一般检查。</p><p>在这些步骤中，如果没有请求体，那么请求体也不会在此时被接收。它只会在“PUT、POST 和 PATCH 方法”流程图的末尾，所有条件都满足时进行处理。</p><p><code>known_methods</code> 和 <code>allowed_methods</code> 回调返回一个方法列表。Cowboy 然后检查请求方法是否在列表中，如果不是，则停止。</p><p><code>is_authorized</code> 回调可以用来检查对资源的访问是否被授权。在需要时也可以进行身份验证。当授权被拒绝时，回调的返回值必须包含适用于请求资源的挑战，该挑战将被发送回客户端，并出现在 www-authenticate 头中。</p><p>当请求方法为 OPTIONS 时，此流程图将立即被“OPTIONS 方法”流程图所取代；否则，将被“内容协商”流程图所取代。</p><h2 id="options-方法" tabindex="-1"><a class="header-anchor" href="#options-方法"><span>OPTIONS 方法</span></a></h2><p>该图表仅适用于 OPTIONS 请求。</p><p><img src="'+s+'" alt="image-20250328113929570"></p><p>可以使用 <code>options</code> 回调来添加有关资源的信息，例如媒体类型或提供的语言；允许的方法；任何额外信息。还可以设置响应体，但不应期望客户端阅读它。</p><p>如果未定义 <code>options</code> 回调，Cowboy 将默认发送包含允许方法的响应。</p><h2 id="内容协商" tabindex="-1"><a class="header-anchor" href="#内容协商"><span>内容协商</span></a></h2><p>该图表适用于除 OPTIONS 方法之外的所有请求方法。在“开始”图表完成后立即执行。</p><p><img src="'+d+'" alt="image-20250328113944001"></p><p>这些步骤的目的是确定一个合适的表示形式，将其发送回客户端。</p><p>请求可能包含任何 accept 头；accept-language 头；或 accept-charset 头。当这些头存在时，Cowboy 将解析这些头，然后调用相应的回调以获取此资源提供的内容类型、语言或字符集列表。之后，它将根据请求自动选择最佳匹配。</p><p>如果没有定义回调，Cowboy 将选择客户端所偏好的内容类型、语言或字符集。</p><p><code>content_types_provided</code> 还会返回它接受的每种内容类型的回调名称。该回调将在“GET 和 HEAD 方法”图示的末尾被调用，即所有条件都已满足时。</p><p>可选地，<code>ranges_provided</code> 还会返回它接受的每种范围单位的回调名称。在分块请求的情况下，该回调将在“GET 和 HEAD 方法”图示的末尾被调用。</p><p>选中的内容类型、语言和字符集保存为 Req 对象的元数据值。你应该在手动设置响应体（例如，伴随错误代码）时使用适当的表示形式。</p><p>这个图表紧接着是“GET 和 HEAD 方法”图表、“PUT、POST 和 PATCH 方法”图表，或者是“DELETE 方法”图表，具体取决于所使用的方法。</p><h2 id="get-和-head-方法" tabindex="-1"><a class="header-anchor" href="#get-和-head-方法"><span>GET 和 HEAD 方法</span></a></h2><p>这个图表仅适用于 GET 和 HEAD 请求。</p><p>对于 <code>cond</code> 步骤的描述，请参见“条件请求”图示。</p><p><img src="'+n+'" alt="image-20250328114006378"></p><p>当资源存在且条件步骤成功时，可以检索资源。</p><p>牛仔准备响应时，首先检索表示的元数据，然后调用 <code>ProvideCallback</code> 回调。这是您在 <code>content_types_provided</code> 中返回每个内容类型时定义的回调。此回调返回将发送给客户端的主体。</p><p>对于范围请求，但仅当在较早时定义了 <code>ranges_provided</code> 回调时，Cowboy 才会将选定的 <code>range</code> 信息添加到 Req 对象并调用 <code>range_satisfiable</code> 回调。在确认可以提供范围后，Cowboy 调用 <code>RangeResource</code> 回调并使用回调中的范围数据生成范围响应。</p><p>当资源不存在时，Cowboy 会确定该资源之前是否存在，以及是否已移动到其他位置，以便将客户端重定向到新的 URI。</p><p><code>moved_permanently</code> 和 <code>moved_temporarily</code> 回调必须返回资源实际上移动到的新位置。</p><h2 id="put-post-和-patch-方法" tabindex="-1"><a class="header-anchor" href="#put-post-和-patch-方法"><span>PUT, POST 和 PATCH 方法</span></a></h2><p>本图仅适用于 PUT、POST 和 PATCH 请求。</p><p>对于 <code>cond</code> 步骤的描述，请参见“条件请求”图示。</p><p><img src="'+r+'" alt="image-20250328114036229"></p><p>当资源存在时，首先执行条件步骤。如果这些步骤成功，并且方法是 PUT，Cowboy 将调用 <code>is_conflict</code> 回调函数。此函数可以通过上锁等方式防止潜在的竞争条件。</p><p>然后所有三种方法都会到达 <code>content_types_accepted</code> 这一步，我们将在几段后描述这一步。</p><p>当资源不存在且方法为 PUT 时，Cowboy 会检查冲突，然后继续进行 <code>content_types_accepted</code> 步骤。对于其他方法，Cowboy 会确定该资源之前是否存在，如果存在则是否被移动到了其他地方。如果资源确实不存在，方法为 POST 且 <code>allow_missing_post</code> 的调用返回 <code>true</code>，那么 Cowboy 将继续进行 <code>content_types_accepted</code> 步骤。否则，请求处理将在此结束。</p><p><code>moved_permanently</code> 和 <code>moved_temporarily</code> 回调必须返回资源实际上移动到的新位置。</p><p>The <code>content_types_accepted</code> 返回一个它接受的内容类型列表，但同时也为每个内容类型指定了一个回调函数的名称。Cowboy 将选择合适的回调函数来处理请求体并调用它。</p><p>这个回调函数可以返回三种不同的返回值之一。</p><p>如果在处理请求体时发生错误，它必须返回 <code>false</code>，Cowboy 将发送一个适当的状态错误响应。</p><p>如果方法是 POST，则可以返回 <code>true</code> 以及资源创建的 URI。这对于编写集合的处理程序特别有用。</p><p>否则，返回 <code>true</code> 表示成功。Cowboy 将根据资源是创建还是修改，以及响应中是否存在位置标头或主体来选择合适的响应发送。</p><h2 id="delete-方法" tabindex="-1"><a class="header-anchor" href="#delete-方法"><span>DELETE 方法</span></a></h2><p>此图仅适用于 DELETE 请求。</p><p>对于 <code>cond</code> 步骤的描述，请参见“条件请求”图示。</p><p><img src="'+i+'" alt="image-20250328114054370"></p><p>当资源存在且条件步骤成功时，可以删除资源。</p><p>Deleting the resource is a two steps process. First the callback <code>delete_resource</code> is executed. Use this callback to delete the resource.</p><p>Because the resource may be cached, you must also delete all cached representations of this resource in the system. This operation may take a while though, so you may return before it finished.</p><p>Cowboy will then call the <code>delete_completed</code> callback. If you know that the resource has been completely deleted from your system, including from caches, then you can return <code>true</code>. If any doubts persist, return <code>false</code>. Cowboy will assume <code>true</code> by default.</p><p>To finish, Cowboy checks if you set a response body, and depending on that, sends the appropriate response.</p><p>当资源不存在时，Cowboy 会确定该资源之前是否存在，以及是否已移动到其他位置，以便将客户端重定向到新的 URI。</p><p><code>moved_permanently</code> 和 <code>moved_temporarily</code> 回调必须返回资源实际上移动到的新位置。</p><h2 id="条件请求" tabindex="-1"><a class="header-anchor" href="#条件请求"><span>条件请求</span></a></h2><p>此图适用于所有除 OPTIONS 以外的请求方法。当资源存在时，它会在 <code>resource_exists</code> 回调之后执行。</p><p><img src="'+l+'" alt="image-20250328114110464"></p><p>一个请求在包含 if-match 头部；if-unmodified-since 头部；if-none-match 头部；或 if-modified-since 头部中的任意一个时，就会变得有条件。</p><p>如果条件不成立，请求将立即结束，不会检索或修改资源。</p><p>需要时会调用 <code>generate_etag</code> 和 <code>last_modified</code>。Cowboy 只会调用它们一次并缓存结果以供后续使用。</p>',66)]))}const b=o(h,[["render",m]]),y=JSON.parse('{"path":"/backend/erlang/dkwxjeul/","title":"rest流程图","lang":"zh-CN","frontmatter":{"title":"rest流程图","createTime":"2025/03/28 11:37:45","permalink":"/backend/erlang/dkwxjeul/"},"headers":[],"readingTime":{"minutes":6.7,"words":2010},"git":{"updatedTime":1743158971000,"contributors":[{"name":"syh","username":"syh","email":"syh@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/060d67e779a1b0aeace68a2a010b367f852e56888393383ea27302df983f6814?d=retro"}]},"filePathRelative":"notes/backend/erlang/rebar3/cowboy/rest/rest_flowchart.md"}');export{b as comp,y as data};
