import{_ as i,c as a,a as n,o as e}from"./app-C7T5jqfQ.js";const l="/blogs/assets/image-20230317000533106-78Xnxh1g.png",p="/blogs/assets/image-20230622005959365-eH5XQmxW.png",d="/blogs/assets/image-20230317164623895-C-Hz1SRu.png",h="/blogs/assets/image-20230317225132941-CyZTBNxS.png",t="/blogs/assets/image-20230317225703418-BuU33Fr3.png",r="/blogs/assets/image-20230316171208261-HImLQVxU.png",c="/blogs/assets/image-20230317140200115-D6ZmVyaq.png",o="/blogs/assets/image-20230317143456811-ChjxOu_y.png",u="/blogs/assets/image-20230317145254590-CRKoaKZ3.png",m="/blogs/assets/image-20230317150024367-CKl08qwy.png",v="/blogs/assets/image-20230317150246379-BD8GB9ta.png",k="/blogs/assets/image-20230317150705940-RLYZC6F0.png",g="/blogs/assets/image-20230317150919237-PPBA2luu.png",b="/blogs/assets/image-20230317150933690-BtClIS3q.png",f={};function y(x,s){return e(),a("div",null,s[0]||(s[0]=[n('<ul><li>shell既是一种命令语言，又是一种程序设计语言，shell是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务 <ul><li>shell是Linux的内置脚本</li></ul></li><li>脚本(Script)通过类似程序的方式执行具有一定逻辑顺序的命令序列完成较复杂的功能和人机交互 <ul><li>脚本程序保存在文本文件中</li><li>脚本程序是Shell命令语句的集合</li></ul></li></ul><h2 id="shell种类" tabindex="-1"><a class="header-anchor" href="#shell种类"><span>shell种类</span></a></h2><ul><li>在Linux中有很多类型的shell，不同的shell具备不同的功能，shell决定了脚本中函数的语法，Linux中默认的shell是/bin/bash, <ul><li>sh是一个快捷方式，已经被/bin/bash所取代</li></ul></li></ul><h2 id="编写规范" tabindex="-1"><a class="header-anchor" href="#编写规范"><span>编写规范</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>代码规范</span></span>\n<span class="line"><span>#!/bin/bash                  [指定告知系统当前这个佳酿要使用的shell解释器]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>文件名规范：</span></span>\n<span class="line"><span>文件名.sh                   [.sh是Linux下bash shell的默认后缀]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用流程" tabindex="-1"><a class="header-anchor" href="#使用流程"><span>使用流程</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>1、创建.sh文件            touch/vim</span></span>\n<span class="line"><span>2、编写shell代码</span></span>\n<span class="line"><span>3、执行shell脚本         脚本必须得有执权限</span></span>\n<span class="line"><span>这里在运行时一定要写成./test.sh或者/bin/bash test.sh，而不是test.sh,运行其它二进制的程序也一样，直接写test.sh，Linux会去PATH（环境变量）里寻找有没有叫test.sh的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shell中的引号" tabindex="-1"><a class="header-anchor" href="#shell中的引号"><span>Shell中的引号</span></a></h2><ul><li><p>反引号</p><ul><li><p>反引号用于命令替换，即将一个命令放在一对反引号``中，执行时先执行反引号中的命令</p><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>str=`ls-l`</span></span>\n<span class="line"><span>echo &quot;hello,today is `date`&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>单引号</p><ul><li><p>在一对单引号中的所有字符（包括元字符），保留原有字符的含义，其中不能包含单引号</p><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>echo &#39;$a `date`\\n&#39;    这个会原样输出</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>双引号</p><ul><li><p>在一对双引号中的字符（包括元字符），除了$,``,,外，其余均保留原来字符的含义</p><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>echo &quot;$a`date`&quot;   输出变量a的值，以及日期</span></span>\n<span class="line"><span>双引号中\\转义字符，需要echo -e参数才能起作用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><h3 id="使用规范" tabindex="-1"><a class="header-anchor" href="#使用规范"><span>使用规范</span></a></h3><p><strong>变量名后面的等号左右不能有空格</strong></p><ul><li><p>变量名命名规则</p><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开关</li><li>中间不能有空格，可以使用下划线</li><li>不能使用标点符号</li><li>不能使用bash里的关键字</li></ul></li><li><p>变量的使用</p><ul><li>在使用变量是时候一定需要在变量名前面添加一个$符号</li></ul></li><li><p>当在脚本中需要执行一些指令并且将执行的结果赋给变量的时候需要使用`</p><p><img src="'+l+'" alt="image-20230317000533106"></p></li><li><p><strong>默认情况下，所有变量都定义为全局变量</strong>，即使它们在函数内部声明也是如此，</p></li></ul><h3 id="declare命令" tabindex="-1"><a class="header-anchor" href="#declare命令"><span>declare命令</span></a></h3><ul><li>使用declare命令即可声明变量</li></ul><p>语法：<code>declare [+/-] [afrix]</code></p><ul><li>+/-:-可用来指定变量的属性，+则是取消变量所设的属性</li><li>-a：定义为数组array</li><li>-f:定义为函数function</li><li>-i：定义为整数integer</li><li>-r：定义为只读</li><li>-x:定义为通过环境输出变量</li></ul><h3 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量"><span>局部变量</span></a></h3><p>如果想使用局部变量，可以使用local关键字在函数体内声明局部变量</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>local var_name=var_value</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="常量" tabindex="-1"><a class="header-anchor" href="#常量"><span>常量</span></a></h3><p>语法：readonly 变量名</p><h3 id="系统变量" tabindex="-1"><a class="header-anchor" href="#系统变量"><span>系统变量</span></a></h3><ul><li><p>系统变量是Linux提供的一种特殊类型的变量，特别是用在检测参数时，将会发挥很重要的功能</p></li><li><p>常用的环境变量</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><mtext>不能获取第十个参数，获取第十个参数需要</mtext></mrow><annotation encoding="application/x-tex">10 不能获取第十个参数，获取第十个参数需要</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">10</span><span class="mord cjk_fallback">不能获取第十个参数，获取第十个参数需要</span></span></span></span>{10}。当n&gt;=10时，需要使用${n}来获取参数。</li></ul><p><img src="'+p+'" alt="image-20230622005959365"></p></li><li><p>HOME：指定用户的主工作目录</p></li><li><p>PATH：规定了一个命令执行时所搜寻的路径，Shell将按PATH变量中给出的路径进行搜索，找到的第一个与目录名称一致的可执行文件将被执行</p></li><li><p>UID：当前用户的标识号，值为数据构成的字符串</p></li><li><p>PWD：当前工作目录的绝对路径名</p></li><li><p>PSI：主提示符，root用户的提示符为#，普通用户的提示符为$</p></li><li><p>TERM：用户终端的类型</p></li><li><p>HOSTNAME：指主机的名称，许多应用程序如果要用到主机名的话，通常是从这个环境变量中来到得的</p></li></ul><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><p><img src="'+d+`" alt="image-20230317164623895"></p><h2 id="函数表达式" tabindex="-1"><a class="header-anchor" href="#函数表达式"><span>函数表达式</span></a></h2><ul><li>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如awk,expr,</li></ul><h3 id="expr命令" tabindex="-1"><a class="header-anchor" href="#expr命令"><span>expr命令</span></a></h3><ul><li><p>expr命令进行表达式的算术运算，<strong>Shell变量保存的是整数数字字符串</strong>，expr命令将数字字符串解释为整数，然后进行运算符的运算，得出结果</p></li><li><p>使用expr命令时，<strong>数字与运算符之间要用空格隔开</strong>。并且”*“需用转义符“\\”标注。</p></li></ul><p>语法<code>expr 数值1 运算符 数值2</code></p><h3 id="let命令" tabindex="-1"><a class="header-anchor" href="#let命令"><span>let命令</span></a></h3><ul><li><p>使用let命令后，可以直接跟表达式，不用加双括号。</p><ul><li><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">let</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a=1+2</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">let</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> b=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$a</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">*</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">3</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $b</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">let</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> c=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$b</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/4</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>使用双括号可以像C语言一样直接使用运算符进行计算。</p><ul><li><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $((</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">1+20</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=$((</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">2*4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=$((</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$a</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $b</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=$((</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$b</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $d</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=$((</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$a</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">%5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $e</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><ul><li>以函数名称开关，后跟括号</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>function_name () {  </span></span>
<span class="line"><span>   commands  </span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数传递" tabindex="-1"><a class="header-anchor" href="#参数传递"><span>参数传递</span></a></h3><ul><li>解释器将传递参数的值存储到预定义的变量中，然后根据传递的参数顺序进行命名 <ul><li>给定的参数以<code>$0</code>,<code>$1</code>，<code>$2</code>，<code>$3</code>,<code>...$n</code>的形式访问，对应于函数名后参数的位置。 <ul><li><code>$0</code>变量的值是函数的名称。</li><li><code>$#</code>变量用于保存赋予函数的位置自变量/参数的数量。</li><li><code>$*</code>和<code>$@</code>变量用于保存赋予函数的所有参数。 <ul><li>当<code>$*</code>与双引号(即<code>&quot;$*&quot;</code>)一起使用时，它将扩展为一个由空格分隔的字符串。例如，<code>&quot;$1 $2 $n&quot;</code>等。</li><li>当<code>$@</code>与双引号(即<code>&quot;$@&quot;</code>)一起使用时，它将扩展为单独的字符串。例如，<code>&quot;$1&quot; &quot;$2&quot; &quot;$n&quot;</code>等。</li><li>当<code>$*</code>和<code>$#</code>不与双引号一起使用时，它们都是相同的。</li></ul></li></ul></li></ul></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>#!/bin/bash  </span></span>
<span class="line"><span>#Script to pass and access arguments  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>function_arguments(){  </span></span>
<span class="line"><span>    echo $1  </span></span>
<span class="line"><span>    echo $2  </span></span>
<span class="line"><span>    echo $3  </span></span>
<span class="line"><span>    echo $4  </span></span>
<span class="line"><span>    echo $5  </span></span>
<span class="line"><span>}  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>#Calling function_arguments  </span></span>
<span class="line"><span>function_arguments &quot;We&quot; &quot;welcome&quot; &quot;you&quot; &quot;on&quot; &quot;Yiibai&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果</p><p><img src="`+h+`" alt="image-20230317225132941"></p><h3 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h3><ul><li>bash函数不提供在调用时返回值的支持，但是，它们允许设置返回状态，这种状态类似于程序或命令如何以退出状态退出 <ul><li>bash函数完成时，其返回值是函数中最后执行的语句的状态， <ul><li>对于成功状态，它将返回0，</li><li>对于失败，将返回1-255范围内的非零十进制数</li></ul></li><li>可以使用关键字return指示返回状态，并将它分配给变量$?,return语句终止函数并用于函数的退出状态</li></ul></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>#!/bin/bash  </span></span>
<span class="line"><span>#Setting up a return status for a function  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>print_it () {  </span></span>
<span class="line"><span>    echo Hello $1  </span></span>
<span class="line"><span>    return 5  </span></span>
<span class="line"><span>}  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>print_it User  </span></span>
<span class="line"><span>print_it Reader  </span></span>
<span class="line"><span>echo The previous function returned a value of $?</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果</p><p><img src="`+t+'" alt="image-20230317225703418"></p><h2 id="用户输入输出" tabindex="-1"><a class="header-anchor" href="#用户输入输出"><span>用户输入输出</span></a></h2><h3 id="read命令" tabindex="-1"><a class="header-anchor" href="#read命令"><span>read命令</span></a></h3><ul><li><p>read [-n] [-p] 提示信息 变量名</p><p><img src="'+r+`" alt="image-20230316171208261"></p><ul><li>answer:指定的变量，可以随意定义</li><li>-n:指定输入字符的个数，达到个数自动结束输入</li><li>-p:给出提示信息</li></ul></li></ul><h3 id="echo命令" tabindex="-1"><a class="header-anchor" href="#echo命令"><span>echo命令</span></a></h3><p>可以使用echo命令在命令行内输出 指定内容</p><p>语法：echo [-n] 输出 的内容</p><ul><li>-n:输出字符串后不换行</li><li>要输出 的内容，可以用“”或’‘包围 <ul><li>”“可以识别变量，能够实现转义</li><li>’‘不能识别变量，只会原样输出，不能实现转义</li></ul></li><li>用\`\`包围起来的内容，会被 当作命令执行，而非普通字符</li></ul><h2 id="控制语句" tabindex="-1"><a class="header-anchor" href="#控制语句"><span>控制语句</span></a></h2><h3 id="条件语名" tabindex="-1"><a class="header-anchor" href="#条件语名"><span>条件语名</span></a></h3><ul><li><p>语法</p><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>if [ condition ]</span></span>
<span class="line"><span>then</span></span>
<span class="line"><span>	command1</span></span>
<span class="line"><span>	command2</span></span>
<span class="line"><span>	...</span></span>
<span class="line"><span>elif [ condition2 ]</span></span>
<span class="line"><span>then</span></span>
<span class="line"><span>	command</span></span>
<span class="line"><span>else 	</span></span>
<span class="line"><span>	command</span></span>
<span class="line"><span>fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>条件判断可以使用[[...]],在双括号中间可以使用正常的java语法，但每一个操作数之间依然要使用空格</p></li><li><p>单行写法：if [condition];then command;fi</p></li></ul></li></ul><h3 id="循环语句" tabindex="-1"><a class="header-anchor" href="#循环语句"><span>循环语句</span></a></h3><h4 id="while循环" tabindex="-1"><a class="header-anchor" href="#while循环"><span>while循环</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>while 测试命令 </span></span>
<span class="line"><span>do </span></span>
<span class="line"><span>	命令表</span></span>
<span class="line"><span>done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环"><span>for循环</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>for 变量 in 字符串/参数列表</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>	命令列表</span></span>
<span class="line"><span>done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>字符串/参数列表用空格分隔，然后循环将其依次赋给变量</p><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span>for i in &quot;1&quot; &quot;2&quot; &quot;3&quot;</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>        echo &quot;$i&quot;</span></span>
<span class="line"><span>done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="分支语句" tabindex="-1"><a class="header-anchor" href="#分支语句"><span>分支语句</span></a></h3><ul><li><strong>case ... esac</strong> 为多选择语句，与其他语言中的 switch ... case 语句类似，是一种多分支选择结构，每个 case 分支用右圆括号开始，用两个分号 <strong>;;</strong> 表示 break，即执行结束，跳出整个 case ... esac 语句，esac（就是 case 反过来）作为结束标记。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>case 值 in</span></span>
<span class="line"><span>模式1)</span></span>
<span class="line"><span>    command1</span></span>
<span class="line"><span>    command2</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>    commandN</span></span>
<span class="line"><span>    ;;</span></span>
<span class="line"><span>模式2)</span></span>
<span class="line"><span>    command1</span></span>
<span class="line"><span>    command2</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>    commandN</span></span>
<span class="line"><span>    ;;</span></span>
<span class="line"><span>esac</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><h3 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符"><span>算数运算符</span></a></h3><ul><li>条件表达式要放在方括号之间，并且要有空格，例如[<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mo>=</mo></mrow><annotation encoding="application/x-tex">a==</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">==</span></span></span></span>b]是错误的，必须写成[$a == $b]</li><li></li></ul><p><img src="`+c+'" alt="image-20230317140200115"></p><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字</p><p><img src="'+o+'" alt="image-20230317143456811"></p><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h3><p><img src="'+u+'" alt="image-20230317145254590"></p><h3 id="字符串运算符" tabindex="-1"><a class="header-anchor" href="#字符串运算符"><span>字符串运算符</span></a></h3><p><img src="'+m+'" alt="image-20230317150024367"></p><p><img src="'+v+'" alt="image-20230317150246379"></p><h3 id="文件测试运算符" tabindex="-1"><a class="header-anchor" href="#文件测试运算符"><span>*文件测试运算符</span></a></h3><p><img src="'+k+'" alt="image-20230317150705940"></p><p><img src="'+g+'" alt="image-20230317150919237"></p><p><img src="'+b+'" alt="image-20230317150933690"></p>',81)]))}const $=i(f,[["render",y]]),A=JSON.parse('{"path":"/os/mm9ojper/","title":"shell脚本","lang":"zh-CN","frontmatter":{"title":"shell脚本","createTime":"2025/03/23 18:28:31","permalink":"/os/mm9ojper/"},"headers":[],"readingTime":{"minutes":7.54,"words":2261},"git":{"updatedTime":1743091220000,"contributors":[{"name":"舒永好","username":"舒永好","email":"shuyonghao@guoshenghuaxing.com","commits":1,"avatar":"https://gravatar.com/avatar/4b1c3f37ea707968be73c631a79de33afd360724ce87bf8f9dcacd67d14df92c?d=retro"}]},"filePathRelative":"notes/os/linux/script.md"}');export{$ as comp,A as data};
