import{_ as i,c as a,a as n,o as l}from"./app-C7T5jqfQ.js";const e={};function h(t,s){return l(),a("div",null,s[0]||(s[0]=[n(`<blockquote><p>在分布式<code>Erlang</code>里，我们编写的程序会在<code>Erlang</code>的节点（<code>node</code>）上运行。<strong>节点是一个独立的<code>Erlang</code>系统，包含一个自带地址空间和进程组的完整虚拟机。</strong></p><p>分布式Erlang应用程序运行在一个可信环境中。因为任何节点都可以在其他Erlang节点上执行任意操作，所以这涉及高度的信任。虽然分布式Erlang应用程序可以运行在开放式网络上，但它们通常是运行在属于同一个局域网的集群上，并受防火墙保护。</p></blockquote><h2 id="节点" tabindex="-1"><a class="header-anchor" href="#节点"><span>节点</span></a></h2><blockquote><p>一个正在运行的 Erlang 虚拟机实例，准备连接到其他虚拟机，称为<em>节点</em></p><p>当你启动一个节点时，你给它一个名称，它将连接到一个名为<em>EPMD</em>（<a href="https://erlang.org.cn/doc/man/epmd.html" target="_blank" rel="noopener noreferrer">Erlang 端口映射守护进程</a>）的应用程序，该应用程序将在你的 Erlang 集群中的每台计算机上运行。EPMD 将充当名称服务器，允许节点注册自己，联系其他节点，并在存在任何名称冲突时向你发出警告。</p></blockquote><p>从这一点开始，一个节点可以决定建立与另一个节点的连接。当它这样做时，两个节点都会自动开始相互监视，它们可以知道连接是否断开，或者节点是否消失。更重要的是，当一个新节点加入到已经连接到一组节点的另一个节点时，新节点将连接到整个组。</p><p>让我们以僵尸爆发期间一群幸存者为例，来说明 Erlang 节点如何建立它们的连接。我们有 Zoey、Bill、Rick 和 Daryl。Zoey 和 Bill 彼此认识，并在对讲机上使用相同的频率进行交流。Rick 和 Daryl 都是独立的</p><p><img src="https://learnyousome.erlang.org.cn/static/img/mesh1.png" alt="Four survivors: Bill, Zoey, Rick and Daryl. Only Bill and Zoey are connected together"></p><p>现在假设 Rick 和 Daryl 在前往幸存者营地的路上相遇了。他们共享他们的对讲机频率，现在可以在再次分开之前保持最新消息。</p><p><img src="https://learnyousome.erlang.org.cn/static/img/mesh2.png" alt="Four survivors: Bill, Zoey, Rick and Daryl. Bill and Zoey are connected together, and Rick and Daryl are connected together. We thus have two groups of two"></p><p>在某个时刻，Rick 遇到了 Bill。他们都对此感到非常高兴，于是他们决定共享频率。此时，连接蔓延，最终图如下所示</p><p><img src="https://learnyousome.erlang.org.cn/static/img/mesh3.png" alt="Four survivors: Bill, Zoey, Rick and Daryl. All survivors are connected together: Bill is connected to Zoey, Rick and Daryl, Zoey is connected to Bill, Rick and Daryl, Rick is connected to Bill, Zoey and Daryl, and Daryl is connected to Rick, Zoey and Bill."></p><p>这意味着任何幸存者都可以直接联系任何其他人。这很有用，因为如果任何幸存者死亡，都不会有人被孤立。Erlang 节点以完全相同的方式设置：每个人都连接到每个人。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>这种做事方式，虽然对于某些容错性原因来说很好，但有一个相当糟糕的缺点，即你能扩展的程度。仅仅因为需要多少连接和多少闲聊，要让数百个节点成为你的 Erlang 集群的一部分将会很困难。实际上，你需要为你要连接的每个节点提供一个端口。</p></div><p>一旦节点相互连接，它们就保持完全独立：它们保留自己的进程注册表，自己的 ETS 表（使用自己的表名），它们加载的模块彼此独立。一个崩溃的连接节点不会导致与其连接的节点崩溃。</p><p>连接的节点然后可以开始交换消息。Erlang 的分布式模型被设计为本地进程可以联系远程进程并向其发送常规消息。如果没有任何东西是共享的，并且所有进程注册表都是唯一的，那么这是如何可能的？正如我们将在稍后讨论分布式的细节时看到的那样，有一种方法可以访问特定节点上的注册进程。从那时起，可以发送第一条消息。</p><p>Erlang 消息将以透明的方式自动为你序列化和反序列化。所有数据结构，包括 pid，在远程和本地都将以相同的方式工作。这意味着我们可以通过网络发送 pid，然后与它们通信，发送消息，等等。更棒的是，如果你可以访问 pid，就可以在网络上设置链接和监视器！</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>跨节点的链接和监视可能很危险。在网络故障的情况下，所有远程链接和监视器都会立即触发。这可能会向各种进程生成数千条信号和消息，从而给系统带来沉重而意想不到的负载。</p></div><h3 id="节点的连接" tabindex="-1"><a class="header-anchor" href="#节点的连接"><span>节点的连接</span></a></h3><p>如果你发现自己想通过防火墙使用分布式 Erlang（并且不想使用隧道），你可能需要为 Erlang 通信打开一些端口。如果你想这样做，你需要打开端口 4369，这是 EPMD 的默认端口。使用这个端口是一个好主意，因为它由爱立信正式注册用于 EPMD。这意味着你使用的任何符合标准的操作系统都将拥有该端口，并且该端口将处于空闲状态，准备用于 EPMD。</p><p>然后，你需要打开一组端口以用于节点之间的连接。问题是 Erlang 只会为节点间连接分配随机端口号。但是，有两个隐藏的应用程序变量可以让你指定可以分配端口的范围。这两个值分别是 <code>kernel</code> 应用程序中的 <code>inet_dist_listen_min</code> 和 <code>inet_dist_listen_max</code>。</p><p>例如，你可以以 <code>erl -name left_4_distribudead -kernel inet_dist_listen_min 9100 -kernel inet_dist_listen_max 9115</code> 的方式启动 Erlang，以便设置一个范围为 16 个端口的范围，供 Erlang 节点使用。或者，你可以使用一个看起来像这样的配置文件 <code>ports.config</code></p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">kernel</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,[</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">inet_dist_listen_min</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 9100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">inet_dist_listen_max</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 9115</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">]}]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后以 <code>erl -name the_army_of_darknodes -config ports</code> 的方式启动 Erlang 节点。这些变量将以相同的方式设置。</p><h2 id="分布式计算谬论" tabindex="-1"><a class="header-anchor" href="#分布式计算谬论"><span>分布式计算谬论</span></a></h2><h3 id="没有延迟" tabindex="-1"><a class="header-anchor" href="#没有延迟"><span>没有延迟</span></a></h3><p>忘记网络通信会使即使是最小的消息也变慢，如果你总是期望获得非常快的结果，这是一个代价高昂的错误。Erlang 的模型在这方面对我们很友好。由于我们使用隔离的进程、异步消息、超时和始终考虑进程失败的可能性来设置我们的本地应用程序的方式，因此很少需要适应分布式：超时、链接、监视器和异步模式保持不变，并且仍然可靠。我们从一开始就预料到了这种问题，因此 Erlang 隐式地不假设没有延迟。</p><h3 id="带宽无限" tabindex="-1"><a class="header-anchor" href="#带宽无限"><span>带宽无限</span></a></h3><p>尽管网络传输速度越来越快，而且一般来说，随着时间的推移，每个通过网络传输的字节都更便宜，但假设发送大量数据既简单又容易是有风险的。</p><p>一般来说，由于我们本地构建应用程序的方式，我们在 Erlang 中不会遇到太多这方面的问题。请记住，一个好方法是发送有关正在发生的事情的消息，而不是四处移动新的状态（“玩家 X 找到了物品 Y”，而不是一遍又一遍地发送玩家 X 的整个物品清单）。</p><p>如果由于某种原因，您需要发送大型消息，请务必格外小心。Erlang 分布式和通信在许多节点上工作的方式对大型消息特别敏感。如果两个节点相互连接，它们的所有通信都倾向于通过单个 TCP 连接进行。由于我们通常希望在两个进程之间（即使跨网络）保持消息排序，因此消息将按顺序通过连接发送。这意味着，如果您有一条非常大的消息，您可能会阻塞该通道以接收所有其他消息。</p><p>更糟糕的是，Erlang 通过发送称为“心跳”的东西来了解节点是存活还是死亡。心跳是定期发送给两个节点之间的小型消息，基本上是在说“我还活着，继续保持下去！”。它们就像我们的僵尸幸存者定期互相发送消息一样；“比尔，你在那里吗？”如果比尔从未回复，那么你可能会认为他死了（或没电了），并且你将无法收到他未来的通信。无论如何，心跳通过与常规消息相同的通道发送。</p><p>问题是大型消息可能会因此阻碍心跳。太多的大型消息长时间地让心跳处于封锁状态，最终其中一个节点会认为另一个节点没有响应，并断开彼此的连接。这很糟糕。无论如何，防止这种情况发生的良好 Erlang 设计教训是保持消息小巧。这样一切都会更好。</p><h3 id="网络是安全的" tabindex="-1"><a class="header-anchor" href="#网络是安全的"><span>网络是安全的</span></a></h3><p>当您进行分布式部署时，相信一切都安全，您可以信任收到的消息，这往往非常危险。它可能是像有人意外地伪造消息并将其发送给您，有人拦截数据包并修改它们（或查看敏感数据），或者在最糟糕的情况下，有人能够接管您的应用程序或其运行的系统等简单的事情。</p><p>因为 Erlang 分布式最初是为容错和组件冗余而设计的。在该语言的早期，当它用于电话交换机和其他电信应用时，Erlang 经常部署在以最奇怪的方式运行的硬件上——非常偏远的地方，环境很奇怪（工程师有时必须将服务器连接到墙上以避免潮湿的地面，或在树林里安装定制的加热系统以使硬件在最佳温度下运行）。在这些情况下，您有故障转移硬件作为主硬件的同一物理位置的一部分。这通常是分布式 Erlang 运行的地方，这也解释了为什么 Erlang 设计人员假设了一个安全的网络来操作。</p><p>不幸的是，这意味着现代 Erlang 应用程序很少能够跨不同的数据中心进行集群。实际上，不建议这样做。大多数情况下，您希望您的系统基于许多较小的、隔离的 Erlang 节点集群，通常位于单个位置。任何更复杂的事情都需要由开发人员来处理：要么切换到 <a href="https://erlang.org.cn/doc/apps/ssl/ssl_distribution.html" target="_blank" rel="noopener noreferrer">SSL</a>，实现他们自己的高级通信层，通过安全通道进行隧道传输，或者重新实现节点之间的通信协议。</p><h3 id="拓扑不会改变" tabindex="-1"><a class="header-anchor" href="#拓扑不会改变"><span>拓扑不会改变</span></a></h3><p>在最初设计用于在许多服务器上运行的分布式应用程序时，您可能会想到一定数量的服务器，也许还想到了一组给定的主机名。也许您会使用特定的 IP 地址进行设计。这可能是一个错误。硬件会损坏，运维人员会移动服务器，会添加新机器，有些机器会被移除。网络拓扑结构将不断变化。如果您的应用程序使用任何这些硬编码的拓扑细节，那么它将无法轻松地处理网络中的这些变化。</p><p>在 Erlang 的情况下，没有以这种方式做出任何明确的假设。但是，让它潜入您的应用程序非常容易。Erlang 节点都有一个名称和一个主机名，并且它们可以不断变化。对于 Erlang 进程，您不仅要考虑进程的命名方式，还要考虑它现在在集群中的位置。如果您硬编码名称和主机，那么您可能在下次故障时会遇到麻烦。不过，别担心太多，因为我们将在后面看到一些有趣的库，它们让我们忘记节点名称和拓扑结构，同时仍然能够定位特定进程。</p><h3 id="只有一个管理员" tabindex="-1"><a class="header-anchor" href="#只有一个管理员"><span>只有一个管理员</span></a></h3><p>无论如何，这是语言或库的分布式层无法为您准备的。这种谬论的思想是，您并不总是只有一个软件及其服务器的主要操作员，尽管它可能是像只有一个操作员一样设计的。如果您决定在一台计算机上运行多个节点，那么您可能永远不必关心这种谬论。但是，如果您跨不同位置运行东西，或者第三方依赖于您的代码，那么您就必须注意。</p><p>需要注意的事情包括为其他人提供诊断系统问题的工具。Erlang 在您可以手动操作 VM 时，调试起来比较容易——毕竟，您甚至可以在需要时动态地重新加载代码。但是，无法访问您的终端并坐在节点前面的人需要不同的设施来操作。</p><p>这种谬论的另一个方面是，诸如重启服务器、在数据中心之间移动实例或升级软件堆栈的各个部分，并不一定是只有一个人或一个团队控制的。在非常大型的软件项目中，实际上很可能许多团队，甚至许多不同的软件公司，会负责整个系统的不同部分。</p><p>如果您正在为您的软件堆栈编写协议，则可能需要能够处理该协议的多个版本，这取决于您的用户和合作伙伴升级代码的速度。协议可能从一开始就包含有关其版本控制的信息，或者能够在事务进行过程中进行更改，具体取决于您的需求。我相信您可以想到更多可能会出错的事情的示例。</p><h3 id="传输成本为零" tabindex="-1"><a class="header-anchor" href="#传输成本为零"><span>传输成本为零</span></a></h3><p>这是一个双方面的假设。第一个假设与数据传输的时间成本有关，第二个假设与数据传输的资金成本有关。</p><p>第一种情况假设执行诸如序列化数据之类的操作几乎是免费的，非常快，并且没有发挥很大的作用。实际上，较大的数据结构比较小的数据结构需要更长的时间来序列化，然后需要在网络的另一端进行反序列化。无论您在网络中传输什么，情况都会如此。小型消息将有助于减少这种效果的明显程度。</p><p>假设传输成本为零的第二个方面与传输数据的成本有关。在现代服务器堆栈中，内存（包括 RAM 和磁盘中的内存）通常比带宽成本便宜，而带宽成本是您必须持续支付的，除非您拥有运行这些东西的整个网络。在这种情况下，优化以减少使用更少请求的小型消息将是有益的。</p><p>对于 Erlang，由于其最初的使用案例，没有特别注意执行诸如压缩跨节点传输的消息之类的操作（尽管该功能已经存在）。相反，原始的设计人员选择让人们根据需要实现他们自己的通信层。因此，程序员有责任确保发送小型消息并采取其他措施来最大程度地减少传输数据的成本。</p><h3 id="网络是同构的" tabindex="-1"><a class="header-anchor" href="#网络是同构的"><span>网络是同构的</span></a></h3><p>最后一个假设是认为网络应用程序的所有组件都会说同一种语言，或者会使用相同的格式协同工作。</p><p>对于我们的僵尸幸存者，这可能是一个问题，即不要假设所有幸存者在制定计划时都会说英语（或流利的英语），或者一个词对不同的人有不同的含义。</p><p>在编程方面，这通常是不要依赖封闭标准，而是使用开放标准，或者准备在任何时候从一种协议切换到另一种协议。在 Erlang 中，分布式协议是完全公开的，但所有 Erlang 节点都假设与它们通信的人会说同一种语言。试图融入 Erlang 集群的外国人要么必须学会说 Erlang 的协议，要么 Erlang 应用程序需要某种用于 XML、JSON 或其他内容的翻译层。</p><p>如果它像鸭子一样嘎嘎叫，而且像鸭子一样行走，那么它一定是一只鸭子。这就是我们有 <a href="https://erlang.org.cn/doc/tutorial/cnode.html" target="_blank" rel="noopener noreferrer">C-节点</a> 的原因。C-节点（或使用 C 以外的其他语言的节点）建立在任何语言和应用程序都可以实现 Erlang 协议，然后假装它是集群中的 Erlang 节点的思想之上。</p><p>另一种用于数据交换的解决方案是使用称为 BERT 或 <a href="http://bert-rpc.org/" target="_blank" rel="noopener noreferrer">BERT-RPC</a> 的东西。这是一种类似于 XML 或 JSON 的交换格式，但指定为类似于 <a href="https://erlang.org.cn/doc/apps/erts/erl_ext_dist.html" target="_blank" rel="noopener noreferrer">Erlang 外部项格式</a> 的东西。</p><p>简而言之，您始终需要注意以下几点</p><ul><li>您不应该假设网络是可靠的。Erlang 除了检测到出现错误之外，没有任何特殊措施（尽管这作为一个功能还不错）。</li><li>网络可能会偶尔变慢。Erlang 提供异步机制，并且了解这一点，但是您必须小心，以确保您的应用程序不会违背这一点并破坏它。</li><li>带宽不是无限的。小型、描述性的消息有助于尊重这一点。</li><li>网络并不安全，而且 Erlang 默认情况下没有任何东西可以提供。</li><li>网络拓扑可能会发生变化。Erlang 没有做出任何明确的假设，但是您可能会对事物所在的位置以及它们的命名方式做出一些假设。</li><li>您（或您的组织）很少完全控制事物的结构。您的系统的一部分可能已过时，使用不同的版本，在您不期望的时候重启或关闭。</li><li>传输数据有成本。同样，小型、简短的消息有所帮助。</li><li>网络是异构的。并非所有事物都相同，并且数据交换应该依赖于记录良好的格式。</li></ul><h2 id="cap定理" tabindex="-1"><a class="header-anchor" href="#cap定理"><span>CAP定理</span></a></h2><h3 id="问题引入" tabindex="-1"><a class="header-anchor" href="#问题引入"><span>问题引入</span></a></h3><p>分布式系统中的节点也存在同样的困境。当一个节点变得无响应时，它是由于硬件故障消失了吗？应用程序崩溃了吗？网络上是否有拥塞？网络宕机了吗？在某些情况下，应用程序不再运行，您可以简单地忽略该节点并继续您正在做的事情。在其他情况下，应用程序仍在孤立节点上运行；从该节点的角度来看，其他所有东西都死了。</p><p>Erlang 做出了默认决策，将不可达节点视为死节点，将可达节点视为活节点。这是一种悲观的做法，如果你想非常快地应对灾难性故障，这很有意义；它假设网络通常比系统中的硬件或软件更容易出现故障，考虑到 Erlang 最初的使用方式，这很有意义。乐观的方法（假设节点仍然存活）可能会延迟与崩溃相关的措施，因为它假设网络比硬件或软件更容易出现故障，从而使集群等待更长时间以重新集成断开的节点。</p><p>这提出了一个问题。在悲观的系统中，当我们认为已经死去的节点突然又回来了，结果它根本没有死时会发生什么？我们被一个活着的死节点所震惊，它拥有自己的生命，与集群完全隔离：数据、连接等。会发生一些非常令人讨厌的事情。</p><p>让我们想象一下，您有一个系统，在两个不同的数据中心有两个节点。在这个系统中，用户在其帐户中拥有资金，每个节点都持有全部金额。然后每个事务将数据同步到所有其他节点。当所有节点都正常时，用户可以继续花钱，直到他的帐户为空，然后就无法再出售任何东西了。</p><p>软件运行良好，但在某些时候，其中一个节点与另一个节点断开连接。无法知道另一方是活着还是死了。就我们所知，这两个节点仍然可以接收来自公众的请求，但无法相互通信。</p><p>有两种基本策略可以选择：停止所有交易或不停止。选择第一个的风险是您的产品将变得不可用，您将损失金钱。选择第二个的风险是，一个在账户中有 1000 美元的用户现在有两个服务器可以接受 1000 美元的交易，总计 2000 美元！无论我们做什么，如果我们做错事，我们都有可能损失金钱。</p><p>有没有办法通过在网络分裂期间保持应用程序可用，而不必在服务器之间丢失数据来完全避免这个问题？</p><h3 id="cap" tabindex="-1"><a class="header-anchor" href="#cap"><span>CAP</span></a></h3><blockquote><p>CAP 定理首先指出，所有分布式系统都存在三个核心属性：<em>C</em>一致性、<em>A</em>可用性和<em>P</em>分区容忍性。</p></blockquote><ul><li>一致性 <ul><li>在对同一数据段进行操作时，不会出现两个不同的操作以导致系统在这些操作期间报告多个不同的值</li></ul></li><li>可用性 <ul><li>向系统请求某些数据，您能够收到响应</li></ul></li><li>分区容忍性 <ul><li>即使系统的一部分无法相互通信，系统也可以继续工作（并包含有用的信息）</li></ul></li></ul><p>AP 定理基本上规定，在任何分布式系统中，您只能拥有 CAP 中的两个：CA、CP 或 AP。不可能同时拥有所有三个。这既是坏消息，也是好消息。坏消息是，即使在网络出现故障的情况下，也无法保证一切都能正常进行。好消息是，这是一个定理。如果客户要求您提供所有三个，您将有优势告诉他们这实际上是不可能的，并且不必在解释 CAP 定理是什么之外花费太多时间。</p><p>在有人发明了永不出现故障的网络和硬件，或有某种方法可以在一个部分出现故障时使系统的所有部分同时出现故障之前，故障将成为一种选择。CAP 定理只剩下两种组合：AP 或 CP。被网络分裂撕裂的系统可以保持可用或一致，但不能同时保持两者。</p><h2 id="rpc模块" tabindex="-1"><a class="header-anchor" href="#rpc模块"><span><code>rpc</code>模块</span></a></h2><blockquote><p>Erlang 的 <code>rpc</code> 模块提供了远程过程调用（<code>Remote Procedure Call, RPC</code>）的功能，允许一个节点上的进程调用另一个节点上的函数</p><p><code>rpc</code> 模块的主要作用是：</p><ol><li>提供一种简单的方式，在远程节点上执行函数。</li><li>支持同步和异步调用。</li><li>提供超时机制，防止调用阻塞过久。</li><li>支持多节点并行调用。</li></ol></blockquote><h3 id="_1-rpc-call-4" tabindex="-1"><a class="header-anchor" href="#_1-rpc-call-4"><span>1. <strong><code>rpc:call/4</code></strong></span></a></h3><blockquote><p>本质上是在Node上执行<code>apply(Mod, Function, Args)</code>，然后返回结果<code>Result</code>，如果调用失败则返回<code>{badrpc, Reason}</code>。</p></blockquote><ul><li><strong>功能</strong>：<strong>同步</strong>调用远程节点上的一个函数 ，并等待结果。</li><li><strong>参数</strong>： <ul><li><code>Node</code>：远程节点名称（原子）。</li><li><code>Module</code>：模块名称（原子）。</li><li><code>Function</code>：函数名称（原子）。</li><li><code>Args</code>：函数参数列表。</li></ul></li><li><strong>返回值</strong>： <ul><li>如果调用成功，返回函数的结果。</li><li>如果调用失败，返回 <code>{badrpc, Reason}</code>。</li></ul></li></ul><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% 调用远程节点 &#39;node@host&#39; 上的方法 lists:sort/1</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Result</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> rpc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">call</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">node@host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> lists</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> sort</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]])</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% Result = [1, 2, 3]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-rpc-block-call-4" tabindex="-1"><a class="header-anchor" href="#_2-rpc-block-call-4"><span>2. <strong><code>rpc:block_call/4</code></strong></span></a></h3><ul><li><strong>功能</strong>：与 <code>rpc:call/4</code> 类似，但在调用期间会<strong>阻塞调用者</strong>，直到远程节点完成操作。</li><li><strong>参数</strong>：同 <code>rpc:call/4</code>。</li><li><strong>返回值</strong>：同 <code>rpc:call/4</code>。</li></ul><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h4><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Result</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> rpc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">block_call</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">node@host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> lists</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> sort</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]])</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% Result = [1, 2, 3]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-rpc-cast-4" tabindex="-1"><a class="header-anchor" href="#_3-rpc-cast-4"><span>3. <strong><code>rpc:cast/4</code></strong></span></a></h3><ul><li><strong>功能</strong>：<strong>异步</strong>调用远程节点上的一个函数 ，不等待结果。</li><li><strong>参数</strong>： <ul><li><code>Node</code>：远程节点名称（原子）。</li><li><code>Module</code>：模块名称（原子）。</li><li><code>Function</code>：函数名称（原子）。</li><li><code>Args</code>：函数参数列表。</li></ul></li><li><strong>返回值</strong>：<code>true</code>（表示调用已发送）。</li></ul><h4 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例</span></a></h4><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% 调用远程节点 &#39;node@host&#39; 上的方法 io:format/2</span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">rpc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cast</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">node@host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> format</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello, World!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">~</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-rpc-multicall-4" tabindex="-1"><a class="header-anchor" href="#_4-rpc-multicall-4"><span>4. <strong><code>rpc:multicall/4</code></strong></span></a></h3><ul><li><strong>功能</strong>：<strong>并行</strong>调用多个节点上的同一个函数，并收集所有节点的结果。</li><li><strong>参数</strong>： <ul><li><code>Nodes</code>：节点列表（原子列表）。</li><li><code>Module</code>：模块名称（原子）。</li><li><code>Function</code>：函数名称（原子）。</li><li><code>Args</code>：函数参数列表。</li></ul></li><li><strong>返回值</strong>： <ul><li><code>{Results, BadNodes}</code>： <ul><li><code>Results</code>：每个节点的调用结果列表。</li><li><code>BadNodes</code>：调用失败的节点列表。</li></ul></li></ul></li></ul><h4 id="示例-3" tabindex="-1"><a class="header-anchor" href="#示例-3"><span>示例</span></a></h4><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% 在多个节点上调用 lists:sort/1</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Nodes</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">node1@host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">node2@host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">node3@host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Results</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> BadNodes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> rpc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">multicall</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Nodes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> lists</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> sort</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]])</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% Results = [[1, 2, 3], [1, 2, 3], [1, 2, 3]]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% BadNodes = [] （如果没有失败的节点）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5-rpc-async-call-4" tabindex="-1"><a class="header-anchor" href="#_5-rpc-async-call-4"><span>5. <strong><code>rpc:async_call/4</code></strong></span></a></h3><ul><li><strong>功能</strong>：<strong>异步</strong>调用远程节点上的一个函数，并返回一个用于获取结果的键。</li><li><strong>参数</strong>： <ul><li><code>Node</code>：远程节点名称（原子）。</li><li><code>Module</code>：模块名称（原子）。</li><li><code>Function</code>：函数名称（原子）。</li><li><code>Args</code>：函数参数列表。</li></ul></li><li><strong>返回值</strong>：<code>Key</code>（用于获取结果的键）。</li></ul><h4 id="示例-4" tabindex="-1"><a class="header-anchor" href="#示例-4"><span>示例</span></a></h4><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% 在远程节点 &#39;node@host&#39; 上异步调用 lists:sort/1</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> rpc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">async_call</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">node@host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> lists</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> sort</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]])</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% 稍后使用 rpc:yield/1 获取结果</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Result</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> rpc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">yield</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% Result = [1, 2, 3]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_6-rpc-yield-1" tabindex="-1"><a class="header-anchor" href="#_6-rpc-yield-1"><span>6. <strong><code>rpc:yield/1</code></strong></span></a></h3><ul><li><strong>功能</strong>：获取异步调用的结果。</li><li><strong>参数</strong>： <ul><li><code>Key</code>：异步调用返回的键。</li></ul></li><li><strong>返回值</strong>： <ul><li>如果调用完成，返回函数的结果。</li><li>如果调用未完成，阻塞等待结果。</li></ul></li></ul><h4 id="示例-5" tabindex="-1"><a class="header-anchor" href="#示例-5"><span>示例</span></a></h4><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> rpc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">async_call</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">node@host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> lists</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> sort</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]])</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Result</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> rpc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">yield</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% Result = [1, 2, 3]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_7-rpc-pmap-3" tabindex="-1"><a class="header-anchor" href="#_7-rpc-pmap-3"><span>7. <strong><code>rpc:pmap/3</code></strong></span></a></h3><ul><li><strong>功能</strong>：在多个节点上并行执行函数，并收集结果（类似于 <code>lists:map/2</code> 的分布式版本）。</li><li><strong>参数</strong>： <ul><li><code>Nodes</code>：节点列表（原子列表）。</li><li><code>Fun</code>：函数（匿名函数或函数引用）。</li><li><code>ArgsList</code>：参数列表的列表。</li></ul></li><li><strong>返回值</strong>：结果列表。</li></ul><h4 id="示例-6" tabindex="-1"><a class="header-anchor" href="#示例-6"><span>示例</span></a></h4><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% 在多个节点上并行计算 lists:sort/1</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Nodes</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">node1@host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">node2@host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">node3@host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Results</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> rpc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pmap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Nodes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fun</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> lists</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sort</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">9</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 7</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]])</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% Results = [[1, 2, 3], [4, 5], [7, 8, 9]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_8-rpc-eval-everywhere-3" tabindex="-1"><a class="header-anchor" href="#_8-rpc-eval-everywhere-3"><span>8. <strong><code>rpc:eval_everywhere/3</code></strong></span></a></h3><ul><li><strong>功能</strong>：在多个节点上执行相同的函数。</li><li><strong>参数</strong>： <ul><li><code>Nodes</code>：节点列表（原子列表）。</li><li><code>Module</code>：模块名称（原子）。</li><li><code>Function</code>：函数名称（原子）。</li></ul></li><li><strong>返回值</strong>：<code>ok</code>。</li></ul><h4 id="示例-7" tabindex="-1"><a class="header-anchor" href="#示例-7"><span>示例</span></a></h4><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% 在多个节点上执行 io:format/2</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Nodes</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">node1@host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">node2@host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">node3@host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">rpc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">eval_everywhere</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Nodes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> format</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello, World!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">~</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="net-adm-模块" tabindex="-1"><a class="header-anchor" href="#net-adm-模块"><span><code>net_adm</code> 模块</span></a></h2><blockquote><p>Erlang 标准库中用于分布式节点管理的模块，提供了一系列节点发现、连接和管理的功能。</p></blockquote><table><thead><tr><th>函数</th><th>说明</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>net_adm:ping(Node) -&gt; pong | pang</code></td><td>尝试与指定节点建立连接</td><td><code>Node</code>：目标节点名称（原子），格式为 <code>name@host</code></td><td><code>pong</code>：连接成功 <br><code>pang</code>：连接失败</td></tr><tr><td><code>net_adm:names(Host) -&gt; {ok, [{Name, Port}]} | {error, Reason}</code></td><td>查询指定主机上通过 EPMD 注册的节点</td><td><code>Host</code>：主机名（字符串），可选参数</td><td><code>{ok, [{Name, Port}]}</code>：节点名称和端口列表 <code>{error, Reason}</code>：查询失败原因</td></tr><tr><td><code>net_adm:world_list([Option]) -&gt; [node()]</code></td><td>尝试发现网络中的所有 Erlang 节点,不能发现本地的节点</td><td><code>longnames</code>：使用长节点名格式<br> <code>shortnames</code>：使用短节点名格式 <code>timeout</code>：设置超时时间（毫秒）</td><td></td></tr><tr><td><code>net_adm:localhost() -&gt; Hostname</code></td><td>获取本地主机名（用于构建节点名）</td><td></td><td>字符串形式的本地主机名</td></tr><tr><td><code>net_adm:dns_hostname(Host) -&gt; {ok, Name} | {error, Reason}</code></td><td>查询主机的DNS名称</td><td><code>Host</code>：IP地址或主机名（字符串）</td><td></td></tr></tbody></table><h2 id="net-kernel模块" tabindex="-1"><a class="header-anchor" href="#net-kernel模块"><span>net_kernel模块</span></a></h2><blockquote><p>用于管理分布式节点连接的核心模块。它提供了节点间通信的基础功能，包括节点连接管理、网络监控和配置等。</p></blockquote><table><thead><tr><th>函数</th><th>作用</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>net_kernel:start([node_name@hostname]).</code></td><td>将非分布式节点转换为分布式节点</td><td></td><td></td></tr><tr><td><code>net_kernel:stop().</code></td><td>停止分布并返回到正常的节点</td><td></td><td></td></tr><tr><td><code>net_kernel:connect_node(&#39;node@host&#39;).</code></td><td>连接到另一个Erlang节点</td><td></td><td></td></tr><tr><td><code>net_kernel:disconnect(Node).</code></td><td>断开与指定节点的连接</td><td></td><td></td></tr><tr><td><code>net_kernel:monitor_nodes(Boolean，Options).</code></td><td>开始或停止监视节点状态变化</td><td><code>Boolean</code>:控制是否开启监视<br><code>Option</code>:设置节点状态变化的通知</td><td></td></tr><tr><td><code>net_kernel:allow(Nodes).</code></td><td>设置允许连接的主机列表</td><td></td><td></td></tr><tr><td><code>net_kernel:hidden_connect_node(Node).</code></td><td>设置隐藏节点（不会出现在nodes()列表中）</td><td></td><td></td></tr><tr><td><code>net_kernel:longnames().</code></td><td>检查是否使用长节点名</td><td></td><td></td></tr><tr><td><code>net_kernel:set_net_ticktime(S)</code></td><td>更改节点的滴答时间以避免断开连接（其中 S 是秒数，因为它是滴答时间，它必须是心跳延迟的 4 倍！）</td><td></td><td></td></tr></tbody></table><h2 id="global模块" tabindex="-1"><a class="header-anchor" href="#global模块"><span>global模块</span></a></h2><blockquote><p><code>global</code> 模块是 Erlang 中用于分布式系统中全局注册和查找进程的一种机制，它允许不同节点上的进程能够通过一个全局的名字来进行通信。</p><p>global 模块是一个新的替代进程注册表。它会自动将数据传播到所有连接的节点，在这些节点中复制数据，处理节点故障，并在节点重新上线后支持不同的冲突解决策略。</p></blockquote><table><thead><tr><th>函数</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>global:register_name(Name, Pid)</code></td><td>注册一个全局名称</td><td></td></tr><tr><td><code>global:unregister_name(Name)</code></td><td>注销一个已经注册的全局名称</td><td></td></tr><tr><td><code>global:whereis_name(Name)</code></td><td>根据全局名称查找对应的进程 ID</td><td></td></tr><tr><td><code>global:send(Name, Message)</code></td><td>向通过全局名称注册的进程发送消息</td><td></td></tr><tr><td><code>global:random_exit_name/3</code></td><td>随机杀死一个进程。这是默认选项。</td><td></td></tr><tr><td><code>global:random_notify_name/3</code></td><td>将随机选择两个进程中的一个作为幸存者，它会将 <code>{global_name_conflict, Name}</code> 发送给失败的进程。</td><td></td></tr><tr><td><code>global:notify_all_name/</code></td><td>注销两个 pid，并将消息 <code>{global_name_conflict, Name, OtherPid}</code> 发送给这两个进程，让它们自己解决问题，以便再次重新注册。</td><td></td></tr></tbody></table><div class="hint-container warning"><p class="hint-container-title">注意</p><p>两个节点连接在一起并且它们都具有两个共享相同名称的不同进程时，会发生命名冲突。在这些情况下，global 会默认随机杀死其中一个</p></div><p>当两个节点连接在一起并且它们都具有两个共享相同名称的不同进程时，会发生命名冲突。在这些情况下，global 会默认随机杀死其中一个。有一些方法可以覆盖这种行为。每当你注册或重新注册一个名称时，向函数传递第三个参数</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Resolve</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_Name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Pid1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Pid2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">     case</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> process_info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Pid1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> message_queue_len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> process_info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Pid2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> message_queue_len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> of</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">         true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pid1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">         false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pid2</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">     end</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> end</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Fun</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">erl_eval</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">18</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">59269574</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">6</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> global</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">register_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">zombie</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 12</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Resolve 函数将选择邮箱中消息最多的进程作为要保留的进程（它也是函数返回的进程的 pid）。或者，你可以联系这两个进程并询问谁的订阅者最多，或者只保留第一个回复的进程，等等。如果 Resolve 函数崩溃或返回的不是 pid，则进程名称将被注销。为了方便起见，global 模块已经为你定义了三个函数</p><ol><li><code>fun global:random_exit_name/3</code> 将随机杀死一个进程。这是默认选项。</li><li><code>fun global:random_notify_name/3</code> 将随机选择两个进程中的一个作为幸存者，它会将 <code>{global_name_conflict, Name}</code> 发送给失败的进程。</li><li><code>fun global:notify_all_name/3</code> 它会注销两个 pid，并将消息 <code>{global_name_conflict, Name, OtherPid}</code> 发送给这两个进程，让它们自己解决问题，以便再次重新注册。</li></ol><h2 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法"><span>常用方法</span></a></h2><table><thead><tr><th>函数</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>spawn(Node,Mod,Func,ArgList)</code></td><td>它的工作方式和<code>spawn(Mod, Func, ArgList)</code>完全一致，只是新进程是在Node上分裂的</td><td></td></tr><tr><td><code>node()</code></td><td>返回本地节点的名称，如果节点不是分布式的则会返回<code>nonode@nohost。</code></td><td></td></tr><tr><td><code>node(Arg)</code></td><td>它会返回Arg所在的节点。Arg可以是PID、引用或者端口。如果本地节点不是分布式的则会返回<code>nonode@nohost。</code></td><td></td></tr><tr><td><code>nodes()</code></td><td>它会返回一个列表，内含网络里其他所有与我们相连的节点。</td><td></td></tr><tr><td><code>is_alive()</code></td><td>如果本地节点是活动的，并且可以成为分布式系统的一部分，就返回true，否则返回false。</td><td></td></tr><tr><td><code>set_cookie(OtherNode, Cookie)</code></td><td>仅在连接到该其他节点时使用该 cookie</td><td></td></tr><tr><td><code>set_cookie(node(), Cookie)</code></td><td>更改节点的当前 cookie 以用于所有将来的连接</td><td></td></tr><tr><td><code>get_cookie()</code></td><td>获取当前cookie</td><td></td></tr></tbody></table><h3 id="消息发送" tabindex="-1"><a class="header-anchor" href="#消息发送"><span>消息发送</span></a></h3><blockquote><p>向注册了某个全局名称（<code>RegName</code>）的进程发送消息</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">RegName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Msg</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><strong><code>RegName</code></strong>：这是一个已经通过 <code>global</code> 模块注册的全局名称。通过该名称，可以在整个分布式 Erlang 系统中唯一地识别一个进程。</p></li><li><p><strong><code>Node</code></strong>：这是目标进程所在的 Erlang 节点的名称，通常形式为 <code>&#39;node_name@host&#39;</code>。指定这个节点后，消息将发送到这个特定节点上运行的注册进程。</p></li><li><p><strong><code>!</code></strong>：这是 Erlang 中的消息发送操作符，用于将消息发送到进程。它的右边是消息内容，左边是目标进程的进程 ID（<code>Pid</code>）或者全局名称。</p></li><li><p><strong><code>Msg</code></strong>：这是你要发送的消息内容。它可以是任何 Erlang 语言中的数据结构，如元组、列表、整数、字符串等。</p></li></ul><h2 id="远程shell" tabindex="-1"><a class="header-anchor" href="#远程shell"><span>远程shell</span></a></h2><p>我们在 Erlang 中学习的第一件事是如何使用 <code>^G</code> (<code>CTRL + G</code>) 中断正在运行的代码。在那里，我们看到了一个用于分布式 shell 的菜单</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">salad@ferdmbp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">User</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> switch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> command</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">--&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> h</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">nn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">      -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> connect</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> to</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> job</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">nn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">      -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> interrupt</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> job</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">k</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">nn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">      -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> kill</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> job</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">j</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">         -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> list</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> all</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> jobs</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">shell</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">     -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> start</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> local</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> shell</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">shell</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> start</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> remote</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> shell</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">q</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> quit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> erlang</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">? | </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">h</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">       -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> message</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>r [node [shell]]</code> 选项是我们正在寻找的选项。我们可以通过以下步骤在 mustard 节点上启动一个作业</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">--&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> r</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> mustard@ferdmbp</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">--&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> j</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">shell</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,[</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]}</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">mustard@ferdmbp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">shell</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,[]}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">--&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> c</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Eshell</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> V5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">abort</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> with</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ^</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">G</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">mustard@ferdmbp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">mustard@ferdmbp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就是这样。你现在可以使用远程 shell，就像使用本地 shell 一样。与旧版本的 Erlang 相比，有一些不同之处，例如自动完成功能不再起作用。无论何时你需要更改使用 <code>-noshell</code> 选项运行的节点上的内容，这种方法仍然非常有用。如果 <code>-noshell</code> 节点有名称，那么你可以连接到它来执行与管理相关的操作，例如重新加载模块、调试一些代码等等。</p><p>通过再次使用 <code>^G</code>，你可以返回到你的原始节点。但是，在停止会话时要小心。如果你调用 <code>q()</code> 或 <code>init:stop()</code>，你将终止远程节点！</p><h2 id="cookie保护系统" tabindex="-1"><a class="header-anchor" href="#cookie保护系统"><span>cookie保护系统</span></a></h2><blockquote><p>cookie系统让访问单个或一组节点变得更安全。每个节点都有一个cookie，如果它想与其他任何节点通信，它的cookie就必须和对方节点的cookie相同。</p></blockquote><h3 id="设置cookie的三种方式" tabindex="-1"><a class="header-anchor" href="#设置cookie的三种方式"><span>设置cookie的三种方式</span></a></h3><blockquote><p><code>cookie</code>保护系统被设计用来创建运行在局域网（LAN）上的分布式系统，LAN本身应该受防火墙保护，与互联网隔开。跨互联网运行的分布式Erlang应用程序应该先在主机之间建立安全连接，然后再使用<code>cookie</code>保护系统。</p></blockquote><h4 id="方式一" tabindex="-1"><a class="header-anchor" href="#方式一"><span>方式一</span></a></h4><blockquote><p>在文件<code>$HOME/.erlang.cookie</code>里存放相同的<code>cookie</code>。这个文件包含一个随机字符串，是Erlang第一次在你的机器上运行时自动创建的。</p><p>这个文件可以被复制到所有想要参与分布式Erlang会话的机器上。也可以显式设置它的值</p></blockquote><h4 id="方式二" tabindex="-1"><a class="header-anchor" href="#方式二"><span>方式二</span></a></h4><blockquote><p>当<code>Erlang Shell</code>启动时，可以用命令行参数<code>-setcookie C</code>来把cookie设成C。</p></blockquote><h4 id="方式三" tabindex="-1"><a class="header-anchor" href="#方式三"><span>方式三</span></a></h4><blockquote><p>内置函数<code>erlang:set_cookie(node(), C)</code>能把本地节点的<code>cookie</code>设成原子<code>C</code>。</p></blockquote><h2 id="隐藏节点" tabindex="-1"><a class="header-anchor" href="#隐藏节点"><span>隐藏节点</span></a></h2><p>如果你有一个相当大的集群，并且想要连接到单个节点以更改一些内容，这可能会很烦人。你不希望你的管理节点突然被集成到集群中，并且让其他节点认为它们有一个新的同事可以发送任务。为此，你可以使用很少使用的 <code>erlang:send(Dest, Message, [noconnect])</code> 函数，该函数会在不创建连接的情况下发送消息，但这很容易出错。</p><p>相反，你想要做的是使用 <code>-hidden</code> 标志设置一个节点。假设你仍然运行着 mustard 和 salad 节点。我们将启动第三个节点 <code>olives</code>，它将仅连接到 <code>mustard</code>（确保 cookie 相同！)</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> erl</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">sname</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> olives</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">hidden</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">olives@ferdmbp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> net_kernel</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">connect_node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">mustard@ferdmbp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">olives@ferdmbp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> nodes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">olives@ferdmbp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> nodes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">hidden</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">mustard@ferdmbp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>啊哈！该节点没有连接到 salad，并且乍一看，它也没有连接到 mustard。但是，调用 <code>node(hidden)</code> 显示我们确实在那里有一个连接！让我们看看 mustard 节点看到了什么</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">mustard@ferdmbp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> nodes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">salad@ferdmbp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">mustard@ferdmbp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> nodes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">hidden</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">olives@ferdmbp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">mustard@ferdmbp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> nodes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">connected</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">salad@ferdmbp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">olives@ferdmbp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似的视图，但现在我们添加了 <code>nodes(connected)</code> BIF，它显示所有连接，无论它们的类型如何。salad 节点永远不会看到与 olives 的任何连接，除非特别指示它在那里连接。<code>nodes/1</code> 的最后一个有趣的用法是使用 <code>nodes(known)</code>，它将显示当前节点曾经连接到的所有节点。</p><p>使用远程 shell、cookie 和隐藏节点，管理分布式 Erlang 系统变得更加简单。</p><h2 id="设置erlang集群" tabindex="-1"><a class="header-anchor" href="#设置erlang集群"><span>设置erlang集群</span></a></h2><p>Erlang 为每个节点命名，以便能够找到并联系它们。名称格式为 <code>Name@Host</code>，其中主机基于可用的 DNS 条目，这些条目可以通过网络或您计算机的主机文件获得。所有名称都需要是唯一的，</p><p>名称有两种类型：短名称和长名称。</p><ul><li>长名称基于完全限定的域名 (<code>aaa.bbb.ccc</code>)，并且许多 DNS 解析器认为域名如果包含一个句点 (<code>.</code>)，则为完全限定的。</li><li>短名称将基于没有句点的主机名，并通过您的主机文件或任何可能的 DNS 条目进行解析。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>一般来说，使用短名称在同一台计算机上设置多个 Erlang 节点比使用长名称更容易</p><p>由于名称需要是唯一的，因此使用短名称的节点无法与使用长名称的节点通信</p></div><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">kvs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">author</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">舒永好</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">compile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">export_all</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%%=====================EXPORT FUNCTION==================================</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%%----------------------------------</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%% 服务器：启动服务器kvs</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%%----------------------------------</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> register</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">kvs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">spawn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">?</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MODULE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">loop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,[])).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%%----------------------------------</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%% 本机：向kvs存储kv数据 </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%%----------------------------------</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">store</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rpc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">store</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%%----------------------------------</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%% 本机：查询kvs服务器上的数据 </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%%----------------------------------</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">lookup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rpc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">lookup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%%=====================LOCAL FUNCTION==================================</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%%----------------------------------</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%% 本机：处理本机的消息发送和接收消息</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%%----------------------------------</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rpc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Req</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  kvs</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Req</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  receive</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">kvs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Reply</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Reply</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%%----------------------------------</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%% 服务器：处理KVS服务器的消息发送和接收消息</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%%----------------------------------</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">loop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  receive</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">From</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">store</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}-&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      put</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      From</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">kvs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      loop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">From</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">lookup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}-&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      From</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">kvs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)},</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      loop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="本地创建c-s" tabindex="-1"><a class="header-anchor" href="#本地创建c-s"><span>本地创建<code>C/S</code></span></a></h3><ul><li>启动终端窗口</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>erl</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="本地创建erlang集群" tabindex="-1"><a class="header-anchor" href="#本地创建erlang集群"><span>本地创建Erlang集群</span></a></h3><blockquote><p>在同一台机器上运行两个节点时，因为它们都能访问同一个<code>cookie</code>文 件<code>$HOME/.erlang.cookie</code>，所以我们不需要在<code>Erlang</code>命令行里添加<code>cookie</code>。</p></blockquote><ul><li>启动一个节点（客户端）</li></ul><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">erl</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">sname</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> client@localhost</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">erl</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">sname</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> client</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>启动一个节点（服务器）</li></ul><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">erl</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">sname</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> server@localhost</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">erl</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">sname</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> server</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将两个节点连接起来</li></ul><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%% 以在客户端执行为例 </span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">net_kernel</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">connect_node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">server</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>节点启动后不会自动发现其他节点，每个节点独立运行，直到显式建立连接（发送任何一条消息都可建立连接）</p></div><h3 id="同一局域网的不同机器上创建c-s" tabindex="-1"><a class="header-anchor" href="#同一局域网的不同机器上创建c-s"><span>同一局域网的不同机器上创建<code>C/S</code></span></a></h3><blockquote><p>当两台机器位于同一个子网时我们也可以使用<code>-sname</code>。换言之，只有在不需要DNS服务的情况下，才能使用<code>-sname</code>。</p><ul><li>确保两个节点拥有相同的<code>cookie</code>。这正是启动两个节点时都使用命令行参数<code>-setcookie abc</code>的原因</li><li>确保相关节点的完全限定主机名（fully qualified hostname）可以被DNS解析。</li><li>确保两个系统拥有相同版本的代码和相同版本的Erlang</li></ul></blockquote><ul><li>启动一个节点（客户端）</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>erl -name client -setcookie abc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>启动一个节点（服务器）</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>erl -name server -setcookie abc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>长命名和命名之间不可以互通</p><p>两个节点之间如果需要相互发送消息，需要保证节点可以被DNS解析</p></div><h3 id="跨互联网的同机器上创建c-s" tabindex="-1"><a class="header-anchor" href="#跨互联网的同机器上创建c-s"><span>跨互联网的同机器上创建C/S</span></a></h3>`,183)]))}const d=i(e,[["render",h]]),p=JSON.parse('{"path":"/backend/erlang/wcqqt688/","title":"分布式Erlang","lang":"zh-CN","frontmatter":{"title":"分布式Erlang","createTime":"2025/03/22 15:08:15","permalink":"/backend/erlang/wcqqt688/"},"headers":[],"readingTime":{"minutes":33.56,"words":10069},"git":{"updatedTime":1758260391000,"contributors":[{"name":"舒永好","username":"舒永好","email":"shuyonghao@guoshenghuaxing.com","commits":1,"avatar":"https://gravatar.com/avatar/4b1c3f37ea707968be73c631a79de33afd360724ce87bf8f9dcacd67d14df92c?d=retro"},{"name":"syh","username":"syh","email":"syh@qq.com","commits":3,"avatar":"https://gravatar.com/avatar/060d67e779a1b0aeace68a2a010b367f852e56888393383ea27302df983f6814?d=retro"}]},"filePathRelative":"notes/backend/erlang/erlang_otp/distributed_programming/distrubuted_erlang.md"}');export{d as comp,p as data};
