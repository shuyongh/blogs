import{_ as i,c as a,a as n,o as h}from"./app-C7T5jqfQ.js";const l={};function e(k,s){return h(),a("div",null,s[0]||(s[0]=[n(`<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><h3 id="什么是进程" tabindex="-1"><a class="header-anchor" href="#什么是进程"><span>什么是进程</span></a></h3><blockquote><p>Erlang 中的并发粒度是一个过程。流程是与其他流程同时运行并独立于其他流程的活动/任务。Erlang 中的这些过程与大多数人所熟悉的过程和线程不同。<span style="color:#00FFFF;">Erlang进程是轻量级的，与其他进程（内存）隔离运行，并且由Erlang的虚拟机(VM)调度。</span>进程的创建时间非常短，刚生成的进程的内存占用非常小，单个 Erlang VM 可以运行数百万个进程。</p></blockquote><h3 id="进程的分类" tabindex="-1"><a class="header-anchor" href="#进程的分类"><span>进程的分类</span></a></h3><blockquote><p>进程有两种：<strong>普通进程</strong> 和 <strong>系统进程</strong>。<span style="color:#00FF00;">spawn创建的是普通进程</span>。普通进程可以通过执行内置函数 <code>process_flag(trap_exit, true)</code> 变成系统进程。</p></blockquote><h3 id="进程间的通信-信号" tabindex="-1"><a class="header-anchor" href="#进程间的通信-信号"><span>进程间的通信---信号</span></a></h3><blockquote><p>Erlang 进程和 Erlang 端口之间的所有通信都是通过发送和接收 <strong>异步信号</strong> 来完成的。最常见的信号是 Erlang 消息信号。可以使用 <code>发送运算符 !</code> 发送消息信号。接收进程可以使用 <code>receive</code> 表达式从消息队列中获取接收到的消息。</p><ul><li><p>发送信号: 进程和端口使用许多信号进行通信。</p></li><li><p>接收信号：信号是 <strong>异步</strong> 和 <strong>自动接收</strong> 的。进程不需要执行任何操作来处理信号的接收，或者可以执行任何操作来阻止信号的接收。特别地，信号接收 <em>不</em> 与 <a href="https://erlang.org.cn/doc/system/expressions#receive" target="_blank" rel="noopener noreferrer"><code>receive</code></a> 表达式的执行相关联，而是可以在进程的执行流程中的任何位置发生。</p><p>当进程接收到信号时，会采取某种操作。采取的具体操作取决于信号类型、信号的内容和接收进程的状态。</p></li></ul></blockquote><h2 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法"><span>常用方法</span></a></h2><p>以下是 <strong>Erlang</strong> 中常用进程管理函数的详细说明，以 <strong>函数签名</strong> 的形式列出，示例中给出了返回值：</p><table><thead><tr><th><strong>函数签名</strong></th><th><strong>功能说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><code>spawn(Module, Name, Args)</code></td><td>创建进程，返回进行标识符</td><td><code>spawn(speed, regulator, [high_speed, thin_cut]).</code> 返回值：<code> &lt;0.13.1&gt;</code></td></tr><tr><td><code>register(Name, Pid)</code></td><td>在系统中注册一个进程，使其与指定名称关联。</td><td><code>register(my_process, self()).</code> <strong>返回值</strong>: <code>true</code>（注册成功）</td></tr><tr><td><code>registered()</code></td><td>返回当前节点中所有已注册进程的名称列表。</td><td><code>registered().</code> <strong>返回值</strong>: <code>[&quot;my_process&quot;, &quot;another_process&quot;]</code></td></tr><tr><td><code>whereis(Name)</code></td><td>查找指定名称的已注册进程并返回其进程 ID。</td><td><code>whereis(my_process).</code> <strong>返回值</strong>: <code>&lt;0.55.0&gt;</code>（进程的 Pid）</td></tr><tr><td><code>alias()</code></td><td>创建一个别名，该别名可在向创建该别名的进程发送消息时使用。当别名被禁用时，使用该别名发送的消息将被丢弃。</td><td></td></tr><tr><td><code>unalias(Alias)</code></td><td>停用调用进程先前创建的别名 <code>Alias</code>。</td><td></td></tr><tr><td><code>is_pid(Pid)</code></td><td>用于检查给定的 <code>Pid</code> 是否是有效的进程 ID。</td><td><code>is_pid(&lt;0.45.0&gt;).</code> <strong>返回值</strong>: <code>true</code>（如果是有效的进程 ID）</td></tr><tr><td><code>is_process_alive(Pid)</code></td><td>用于检查指定的进程是否仍然存活。</td><td><code>is_process_alive(self()).</code> <strong>返回值</strong>: <code>true</code>（如果进程存活）</td></tr><tr><td><code>pid_to_list(Pid)</code></td><td>将进程 ID 转换为一个列表形式。</td><td><code>pid_to_list(&lt;0.45.0&gt;).</code> <strong>返回值</strong>: <code>[0, 45, 0]</code></td></tr><tr><td><code>self()</code></td><td>返回当前进程的进程 ID。</td><td><code>self().</code> <strong>返回值</strong>: <code>&lt;0.55.0&gt;</code></td></tr><tr><td><code>unregister(Name)</code></td><td>注销已注册的进程，解除进程名称与进程 ID 的关联。</td><td><code>unregister(my_process).</code> <strong>返回值</strong>: <code>true</code>（注销成功）</td></tr><tr><td><code>flush/0</code></td><td>输出当前进程接收到的消息</td><td></td></tr></tbody></table><h3 id="exit-1" tabindex="-1"><a class="header-anchor" href="#exit-1"><span>exit/1</span></a></h3><blockquote><p>抛出一个类为 <code>exit</code> 的异常，带有退出原因 <code>Reason</code>。</p><p>由于评估此函数会引发异常，因此它没有返回值。</p><p>异常类 <code>exit</code> 的意图是当前进程应该停止（例如，当收到一条告诉进程停止的消息时）。</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">spec</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Reason</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> no_return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Reason</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>示例</strong></p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">foobar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">**</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> exception</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> exit</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">foobar</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">foobar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">EXIT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">foobar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>如果一个进程调用了 <a href="https://www.erlang.org/doc/apps/erts/erlang.html#exit/1" target="_blank" rel="noopener noreferrer"><code>exit(kill)</code></a> 并且没有捕获异常，它将以退出原因 <code>kill</code> 终止，并且还会向所有链接的进程发出带有退出原因 <code>kill</code>（而不是 <code>killed</code>）的退出信号。链接的进程可以捕获带有退出原因 <code>kill</code> 的退出信号。请注意，这意味着发送这样的信号时，信号的行为会有所不同，因为如果一个进程使用 <a href="https://www.erlang.org/doc/apps/erts/erlang.html#exit/2" target="_blank" rel="noopener noreferrer"><code>erlang:exit/2</code></a> 向另一个进程发送这样的信号，该信号将不可捕获。</p></div><h3 id="exit-2" tabindex="-1"><a class="header-anchor" href="#exit-2"><span>exit/2</span></a></h3><blockquote><p>向由 <code>Pid</code> 指定的进程或端口发送退出信号，并附带退出原因 <code>Reason</code>。</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">spec</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Reason</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pid</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">port</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Reason</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果 <code>Reason</code> 是任何术语，除了 <code>normal</code> 或 <code>kill</code>，并且 <code>P</code> 是由 <code>Pid</code> 指定的进程或端口，则以下行为适用：</p><ul><li>如果 <code>P</code> 不是 <a href="https://www.erlang.org/doc/apps/erts/erlang.html#process_flag/2" target="_blank" rel="noopener noreferrer">捕获退出信号 </a>，则 <code>P</code> 以退出原因 原因。</li><li>如果 <code>P</code> 正在 <a href="https://www.erlang.org/doc/apps/erts/erlang.html#process_flag/2" target="_blank" rel="noopener noreferrer">捕获退出信号 </a>，那么退出信号将被转换为一个消息 <code>{&#39;EXIT&#39;, From, 原因}</code>，其中 <code>From</code> 是发送退出信号的进程的标识符，并被传递给进程 <code>P</code> 的消息队列。</li></ul><p>如果 <code>Reason </code>是术语 <code>normal</code>，并且 <code>Pid</code> 是一个进程 <code>P</code> 的标识符，而该进程不是调用 <code>erlang:exit(Pid, normal)</code> 的进程（当一个进程发送带有 <code>normal</code>的原因被描述在警告中):</p><ul><li>如果 <code>P</code> 正在 <a href="https://www.erlang.org/doc/apps/erts/erlang.html#process_flag/2" target="_blank" rel="noopener noreferrer">捕获退出信号 </a>，那么退出信号将被转换为一个消息 <code>{&#39;EXIT&#39;, From, normal}</code>，其中 <code>From</code> 是发送退出信号的进程的标识符，并被传递给 <code>P</code> 的消息队列。</li><li>如果 <code>P</code> 不捕获退出信号，则该信号不会产生任何效果。</li></ul><p>如果 <code>Reason</code> 是原子 <code>kill</code>，也就是说，如果 <a href="https://www.erlang.org/doc/apps/erts/erlang.html#exit/2" target="_blank" rel="noopener noreferrer"><code>exit(Pid, kill)</code></a> 是 调用后，将向由指定的进程发送一个无法捕获的退出信号 Pid，无条件退出，退出原因是 killed。将退出原因从 kill 改为 killed，以提示链接进程，表明被杀进程是通过调用 exit(Pid, kill) 被杀死的。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>函数 <code>erlang:exit/1</code> 和 <code>erlang:exit/2</code> 是 名称类似，但提供非常不同的功能。 <a href="https://www.erlang.org/doc/apps/erts/erlang.html#exit/1" target="_blank" rel="noopener noreferrer"><code>erlang:exit/1</code></a> 函数应该在当前进程需要停止时使用，而 <a href="https://www.erlang.org/doc/apps/erts/erlang.html#exit/2" target="_blank" rel="noopener noreferrer"><code>erlang:exit/2</code></a> 应该在需要向另一个进程发送退出信号时使用。另外，<a href="https://www.erlang.org/doc/apps/erts/erlang.html#exit/1" target="_blank" rel="noopener noreferrer"><code>erlang:exit/1</code></a> 会引发一个可以被捕获的异常，而 <a href="https://www.erlang.org/doc/apps/erts/erlang.html#exit/2" target="_blank" rel="noopener noreferrer"><code>erlang:exit/2</code></a> 不会引发任何异常。</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>以上描述中没有涵盖的唯一场景是进程 <code>P</code> 向自身发送带有原因 <code>normal</code> 的退出信号，即 <code>erlang:exit(self(), normal)</code>。在这种场景下的行为如下：</p><ul><li>如果 <code>P</code> <a href="https://www.erlang.org/doc/apps/erts/erlang.html#process_flag/2" target="_blank" rel="noopener noreferrer">捕获退出信号 </a>，那么退出信号会转换为消息 <code>{&#39;EXIT&#39;, From, normal}</code>，其中 <code>From</code> 是 <code>P</code> 的进程标识符，并被传递给 <code>P</code> 的消息队列。</li><li><code>P</code> 以 <code>normal</code> 为原因退出，如果 <code>P</code> 不捕获退出。</li></ul><p>请注意，上述行为与一个进程向另一个进程发送带有 <code>normal</code> 原因的退出信号的行为不同。这可能有些奇怪，但出于向后兼容的原因，这种行为被保留了下来。</p></div><h3 id="process-flag-2" tabindex="-1"><a class="header-anchor" href="#process-flag-2"><span>process_flag/2</span></a></h3><blockquote><p>设置指定标志的进程标志。返回标志的先前值。</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">spec</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> process_flag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">async_dist</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Boolean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> OldBoolean</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Boolean</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> boolean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OldBoolean</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> boolean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">trap_exit</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Boolean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> OldBoolean</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Boolean</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> boolean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OldBoolean</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> boolean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">error_handler</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> OldModule</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Module</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> atom</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OldModule</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> atom</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">fullsweep_after</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">FullsweepAfter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> OldFullsweepAfter</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                      when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> FullsweepAfter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> non_neg_integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OldFullsweepAfter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> non_neg_integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">min_heap_size</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">MinHeapSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> OldMinHeapSize</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                      when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MinHeapSize</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> non_neg_integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OldMinHeapSize</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> non_neg_integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">min_bin_vheap_size</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">MinBinVHeapSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> OldMinBinVHeapSize</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                      when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MinBinVHeapSize</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> non_neg_integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OldMinBinVHeapSize</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> non_neg_integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">max_heap_size</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">MaxHeapSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> OldMaxHeapSize</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                      when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MaxHeapSize</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> max_heap_size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OldMaxHeapSize</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> max_heap_size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">message_queue_data</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">MQD</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> OldMQD</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                      when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MQD</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> message_queue_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OldMQD</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> message_queue_data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">priority</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Level</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> OldLevel</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                      when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Level</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> priority_level</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OldLevel</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> priority_level</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">save_calls</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">N</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> OldN</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> N</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10000</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OldN</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">..</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10000</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">sensitive</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Boolean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> OldBoolean</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Boolean</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> boolean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OldBoolean</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> boolean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  ({</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">monitor_nodes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">monitor_nodes</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="trap-exit" tabindex="-1"><a class="header-anchor" href="#trap-exit"><span>trap_exit</span></a></h4><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">process_flag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">trap_exit</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">boolean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当 <code>trap_exit</code> 设置为 <code>true</code> 时，到达进程的退出信号会被转换为 <code>{&#39;EXIT&#39;, From, Reason}</code> 消息，这些消息可以作为普通消息接收。如果 <code>trap_exit</code> 设置为 <code>false</code>，进程将接收到除 <code>normal</code> 以外的退出信号并退出，该退出信号将传递给其关联进程。通常应用程序进程不应捕获退出。</p><h2 id="进程创建" tabindex="-1"><a class="header-anchor" href="#进程创建"><span>进程创建</span></a></h2><h3 id="spawn" tabindex="-1"><a class="header-anchor" href="#spawn"><span>spawn</span></a></h3><blockquote><p>创建一个新的<span style="color:#00FF00;">普通进程</span>并开始执行某个模块中的某个函数。</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">spec</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> spawn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">               when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Module</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Function</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> atom</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Args</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()].</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>参数</strong></p><ul><li><p><strong>Module</strong> (<code>Module :: module()</code>):</p><ul><li><code>Module</code> 应该是一个合法的 Erlang 模块（例如 <code>foo</code>, <code>bar</code>, <code>math</code> 等），表示创建的进程所在模块</li></ul></li><li><p><strong>Function</strong> (<code>Function :: atom()</code>):</p><ul><li>这个参数指定<span style="color:#FF8000;">Module中的函数名</span>。函数名是一个原子（atom），即一个不带参数的标识符。</li></ul></li><li><p><strong>Args</strong> (<code>Args :: [term()]</code>):</p></li><li><p>这个参数是一个列表，将传递给<code>Module</code>中的<code>Function</code>，<code>term()</code> 是 Erlang 中的通用类型，表示可以是任何有效的 Erlang 数据类型，如整数、字符串、元组、列表等。</p></li><li><p>传递给目标函数的参数列表可以为空，也可以包含任意数量的参数。</p></li></ul><p><strong>返回值</strong></p><ul><li><strong><code>pid()</code></strong>: <ul><li><code>spawn/3</code> 返回一个新创建进程的 <strong>PID</strong>（进程标识符）。这个 PID 可以用来与新创建的进程进行通信，或者在后续操作中进行进程管理。</li></ul></li></ul><h3 id="erlang如何调度进程" tabindex="-1"><a class="header-anchor" href="#erlang如何调度进程"><span>Erlang如何调度进程</span></a></h3><p>我们将快速启动 10 个进程，并在函数 <code>timer:sleep/1</code> 的帮助下，暂停每个进程一段时间。该函数接受一个整数 N，并在恢复代码之前等待 N 毫秒。延迟后，进程中存在的值会被输出。</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> G</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> timer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">format</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">~</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">~</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> end</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Fun</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">erl_eval</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">13229925</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">spawn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> G</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> X</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> lists</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">seq</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">273</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">274</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">275</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">276</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">277</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">278</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">279</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">280</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">281</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">282</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">8</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">7</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">6</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于进程同时运行，因此事件的顺序不再有保障。这是因为 Erlang 虚拟机使用许多技巧来决定何时运行一个进程或另一个进程，从而确保每个进程都能获得足够的运行时间。许多 Erlang 服务都是作为进程实现的，包括你正在使用的 shell。你的进程必须与系统本身所需的进程保持平衡，这可能是造成奇怪顺序的原因。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>**注意：**无论是否启用对称多处理，结果都类似。为了证明这一点，你可以通过使用 <code>$ erl -smp disable</code> 启动 Erlang 虚拟机来测试它。</p><p>要查看你的 Erlang 虚拟机最初是在启用还是禁用 SMP 支持的情况下运行的，请启动一个没有选项的新虚拟机，并查看输出的第一行。如果你能看到文本 [smp:2:2] [rq:2]，这意味着你正在启用 SMP 支持的情况下运行，并且你在两个核心上运行着两个运行队列 (rq，或调度器)。如果你只看到 [rq:1]，这意味着你正在禁用 SMP 支持的情况下运行。</p><p>如果你想知道，[smp:2:2] 表示有两个核心可用，并且有两个调度器。 [rq:2] 表示有两个运行队列处于活动状态。在早期版本的 Erlang 中，你可以拥有多个调度器，但只有一个共享运行队列。从 R13B 开始，默认情况下每个调度器都拥有一个运行队列；这可以实现更好的并行性。</p></div><h2 id="进行通信" tabindex="-1"><a class="header-anchor" href="#进行通信"><span>进行通信</span></a></h2><h3 id="发送运算符" tabindex="-1"><a class="header-anchor" href="#发送运算符"><span>发送运算符</span></a></h3><blockquote><p>将 <code>Expr2</code> 的值作为消息发送到 <code>Expr1</code> 表示 的进程。</p><p>进程的邮箱会按接收顺序保存消息。每次读取消息时，都会将其从邮箱中取出。</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%% 向一个进程发送消息</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PID</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Expr</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%% 向多个进程发送同一条消息</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PID1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PID2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PIDN</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Expr</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>参数</strong></p><ul><li><strong><code>PID</code></strong>： <ul><li>这是一个进程标识符（PID），表示目标进程。<code>Expr1</code> 可以是一个进程的 PID，或者是一个已经注册的进程的名字（如果进程通过 <code>register/2</code> 注册了名字）。</li></ul></li><li><strong><code>Expr</code></strong>： <ul><li>这是要发送的消息。<code>Expr</code> 可以是任何合法的 Erlang 表达式，通常是元组、字符串、列表、数字等数据结构。消息会被发送到 <code>PID</code> 所表示的进程。</li></ul></li></ul><p><strong>返回值</strong></p><p>返回 Expr2</p><p><strong>注意</strong></p><ul><li>如果 <code>Expr1</code> 计算为名称，但此名称未注册，则会发生 <code>badarg</code> 运行时错误。</li><li>向引用发送消息永远不会失败，即使该引用不再是（或从未是）别名也是如此。</li><li>向 pid 发送消息永远不会失败，即使该 pid 标识的是不存在的进程也是如此。</li><li>分布式消息发送，即如果 <code>Expr1</code> 计算为元组 <code>{Name,Node}</code>（或位于另一个节点上的 pid），也永远不会失败。</li></ul><h3 id="send-2" tabindex="-1"><a class="header-anchor" href="#send-2"><span><code>send/2</code></span></a></h3><blockquote><p>发送消息并返回 <code>Msg</code></p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">spec</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> send</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Dest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Msg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Msg</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Dest</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> send_destination</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Msg</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>参数</strong></p><ul><li><p><strong><code>Dest</code></strong></p><ul><li>表示消息的目标，可以是一个有效的进程标识符（PID），或者是一个已经注册的进程名（注册名）。</li></ul></li><li><p><strong><code>Msg</code></strong></p><ul><li>是发送的消息内容，类型为 <code>term()</code>，表示它可以是任何 Erlang 数据类型，包括原子、数字、元组、列表、字符串等。</li></ul></li></ul><p><strong>返回值</strong></p><p><code>send/2</code> 函数的返回值是消息 <code>Msg</code>，这意味着发送完消息后，函数返回消息本身。</p><h3 id="receive" tabindex="-1"><a class="header-anchor" href="#receive"><span>receive</span></a></h3><blockquote><p>提取 <strong>进程消息队列中存在的已接收消息</strong>。</p><p>消息队列中的第一条消息会从上到下依次与模式进行匹配。</p><ul><li>如果未找到匹配项，则对队列中的第二条消息重复匹配序列，依此类推。消息按照 <a href="https://erlang.org.cn/doc/system/ref_man_processes#message-queue-order" target="_blank" rel="noopener noreferrer">接收顺序</a> 排队。</li><li>如果匹配成功，即如果 <code>Pattern</code> 匹配并且可选的守卫序列 <code>GuardSeq</code> 为 true，则 <strong>该消息将从消息队列中删除</strong>，并计算对应的 <code>Body</code>。消息队列中的所有其他消息保持不变。</li></ul></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">receive</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    Pattern1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> GuardSeq1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        Body1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    PatternN</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> GuardSeqN</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        BodyN</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Body</code> 的返回值是 <code>receive</code> 表达式的返回值。</p><p><code>receive</code> 永远不会失败。执行会暂停，可能会无限期地暂停，直到收到一条与模式之一匹配且守卫序列为 true 的消息。<code>receive</code>通常进行递归调用，以确保可以不断的接收消息</p><p><strong>示例</strong></p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">wait_for_onhook</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    receive</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        onhook</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            disconnect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            idle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">connect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            B</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">busy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()},</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            wait_for_onhook</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="after" tabindex="-1"><a class="header-anchor" href="#after"><span>after</span></a></h4><blockquote><p><code>receive...after</code> 的工作方式与 <code>receive</code> 完全相同，只是如果在 <code>ExprT</code> 毫秒内没有收到匹配的消息，则会计算 <code>BodyT</code>。然后 <code>BodyT</code> 的返回值将成为 <code>receive...after</code> 表达式的返回值。<code>ExprT</code> 必须计算为整数或原子 <code>infinity</code>,</p><p>原子 <code>infinity</code> 将使进程无限期地等待匹配的消息。这与不使用超时相同。它对于在运行时计算的超时值非常有用。</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">receive</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    Pattern1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> GuardSeq1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        Body1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    PatternN</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> GuardSeqN</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        BodyN</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">after</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    ExprT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        BodyT</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例</strong></p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">wait_for_onhook</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    receive</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        onhook</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            disconnect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            idle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">connect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            B</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">busy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()},</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            wait_for_onhook</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    after</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">        60000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            disconnect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了在时间过长后放弃之外，这种计时器还有其他用途。一个非常简单的例子就是我们之前使用过的 <code>timer:sleep/1</code> 函数是如何工作的。以下是它的实现方式</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    receive</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    after</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> ok</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个特定情况下，由于没有模式，因此永远不会在 <code>receive</code> 结构的 <code>receive</code> 部分匹配到任何消息。相反，当延迟 T 过去后，<code>after</code> 部分的结构将被调用。</p><h2 id="进程注册" tabindex="-1"><a class="header-anchor" href="#进程注册"><span>进程注册</span></a></h2><blockquote><p>如果想<span style="color:#00FF00;">给一个进程发送消息，就需要知道它的PID，但是当进程创建时，只有父进程才知道它的PID</span>。系统里没有其他进程知道它的存在。这通常很不方便，因为你必须把 PID 发送给系统里所有想要和它通信的进程。另一方面，这也很安全。如果不透露某个进程的 PID，其他进程就无法以任何方式与其交互。 Erlang 有一种<span style="color:#00FF00;">公布进程标识符</span>的方法，它<span style="color:#00FF00;">让系统里的任何进程都能与该进程通信</span>。这样的进程被称为<span style="color:#00FFFF;">注册进程</span>（registered process）。管理注册进程的内置函数有四个。</p></blockquote><h3 id="register-2" tabindex="-1"><a class="header-anchor" href="#register-2"><span><code>register/2</code></span></a></h3><blockquote><p>将进程（<code>pid()</code>）或端口（<code>port()</code>）与一个注册名（<code>atom()</code>）绑定的函数。通过这个绑定，其他进程可以使用注册名来访问该进程或端口，而无需直接使用进程标识符（PID）或端口标识符。</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">spec</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> register</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">RegName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> PidOrPort</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> RegName</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> atom</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PidOrPort</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> port</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>参数</strong></p><ul><li><p><strong><code>RegName :: atom()</code></strong>：</p><ul><li>这是一个原子（atom），作为注册名。该注册名可以是<span style="color:#FF8000;">任何有效的原子值</span>。进程或端口将通过这个注册名进行访问。</li></ul></li><li><p><strong><code>PidOrPort :: port() | pid()</code></strong>：</p><ul><li>这是进程标识符（PID）或端口标识符（Port）。这个参数指定要注册的目标对象，可以是一个进程的 PID 或一个端口的标识符。</li></ul></li></ul><p><strong>返回值</strong></p><ul><li><code>register/2</code> 返回 <code>true</code> 表示注册成功。如果注册失败，通常会抛出一个错误</li></ul><p><strong>注意</strong></p><p>如果某个注册进程崩溃了，就会自动取消注册。</p><h3 id="unregister-1" tabindex="-1"><a class="header-anchor" href="#unregister-1"><span><code>unregister/1</code></span></a></h3><blockquote><p>取消一个进程的名称注册。该函数可以解除进程与某个名称的绑定，使得该名称不再指向此进程。</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">unregister</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Name</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> atom</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> ok</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Reason</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> term</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()}.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>参数</strong></p><ul><li><code>Name :: atom()</code>：参数 <code>Name</code> 是一个原子（<code>atom</code>），表示需要取消注册的进程的名称。</li></ul><p><strong>返回值</strong></p><ul><li><code>ok</code>：表示取消注册操作成功。</li><li><code>{error, Reason :: term()}</code>：如果取消注册失败，返回一个包含错误原因的元组。<code>Reason</code> 是一个任意类型的值，通常是一个原子值，如 <code>badarg</code> 或其他描述错误的标识符。</li></ul><h3 id="whereis-1" tabindex="-1"><a class="header-anchor" href="#whereis-1"><span><code>whereis/1</code></span></a></h3><blockquote><p>检查某个名称是否已被注册。</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">whereis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Name</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> atom</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">undefined</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>参数</strong></p><ul><li><code>Name :: atom()</code>：<code>Name</code> 是一个原子（atom），表示要查询的已注册进程的名称。进程在注册时通常使用 <code>register/2</code> 函数将进程与名称绑定。</li></ul><p><strong>返回值</strong></p><ul><li><code>pid()</code>：如果给定的名称已经注册了一个进程，<code>whereis/1</code> 将返回该进程的 PID（进程标识符）。这是一个 <code>pid</code> 类型的值。</li><li><code>undefined</code>：如果没有进程与给定的名称绑定，<code>whereis/1</code> 返回 <code>undefined</code>，表示该名称没有与任何进程关联。</li></ul><h3 id="registered-1" tabindex="-1"><a class="header-anchor" href="#registered-1"><span><code>registered/1</code></span></a></h3><blockquote><p>获取当前已注册进程的名称列表</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">registered</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">atom</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()].</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>registered/0</code> 返回一个包含所有当前已注册进程名称的列表。每个元素都是一个原子（<code>atom()</code>），表示一个已注册的进程名称。</p><ul><li><ul><li></li></ul></li></ul><h2 id="进程连接" tabindex="-1"><a class="header-anchor" href="#进程连接"><span>进程连接</span></a></h2><h3 id="link" tabindex="-1"><a class="header-anchor" href="#link"><span>link</span></a></h3><blockquote><p>用于创建两个进程之间链接的函数。当两个进程通过 <code>link/1</code> 连接时，如果其中一个进程异常终止，另一个进程也会收到一个信号并终止。这是 Erlang 的 &quot;链接&quot; 机制的一部分，用于进程间的故障检测。</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">spec</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PidOrPort</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> PidOrPort</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">port</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>参数说明</strong>：</p><ul><li><p><code>PidOrPort :: pid() | port()</code>：这是一个参数，可以是一个进程的进程标识符（PID）或一个端口标识符。此参数用于指定要与当前进程建立链接的目标进程或端口。</p><ul><li><p><code>pid()</code>：表示目标进程的标识符，是一个有效的进程 PID。</p></li><li><p><code>port()</code>：表示目标端口的标识符，是一个有效的端口（例如，用于通信的外部端口）。</p></li></ul></li></ul><p><strong>返回值说明</strong>：</p><ul><li><code>true</code>：函数执行成功时返回 <code>true</code>，表示链接已经建立。</li></ul><h2 id="进程监控" tabindex="-1"><a class="header-anchor" href="#进程监控"><span>进程监控</span></a></h2><h3 id="monitor-2" tabindex="-1"><a class="header-anchor" href="#monitor-2"><span>monitor/2</span></a></h3><blockquote><p>监视其他进程、端口或时钟服务的函数。通过监视，Erlang 进程可以接收关于目标进程、端口或时钟服务的状态变化通知</p></blockquote><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">spec</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> monitor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">process</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> monitor_process_identifier</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MonitorRef</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MonitorRef</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> reference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">port</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">monitor_port_identifier</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MonitorRef</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MonitorRef</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> reference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">time_offset</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">clock_service</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MonitorRef</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MonitorRef</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> reference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>参数说明</strong>：</p><ul><li><strong><code>monitor(process, monitor_process_identifier())</code></strong>: <ul><li><code>monitor_process_identifier()</code> 是一个有效的进程标识符（<code>pid()</code>），表示要监视的目标进程。</li><li>用于监视一个进程，返回一个监视引用（<code>MonitorRef</code>）。</li></ul></li><li><strong><code>monitor(port, monitor_port_identifier())</code></strong>: <ul><li><code>monitor_port_identifier()</code> 是一个有效的端口标识符（<code>port()</code>），表示要监视的目标端口。</li><li>用于监视一个端口，返回一个监视引用（<code>MonitorRef</code>）。</li></ul></li><li><strong><code>monitor(time_offset, clock_service)</code></strong>: <ul><li><code>clock_service</code> 是与时间或时钟服务相关的标识符。</li><li>用于监视与时钟服务相关的状态，返回一个监视引用（<code>MonitorRef</code>）。</li></ul></li><li><strong><code>MonitorRef :: reference()</code></strong>： <ul><li>返回一个监视引用（<code>MonitorRef</code>），该引用是一个唯一的参考值，用于标识当前监视操作。返回值是一个 Erlang 中的引用类型（<code>reference()</code>）。</li></ul></li></ul><p><strong>返回值说明</strong>：</p><ul><li><code>MonitorRef</code> 是一个 Erlang 引用（<code>reference()</code>），用于标识该监视操作。通过这个引用，进程可以进一步查询或管理监视操作。</li><li>如果监控的进程已经死亡，发起监控的进程会收到<code>{&#39;DOWN&#39;, MonitorReference, process, Pid, Reason}</code></li></ul><h3 id="demonitor-2" tabindex="-1"><a class="header-anchor" href="#demonitor-2"><span>demonitor/2</span></a></h3><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">spec</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> demonitor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">MonitorRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> OptionList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> boolean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                   when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MonitorRef</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> reference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OptionList</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Option</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Option</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ::</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> flush</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong><code>flush</code></strong> - 在停止监控后，从调用方消息队列中删除（一条） <code>{_， MonitorRef， _， _， _}</code> 消息（如果有）。调用 <a href="https://www.erlang.org/doc/apps/erts/erlang.html#demonitor/2" target="_blank" rel="noopener noreferrer"><code>demonitor(MonitorRef, [flush\\])</code></a>等同于以下内容，但效率更高：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">demonitor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">MonitorRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">receive</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MonitorRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> _</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> _</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> _</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        true</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">after</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        true</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>info</code></strong> - 返回的值是以下值之一：</p><ul><li><strong><code>true</code></strong> - 找到并删除了监视器。在这种情况下，没有 <code>&#39;DOWN&#39;</code> 与此监视器对应的消息已送达，不会 交付。</li><li><strong><code>false</code></strong> - 未找到监视器，无法删除监视器。这可能是因为有人已经在调用方消息队列中放置了与此监视器对应的 <code>“DOWN”</code> 消息。</li></ul></li></ul><h2 id="进程的状态" tabindex="-1"><a class="header-anchor" href="#进程的状态"><span>进程的状态</span></a></h2><p>让进程像冰箱一样工作。该进程将允许两种操作：将食物存入冰箱和从冰箱中取出食物。只有事先存放的食物才能取出。</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">kitchen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">compile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">export_all</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fridge1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    receive</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">From</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">store</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> _Food</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            From</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> ok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            fridge1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">From</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">take</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> _Food</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            %% uh....</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            From</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> not_found</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            fridge1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        terminate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">            ok</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它出了问题。当我们要求存储食物时，进程应该回复 ok，但实际上并没有存储食物；<code>fridge1()</code> 被调用，然后该函数从头开始，没有状态。</p><p>你也可以看到，当我们调用进程从冰箱中取食物时，没有状态可供取出，所以唯一能回复的就是 not_found。为了存储和取出食物，我们需要在函数中添加状态。</p><p>借助递归，进程的状态可以完全保存在函数的参数中。就我们的冰箱进程而言，一种可能性是将所有食物存储为一个列表，然后当有人需要吃东西的时候再从列表中查找</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fridge2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">FoodList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    receive</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">From</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">store</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Food</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            From</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> ok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            fridge2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Food</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">|</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">FoodList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">From</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">take</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Food</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            case</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> lists</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">member</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Food</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> FoodList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> of</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                    From</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">ok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Food</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}},</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">                    fridge2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">lists</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">delete</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Food</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> FoodList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                    From</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> not_found</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">                    fridge2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">FoodList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        terminate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">            ok</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进程命名" tabindex="-1"><a class="header-anchor" href="#进程命名"><span>进程命名</span></a></h2><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_critic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    spawn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">?</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MODULE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> critic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">judge</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Pid</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Band</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Album</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    Pid</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Band</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Album</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}},</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    receive</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Criticism</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Criticism</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    after</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        timeout</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">critic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    receive</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">From</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Rage Against the Turing Machine</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Unit Testify</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            From</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">They are great!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">From</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">System of a Downtime</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Memoize</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            From</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">They&#39;re not Johnny Crash but they&#39;re good.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">From</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Johnny Crash</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">The Token Ring of Fire</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            From</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Simply incredible.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">From</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_Band</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> _Album</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            From</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">They are terrible!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    critic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们假装我们正在商店里购物，寻找音乐。有一些专辑听起来很有趣，但我们并不确定。你决定打电话给你的朋友，评论家。</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">linkmon</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.                         </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">ok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">linkmon</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Critic</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> linkmon</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_critic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">47</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> linkmon</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">judge</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Critic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Genesis</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">The Lambda Lies Down on Broadway</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">They are terrible!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于太阳风暴（我试图在这里找到一些现实的东西），连接断开了。</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Critic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> solar_storm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> linkmon</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">judge</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Critic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Genesis</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">A trick of the Tail Recursion</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">timeout</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>真烦人。我们再也无法获得对这些专辑的评论了。为了让评论家保持存活，我们将编写一个基本的“监督器”进程，其唯一作用是在评论家崩溃时重启它。</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_critic2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    spawn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">?</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MODULE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> restarter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">restarter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    process_flag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">trap_exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    Pid</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> spawn_link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">?</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MODULE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> critic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []),</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    receive</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">EXIT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> normal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> % not a crash</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">            ok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">EXIT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> shutdown</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> % manual termination, not a crash</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">            ok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">EXIT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> _</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            restarter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，重启器将是它自己的进程。它将依次启动评论家的进程，如果评论家因异常原因死亡，<code>restarter/0</code> 将循环并创建一个新的评论家。请注意，我添加了一个用于 <code>{&#39;EXIT&#39;, Pid, shutdown}</code> 的子句，作为一种手动杀死评论家的方法，以防我们将来需要这样做。</p><p>我们这种方法的问题是，我们无法找到评论家的 Pid，因此我们无法打电话给他征求他的意见。Erlang 解决这个问题的方案之一是为进程命名。</p><p>为进程命名使您可以用一个原子替换不可预测的 pid。然后，此原子可以用作 Pid 一样发送消息。为了给进程命名，使用函数 <a href="http://erldocs.com/18.0/erts/erlang.html#register/2" target="_blank" rel="noopener noreferrer">erlang:register/2</a>。如果进程死亡，它将自动失去其名称，您也可以使用 <a href="http://erldocs.com/18.0/erts/erlang.html#unregister/1" target="_blank" rel="noopener noreferrer">unregister/1</a> 手动执行此操作。您可以使用 <a href="http://erldocs.com/18.0/erts/erlang.html#registered/0" target="_blank" rel="noopener noreferrer">registered/0</a> 获取所有已注册进程的列表，或者使用 shell 命令 <code>regs()</code> 获取更详细的列表。在这里，我们可以将 <code>restarter/0</code> 函数改写如下：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">restarter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    process_flag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">trap_exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    Pid</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> spawn_link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">?</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MODULE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> critic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    register</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">critic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    receive</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">EXIT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> normal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> % not a crash</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">            ok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">EXIT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> shutdown</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> % manual termination, not a crash</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">            ok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">EXIT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> _</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            restarter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，如您所见，<code>register/2</code> 将始终为我们的评论家分配名称 &#39;critic&#39;，无论 Pid 是什么。接下来，我们需要做的就是消除从抽象函数中传入 Pid 的必要性。让我们试试这个</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">judge2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Band</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Album</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    critic</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Band</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Album</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}},</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    Pid</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> whereis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">critic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    receive</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Criticism</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Criticism</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    after</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        timeout</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，行 <code>Pid = whereis(critic)</code> 用于查找评论家的进程标识符，以便在 <code>receive</code> 表达式中与它进行模式匹配。我们希望与这个 pid 匹配，因为这样可以确保我们匹配正确的消息（在邮箱中可能会有 500 个这样的消息）。但这可能是问题的根源。上面的代码假设评论家的 pid 在函数的前两行之间将保持不变。但是，以下情况完全可能发生</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>  1. critic ! Message</span></span>
<span class="line"><span>                        2. critic receives</span></span>
<span class="line"><span>                        3. critic replies</span></span>
<span class="line"><span>                        4. critic dies</span></span>
<span class="line"><span>  5. whereis fails</span></span>
<span class="line"><span>                        6. critic is restarted</span></span>
<span class="line"><span>  7. code crashes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，这也是可能的</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>  1. critic ! Message</span></span>
<span class="line"><span>                           2. critic receives</span></span>
<span class="line"><span>                           3. critic replies</span></span>
<span class="line"><span>                           4. critic dies</span></span>
<span class="line"><span>                           5. critic is restarted</span></span>
<span class="line"><span>  6. whereis picks up</span></span>
<span class="line"><span>     wrong pid</span></span>
<span class="line"><span>  7. message never matches</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们没有采取正确的措施，另一个进程中出现错误的可能性会导致另一个进程出现错误。在这种情况下，critic 原子的值可以从多个进程中看到。这被称为 <em>共享状态</em>。这里的问题是，critic 的值可以被不同的进程几乎同时访问 <em>和</em> 修改，从而导致信息不一致和软件错误。这类问题的常用术语是 <em>竞争条件</em>。竞争条件特别危险，因为它们取决于事件的时机。在几乎所有现有的并发和并行语言中，这种时机取决于不可预测的因素，例如处理器的繁忙程度、进程的运行位置以及程序正在处理的数据。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>您可能听说过，Erlang 通常没有竞争条件或死锁，并且使并行代码安全。在许多情况下，这是正确的，但永远不要假设您的代码真的那么安全。命名进程只是并行代码出错的多种方式中的一种。</p><p>其他例子包括访问计算机上的文件（以修改它们）、从许多不同的进程更新相同的数据库记录，等等。</p></div><p>幸运的是，如果我们不假设命名进程保持不变，修复上面的代码相对容易。相反，我们将使用引用（使用 <code>make_ref()</code> 创建）作为唯一值来识别消息。我们需要将 <code>critic/0</code> 函数重写为 <code>critic2/0</code>，并将 <code>judge/3</code> 重写为 <code>judge2/2</code></p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">judge2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Band</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Album</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    Ref</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> make_ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    critic</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Band</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Album</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}},</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    receive</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Criticism</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Criticism</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    after</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        timeout</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">critic2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    receive</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">From</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Rage Against the Turing Machine</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Unit Testify</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            From</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">They are great!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">From</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">System of a Downtime</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Memoize</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            From</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">They&#39;re not Johnny Crash but they&#39;re good.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">From</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Johnny Crash</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">The Token Ring of Fire</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            From</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Simply incredible.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">From</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_Band</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> _Album</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            From</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">They are terrible!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    critic2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后更改 <code>restarter/0</code> 以使其适合，通过让它生成 <code>critic2/0</code> 而不是 <code>critic/0</code>。现在其他函数应该可以正常工作。用户不会看到任何区别。好吧，他们会看到，因为我们重命名了函数并更改了参数数量，但他们不会知道更改了哪些实现细节以及为什么要这样做。他们只会看到他们的代码变得更简单了，他们不再需要在函数调用中传递 pid</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">6</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">linkmon</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">ok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">linkmon</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">7</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> linkmon</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_critic2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">55</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">8</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> linkmon</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">judge2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">The Doors</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Light my Firewall</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">They are terrible!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">9</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">whereis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">critic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> kill</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> linkmon</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">judge2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Rage Against the Turing Machine</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Unit Testify</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.     </span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">They are great!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，即使我们杀死了评论家，也会立即出现一个新的评论家来解决我们的问题。这就是命名进程的有用之处。如果您尝试在没有注册进程的情况下调用 <code>linkmon:judge/2</code>，函数内部的 <code>!</code> 运算符将抛出一个 bad argument 错误，确保依赖于命名进程的进程无法在没有它们的情况下运行。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>**注意：**如果您还记得之前的内容，原子可以使用有限的（但数量很多）数量。您永远不应该创建动态原子。这意味着命名进程应该保留给 VM 实例的特定重要服务以及在应用程序运行期间始终存在的进程。</p><p>如果您需要命名进程，但它们是暂时的，或者没有任何一个进程是 VM 特定的，那么这可能意味着它们需要作为一个组来表示。如果它们崩溃，将它们链接起来并一起重启可能是明智的选择，而不是尝试使用动态名称。</p></div><h2 id="进程字典" tabindex="-1"><a class="header-anchor" href="#进程字典"><span>进程字典</span></a></h2><blockquote><p>进程字典是 Erlang 中每个进程独有的键值存储机制，它允许进程在内部存储和访问进程特定的数据。虽然功能强大，但由于其破坏了函数式编程的不可变原则，应当谨慎使用。</p></blockquote><h3 id="核心特性" tabindex="-1"><a class="header-anchor" href="#核心特性"><span>核心特性</span></a></h3><ol><li><strong>进程隔离性</strong>：每个进程拥有完全独立的字典存储</li><li><strong>动态存储</strong>：可存储任意 Erlang 数据类型（原子、元组、列表、PID等）</li><li><strong>生命周期</strong>：与进程绑定，进程终止时自动销毁</li><li><strong>访问效率</strong>：比消息传递或ETS表访问更快</li></ol><h3 id="常用方法-1" tabindex="-1"><a class="header-anchor" href="#常用方法-1"><span>常用方法</span></a></h3><table><thead><tr><th>函数</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>\`put(Key, Value) -&gt; PreviousValue</td><td>undefined\`</td><td>存储或更新键值对,返回该键之前的值(如存在)或undefined</td></tr><tr><td>\`get(Key) -&gt; Value</td><td>undefined\`</td><td>获取指定键的值</td></tr><tr><td><code>get() -&gt; [{Key, Value}]</code></td><td>获取所有键值对(返回无序列表)</td><td></td></tr><tr><td>\`erase(Key) -&gt; Value</td><td>undefined\`</td><td>删除指定键并返回其值</td></tr><tr><td><code>erase() -&gt; [{Key, Value}]</code></td><td>清空整个字典并返回所有键值对</td><td></td></tr><tr><td><code>get_keys(Value) -&gt; [Key]</code></td><td>查找所有值为指定Value的键</td><td></td></tr></tbody></table>`,165)]))}const p=i(l,[["render",e]]),d=JSON.parse('{"path":"/backend/erlang/i08oqmum/","title":"进程","lang":"zh-CN","frontmatter":{"title":"进程","createTime":"2025/03/22 14:48:44","permalink":"/backend/erlang/i08oqmum/"},"headers":[],"readingTime":{"minutes":25.4,"words":7621},"git":{"updatedTime":1745749640000,"contributors":[{"name":"舒永好","username":"舒永好","email":"shuyonghao@guoshenghuaxing.com","commits":3,"avatar":"https://gravatar.com/avatar/4b1c3f37ea707968be73c631a79de33afd360724ce87bf8f9dcacd67d14df92c?d=retro"},{"name":"syh","username":"syh","email":"syh@qq.com","commits":3,"avatar":"https://gravatar.com/avatar/060d67e779a1b0aeace68a2a010b367f852e56888393383ea27302df983f6814?d=retro"}]},"filePathRelative":"notes/backend/erlang/erlang_otp/concurrent_programming/process.md"}');export{p as comp,d as data};
