import{_ as e,c as a,a as i,o as n}from"./app-C7T5jqfQ.js";const l="/blogs/assets/image-20231001221247283-62F8K9i_.png",p="/blogs/assets/image-20231001225015372-pVNgDuQw.png",r="/blogs/assets/image-20231001224851609-DF5smj_o.png",t="/blogs/assets/image-20231001224903357-Ds-GS8n9.png",c="/blogs/assets/image-20231001224917932-DhRc13nO.png",o="/blogs/assets/image-20231001224941739-TB6jt81C.png",d="/blogs/assets/image-20231001224959001-Dr06pbay.png",h="/blogs/assets/image-20231001225210418-CBWa7_oc.png",g="/blogs/assets/image-20231001225906252-1NnYrLQs.png",m="/blogs/assets/image-20231001230021856-PtZKdYVF.png",u="/blogs/assets/image-20231001230103311-BkGukCPe.png",b="/blogs/assets/image-20231001230528541-Cx1OkVV-.png",f="/blogs/assets/image-20231001230714703-C5xNpkMZ.png",_="/blogs/assets/image-20231001230855254-CKu2Ig-2.png",x="/blogs/assets/image-20231001230902970-CT0fDEj6.png",v="/blogs/assets/image-20231002083412647-hTeaOEF6.png",k="/blogs/assets/image-20231002085316277-BpIB4YUX.png",y="/blogs/assets/image-20231002085401329-BLYQxNQ3.png",S="/blogs/assets/image-20231002085536391-Cyxu1I0Y.png",L="/blogs/assets/image-20231002085655001-D2b1XS05.png",z="/blogs/assets/image-20231002085949117-KDpjonT9.png",T="/blogs/assets/image-20231002104423332-CCTxzr10.png",C="/blogs/assets/image-20231002104521276-Cbu5AIZC.png",N="/blogs/assets/image-20231002103041649-HW1uyEC7.png",B="/blogs/assets/image-20231002105323165-DhuU815U.png",D="/blogs/assets/image-20231002105500664-Rdxpsn7T.png",P="/blogs/assets/image-20231002105539603-Dmj7Ypip.png",w="/blogs/assets/image-20231002105825362-BkR5v-9W.png",j="/blogs/assets/image-20231002105856500-CDflLNJU.png",I="/blogs/assets/image-20231002110028297-Cg46xNPb.png",O="/blogs/assets/image-20231002110130003-DWDg7B6u.png",R={};function U(Y,s){return n(),a("div",null,s[0]||(s[0]=[i('<ul><li>由服务提供者提供代理，所以叫做反向代理</li></ul><p><img src="'+l+'" alt="image-20231001221247283"></p><h2 id="正向代理" tabindex="-1"><a class="header-anchor" href="#正向代理"><span>正向代理</span></a></h2><p><img src="'+p+'" alt="image-20231001225015372"></p><ul><li>服务端的设置：</li></ul><p><img src="'+r+'" alt="image-20231001224851609"></p><ul><li>使用客户端访问服务端，打开日志查看结果</li></ul><p><img src="'+t+'" alt="image-20231001224903357"></p><ul><li>代理服务器设置：</li></ul><p><img src="'+c+'" alt="image-20231001224917932"></p><ul><li><p>在客户端配置代理服务器</p><p><img src="'+o+'" alt="image-20231001224941739"></p></li><li><p>设置完成后，再次通过浏览器访问服务端</p></li></ul><p><img src="'+d+'" alt="image-20231001224959001"></p><h2 id="反向代理配置语法" tabindex="-1"><a class="header-anchor" href="#反向代理配置语法"><span>反向代理配置语法</span></a></h2><ul><li>Nginx反向代理模块的指令是由<code>ngx_http_proxy_module</code>模块进行解析，该模块在安装Nginx的时候已经自己加装到Nginx中了</li></ul><h3 id="proxy-pass" tabindex="-1"><a class="header-anchor" href="#proxy-pass"><span>proxy_pass</span></a></h3><ul><li>该指令用来设置被代理服务器地址，可以是主机名称，Ip地址加端口号形式</li></ul><p><img src="'+h+'" alt="image-20231001225210418"></p><p>URL：为要设置的被代理服务器地址，包含传输协议(http,https://),主机名称或IP地址加端口号，URI等要素</p><p>在编写proxy_pass的时候，后面的值要不要加&quot;/&quot;</p><p><img src="'+g+'" alt="image-20231001225906252"></p><h3 id="proxy-set-header" tabindex="-1"><a class="header-anchor" href="#proxy-set-header"><span>proxy_set_header</span></a></h3><ul><li>该指令可以更改Nginx服务器接收到的客户端请求的请求头信息，然后将新的请求头发送给被代理的服务器</li></ul><p><img src="'+m+'" alt="image-20231001230021856"></p><p>需要注意的是，如果想要看到结果，必须在被代理的服务器上来获取添加的头信息</p><p>被代理的服务器</p><p><img src="'+u+'" alt="image-20231001230103311"></p><p>代理服务器</p><p><img src="'+b+'" alt="image-20231001230528541"></p><h3 id="proxy-redirect" tabindex="-1"><a class="header-anchor" href="#proxy-redirect"><span>proxy_redirect</span></a></h3><ul><li>该指令是用来重置头信息中的&quot;Location&quot;和Refresh的值 <ul><li>redirect:目标，Location的值</li><li>replacement:要替换的值</li><li>default:将location块的uri变量作为replacement，将proxy_pass变量作为redirect进行替换</li></ul></li></ul><p><img src="'+f+'" alt="image-20231001230714703"></p><p>被代理服务端</p><p><img src="'+_+'" alt="image-20231001230855254"></p><p>代理服务端</p><p><img src="'+x+'" alt="image-20231001230902970"></p><h2 id="nginx的安全控制" tabindex="-1"><a class="header-anchor" href="#nginx的安全控制"><span>Nginx的安全控制</span></a></h2><ul><li>通过代理分开了客户端到应用程序服务器端的连接，实现了安全措施，在反射代理之前设置防火墙，公留一个入口供代理服务器访问</li></ul><p><img src="'+v+`" alt="image-20231002083412647"></p><h3 id="使用ssl对流量进行加密" tabindex="-1"><a class="header-anchor" href="#使用ssl对流量进行加密"><span>使用SSL对流量进行加密</span></a></h3><ul><li><p>也就是将http请求转变为https请求，两个都是Http协议，只不过https是身披SSl外壳的http</p></li><li><p>HTTPS是一种通过计算机网络进行安全通信的传输协议，它经由HTTP进行通信，利用SSL/TLS建立全通信，加密数据包，确保数据的安全性</p><ul><li>SSL（Secure Layer）安全套接层</li><li>TLS（Transport Layer Security）传输层安全</li></ul></li><li><p>Nginx要想使用SSL，需要满足一个条件即需要添加一个模块<code>--with-http_ssl_module</code>,该模块在编译的过程中需要OpenSSL的支持</p></li></ul><h3 id="nginx添加ssl的支持" tabindex="-1"><a class="header-anchor" href="#nginx添加ssl的支持"><span>nginx添加SSL的支持</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>》将原有/usr/local/nginx/sbin/nginx进行备份</span></span>
<span class="line"><span>》拷贝nginx之前的配置信息</span></span>
<span class="line"><span>》在nginx的安装源码进行配置指定对应模块 ./configure --with-http_ssl_module</span></span>
<span class="line"><span>》通过make模板进行编译</span></span>
<span class="line"><span>》将objs下面的nginx移动到/usr/local/nginx/sbin下</span></span>
<span class="line"><span>》在源码目录下执行 make upgrade进行升级，这个可以实现不停机添</span></span>
<span class="line"><span>加新模块的功能</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nginx的ssl相关指令" tabindex="-1"><a class="header-anchor" href="#nginx的ssl相关指令"><span>Nginx的SSL相关指令</span></a></h3><p>该模块的指令都是通过ngx_http_ssl_module模块来解析的</p><h4 id="ssl" tabindex="-1"><a class="header-anchor" href="#ssl"><span>ssl</span></a></h4><ul><li>该指令用来指定服务器开启HTTPS， <ul><li>可以使用<code>listen 443 ssl</code>,后面这种方式更通用些</li></ul></li></ul><p><img src="`+k+'" alt="image-20231002085316277"></p><h4 id="ssl-certificate" tabindex="-1"><a class="header-anchor" href="#ssl-certificate"><span>ssl_certificate</span></a></h4><ul><li>为当前这个虚拟主机指定一个带有PEM格式证书的证书</li></ul><p><img src="'+y+'" alt="image-20231002085401329"></p><h4 id="ssl-certificate-key" tabindex="-1"><a class="header-anchor" href="#ssl-certificate-key"><span>ssl_certificate_key</span></a></h4><ul><li>该指令用来指定PEM secrect key文件的路径</li></ul><p><img src="'+S+'" alt="image-20231002085536391"></p><h4 id="ssl-session-cache" tabindex="-1"><a class="header-anchor" href="#ssl-session-cache"><span>ssl_session_cache</span></a></h4><ul><li>该指令用来配置用于SSl会话的缓存</li></ul><p><img src="'+L+'" alt="image-20231002085655001"></p><p>off:禁用会话缓存，客户端不得重复使用会话</p><p>none:禁止使用会话缓存，客户端可以重复使用，但是并没有在缓存中存 储会话参数</p><p>builtin:内置OpenSSL缓存，仅在一个工作进程中使用。</p><p>shared:所有工作进程之间共享缓存，缓存的相关信息用name和size来 指定</p><h4 id="ssl-session-timeout" tabindex="-1"><a class="header-anchor" href="#ssl-session-timeout"><span>ssl_session_timeout</span></a></h4><ul><li>开启SSL会话功能后，设置客户端能够反复使用储存在缓存中的会话参数时间</li></ul><p><img src="'+z+'" alt="image-20231002085949117"></p><h4 id="ssl-ciphers" tabindex="-1"><a class="header-anchor" href="#ssl-ciphers"><span>ssl_ciphers</span></a></h4><ul><li>指出允许的密码，密码指定为OpenSSL支持的格式 <ul><li>可以使用<code>openssl ciphers</code>查看openssl支持的格式</li></ul></li></ul><p><img src="'+T+'" alt="image-20231002104423332"></p><h4 id="ssl-prefer-server-ciphers" tabindex="-1"><a class="header-anchor" href="#ssl-prefer-server-ciphers"><span>ssl_prefer_server_ciphers</span></a></h4><ul><li>该指令指定是否服务器密码优先客户端 密码</li></ul><p><img src="'+C+`" alt="image-20231002104521276"></p><h4 id="生成证书" tabindex="-1"><a class="header-anchor" href="#生成证书"><span>生成证书</span></a></h4><ul><li>先确认当前系统是否安装openssl</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>openssl version</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>安装下面的命令进行生成</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>mkdir /root/cert</span></span>
<span class="line"><span>cd /root/cert</span></span>
<span class="line"><span>openssl genrsa -des3 -out server.key 1024</span></span>
<span class="line"><span>openssl req -new -key server.key -out server.csr</span></span>
<span class="line"><span>cp server.key server.key.org</span></span>
<span class="line"><span>openssl rsa -in server.key.org -out server.key</span></span>
<span class="line"><span>openssl x509 -req -days 365 -in server.csr -signkey</span></span>
<span class="line"><span>server.key -out server.crt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="开启ssl实例" tabindex="-1"><a class="header-anchor" href="#开启ssl实例"><span>开启SSL实例</span></a></h4><p><img src="`+N+'" alt="image-20231002103041649"></p><h2 id="反向代理系统调优" tabindex="-1"><a class="header-anchor" href="#反向代理系统调优"><span>反向代理系统调优</span></a></h2><p><img src="'+B+`" alt="image-20231002105323165"></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>Buffer 缓冲	 Cache 缓存</span></span>
<span class="line"><span># 缓冲主要用来解决不同设备之间数据传递速度不一致导致的性能低的问题，缓冲中的数据一旦此次操作完成后，就可以删除</span></span>
<span class="line"><span># 缓存主要是备份，将被代理服务器的数据缓存一份到代理服务器，这样的话，客户端再次获取相同数据的时候，就只需要从代理服务器上获取，效率较高，缓存中的数据可以重复使用，只有满足特定条件都会删除</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="proxy-buffer相关指令" tabindex="-1"><a class="header-anchor" href="#proxy-buffer相关指令"><span>Proxy Buffer相关指令</span></a></h3><h4 id="proxy-buffering" tabindex="-1"><a class="header-anchor" href="#proxy-buffering"><span>proxy buffering</span></a></h4><ul><li>该指令用来开启或者关闭代理服务器的缓冲区</li></ul><p><img src="`+D+'" alt="image-20231002105500664"></p><h4 id="proxy-buffers" tabindex="-1"><a class="header-anchor" href="#proxy-buffers"><span>proxy_buffers</span></a></h4><ul><li>该指令用来指定单个连接从代理服务器读取响应的缓存区的个数和大小</li></ul><p><img src="'+P+'" alt="image-20231002105539603"></p><p>number:缓冲区的个数</p><p>size:每个缓冲区的大小，缓冲区的总大小就是number*size</p><h4 id="proxy-buffer-size" tabindex="-1"><a class="header-anchor" href="#proxy-buffer-size"><span>proxy_buffer_size</span></a></h4><ul><li>该指令用来设置从被代理服务器获取的第一部分响应数据的大小，保持与proxy_buffers中的size一致即可</li></ul><p><img src="'+w+'" alt="image-20231002105825362"></p><h4 id="proxy-busy-buffers-size" tabindex="-1"><a class="header-anchor" href="#proxy-busy-buffers-size"><span>proxy_busy_buffers_size</span></a></h4><ul><li>该指令用来限制同时处于BUSY状态的缓冲总大小</li></ul><p><img src="'+j+'" alt="image-20231002105856500"></p><h4 id="proxy-temp-path" tabindex="-1"><a class="header-anchor" href="#proxy-temp-path"><span>proxy_temp_path</span></a></h4><ul><li>当缓冲区存满后，仍未被Nginx服务器完全接受，响应数据就会被临时存放在磁盘文件上，该指令设置文件路径</li></ul><p><img src="'+I+'" alt="image-20231002110028297"></p><p>path最多设置三层</p><h4 id="proxy-temp-file-write-size" tabindex="-1"><a class="header-anchor" href="#proxy-temp-file-write-size"><span>proxy_temp_file_write_size</span></a></h4><ul><li>该指令用来设置磁盘上缓冲文件的大小</li></ul><p><img src="'+O+`" alt="image-20231002110130003"></p><h4 id="通用配置" tabindex="-1"><a class="header-anchor" href="#通用配置"><span>通用配置</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>proxy_buffering on;</span></span>
<span class="line"><span>proxy_buffer_size 4 32k;</span></span>
<span class="line"><span>proxy_busy_buffers_size 64k;</span></span>
<span class="line"><span>proxy_temp_file_write_size 64k;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,103)]))}const E=e(R,[["render",U]]),H=JSON.parse('{"path":"/os/4m444hjz/","title":"反向代理","lang":"zh-CN","frontmatter":{"title":"反向代理","createTime":"2025/04/05 16:41:39","permalink":"/os/4m444hjz/"},"headers":[],"readingTime":{"minutes":5.2,"words":1560},"git":{"updatedTime":1743864983000,"contributors":[{"name":"舒永好","username":"舒永好","email":"shuyonghao@guoshenghuaxing.com","commits":1,"avatar":"https://gravatar.com/avatar/4b1c3f37ea707968be73c631a79de33afd360724ce87bf8f9dcacd67d14df92c?d=retro"}]},"filePathRelative":"notes/os/nginx/advance/reverse_proxy.md"}');export{E as comp,H as data};
