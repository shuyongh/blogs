import{_ as o,c as r,a as n,d as i,e as s,b as l,w as t,r as d,o as c}from"./app-C7T5jqfQ.js";const p={},h={class:"hint-container tip"};function g(k,e){const a=d("RouteLink");return c(),r("div",null,[e[14]||(e[14]=n(`<blockquote><p>一个<em>配置文件</em>包含系统中应用程序的配置参数值。</p><ul><li><p><code>erl</code> 命令行参数 <a href="https://erlang.org.cn/doc/apps/erts/erl_cmd#config" target="_blank" rel="noopener noreferrer"><code>-config Name</code></a> 告诉系统使用系统配置文件 <code>Name.config</code> 中的数据。</p></li><li><p>erl 命令行参数 <a href="https://erlang.org.cn/doc/apps/erts/erl_cmd#configfd" target="_blank" rel="noopener noreferrer"><code>-configfd</code></a> 的工作方式与 <code>-config</code> 选项相同，但指定一个文件描述符来读取配置数据，而不是文件</p></li></ul><p>优先级：命令行&gt;配置文件或文件描述符中的配置参数值&gt;应用程序资源文件</p><p>通过调用 <code>application:get_env/1,2</code> 来检索配置参数的值。</p></blockquote><h2 id="文件语法" tabindex="-1"><a class="header-anchor" href="#文件语法"><span>文件语法</span></a></h2><p>配置文件应命名为 <code>Name.config</code>，其中 <code>Name</code> 可以是任何名称。</p><p><code>.config</code> 文件包含一个 Erlang 项，并具有以下语法</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>[{Application1, [{Par11, Val11}, ...]},</span></span>
<span class="line"><span> ...</span></span>
<span class="line"><span> {ApplicationN, [{ParN1, ValN1}, ...]}]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>Application = atom()</code></strong> - 应用程序名称。</li><li><strong><code>Par = atom()</code></strong> - 配置参数的名称。</li><li><strong><code>Val = term()</code></strong> - 配置参数的值。</li></ul><h2 id="配置项" tabindex="-1"><a class="header-anchor" href="#配置项"><span>配置项</span></a></h2><p>===<mark><mark><mark><mark><mark><mark>为 Kernel 应用程序定义了以下配置参数</mark></mark></mark></mark></mark></mark></p><ul><li><p><strong><code>connect_all = true | false</code></strong> - 如果启用 (<code>true</code>)，这也是默认值，则 <a href="https://erlang.org.cn/doc/apps/kernel/global" target="_blank" rel="noopener noreferrer"><code>global</code></a> 将主动连接到所有已知节点。 请注意，您还需要启用 <a href="https://erlang.org.cn/doc/apps/kernel/kernel_app#prevent_overlapping_partitions" target="_blank" rel="noopener noreferrer"><code>prevent_overlapping_partitions</code></a>，以便 <code>global</code> 确保维护完全连接的网络。<code>prevent_overlapping_partitions</code> 还可以防止 <code>global</code> 的名称注册和锁定出现不一致。</p><p>现在已弃用的命令行参数 <a href="https://erlang.org.cn/doc/apps/erts/erl_cmd#connect_all" target="_blank" rel="noopener noreferrer"><code>-connect_all </code></a> 与 <code>connect_all</code> 配置参数具有相同的效果。 如果定义了此配置参数，它将覆盖命令行参数。</p></li><li><p><strong><code>distributed = [Distrib]</code></strong> - 指定哪些应用程序是分布式的，以及允许它们在哪些节点上执行。在此参数中</p><ul><li><code>Distrib = {App,Nodes} | {App,Time,Nodes}</code></li><li><code>App = atom()</code></li><li><code>Time = integer()&gt;0</code></li><li><code>Nodes = [node() | {node(),...,node()}]</code></li></ul><p>该参数在 <a href="https://erlang.org.cn/doc/apps/kernel/application#load/2" target="_blank" rel="noopener noreferrer"><code>application:load/2</code></a> 中进行了描述。</p></li><li><p><strong><code>dist_auto_connect = Value</code></strong> - 指定何时自动连接节点。如果未指定此参数，则始终自动连接节点，例如，当要向该节点发送消息时。 <code>Value</code> 是以下之一</p><ul><li><strong><code>never</code></strong> - 永远不会自动建立连接，必须显式连接。请参阅 <a href="https://erlang.org.cn/doc/apps/kernel/net_kernel" target="_blank" rel="noopener noreferrer"><code>net_kernel</code></a>。</li><li><strong><code>once</code></strong> - 自动建立连接，但每个节点仅建立一次。如果节点关闭，则必须随后显式连接。 请参阅 <a href="https://erlang.org.cn/doc/apps/kernel/net_kernel" target="_blank" rel="noopener noreferrer"><code>net_kernel</code></a>。</li></ul></li><li><p><strong><code>epmd_module = module()</code></strong> - 配置负责与 <a href="https://erlang.org.cn/doc/apps/erts/epmd_cmd" target="_blank" rel="noopener noreferrer">epmd</a> 通信的模块。如果未定义此参数，则默认为 <code>erl_epmd</code>。</p><p>现在已弃用的命令行参数 <a href="https://erlang.org.cn/doc/apps/erts/erl_cmd#epmd_module" target="_blank" rel="noopener noreferrer"><code>-epmd_module </code></a> 与 <code>epmd_module</code> 配置参数具有相同的效果。如果定义了此配置参数，它将覆盖命令行参数。</p></li><li><p><strong><code>erl_epmd_node_listen_port = integer()</code></strong> - 配置 <a href="https://erlang.org.cn/doc/apps/kernel/erl_epmd" target="_blank" rel="noopener noreferrer"><code>erl_epmd</code></a> 用于侦听连接和连接到其他节点的端口。如果设置了此标志，即使 EPMD 不可用，Erlang VM 也将以分布式模式启动。如果未设置，则会自动选择一个端口（等效于端口 <code>0</code>）。有关更多详细信息，请参阅 <a href="https://erlang.org.cn/doc/apps/kernel/erl_epmd" target="_blank" rel="noopener noreferrer"><code>erl_epmd</code></a>。</p><p>现在已弃用的命令行参数 <a href="https://erlang.org.cn/doc/apps/erts/erl_cmd#erl_epmd_port" target="_blank" rel="noopener noreferrer"><code>erl_epmd_port </code></a> 与 <code>erl_epmd_node_listen_port</code> 配置参数具有相同的效果。如果定义了此配置参数，它将覆盖命令行参数。</p></li><li><p><strong><code>permissions = [Perm]</code></strong> - 指定启动应用程序时的默认权限。在此参数中</p><ul><li><code>Perm = {ApplName,Bool}</code></li><li><code>ApplName = atom()</code></li><li><code>Bool = boolean()</code></li></ul><p>在 <a href="https://erlang.org.cn/doc/apps/kernel/application#permit/2" target="_blank" rel="noopener noreferrer"><code>application:permit/2</code></a> 中描述了权限。</p></li></ul><p>===<mark><mark><mark><mark><mark><mark>为 logger应用程序定义了以下配置参数</mark></mark></mark></mark></mark></mark></p>`,10)),i("ul",null,[e[12]||(e[12]=n('<li><p><strong><code>logger = [Config]</code></strong> - 指定 <a href="https://erlang.org.cn/doc/apps/kernel/logger" target="_blank" rel="noopener noreferrer">Logger</a> 的配置，但主要日志级别除外，该级别使用 <a href="https://erlang.org.cn/doc/apps/kernel/kernel_app#logger_level" target="_blank" rel="noopener noreferrer"><code>logger_level</code></a> 指定，并且与 <a href="https://erlang.org.cn/doc/apps/sasl/error_logging" target="_blank" rel="noopener noreferrer">SASL 错误日志记录</a>的兼容性除外，该兼容性使用 <a href="https://erlang.org.cn/doc/apps/kernel/kernel_app#logger_sasl_compatible" target="_blank" rel="noopener noreferrer"><code>logger_sasl_compatible</code></a> 指定。</p><p>在 Kernel 用户指南的 <a href="https://erlang.org.cn/doc/apps/kernel/logger_chapter#logger_parameter" target="_blank" rel="noopener noreferrer">日志记录</a> 部分中描述了 <code>logger</code> 参数。</p></li><li><p><strong><code>logger_level = Level</code></strong> - 指定 Logger 的主要日志级别。具有相同或更严重级别 的日志事件将通过主要日志级别检查。有关 Logger 和日志级别的更多信息，请参阅 Kernel 用户指南中的 <a href="https://erlang.org.cn/doc/apps/kernel/logger_chapter" target="_blank" rel="noopener noreferrer">日志记录</a> 部分。</p><p><code>Level = emergency | alert | critical | error | warning | notice | info | debug | all | none</code></p><p>要在运行时更改主要日志级别，请使用 <a href="https://erlang.org.cn/doc/apps/kernel/logger#set_primary_config/2" target="_blank" rel="noopener noreferrer"><code>logger:set_primary_config(level, Level)</code></a>。</p><p>默认为 <code>notice</code>。</p></li><li><p><strong><code>logger_metadata = Metadata</code></strong> - 为日志事件指定主要元数据。</p><p><code>Metadata = map()</code></p><p>默认为 <code>#{}</code>。</p></li>',3)),i("li",null,[e[10]||(e[10]=n('<p><strong><code>logger_sasl_compatible = true | false</code></strong> - 指定 Logger 是否与 Erlang/OTP 21.0 之前的版本的 SASL 错误日志记录功能向后兼容。</p><p>如果此参数设置为 <code>true</code>，则默认的 Logger 处理程序不会记录任何进度、崩溃或监督报告。 如果随后启动了 SASL 应用程序，它会添加一个名为 <code>sasl</code> 的 Logger 处理程序，该处理程序会根据 SASL 配置参数 <code>sasl_error_logger</code> 和 <code>sasl_errlog_type</code> 的值记录这些事件。</p><p>默认为 <code>false</code>。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>如果此参数设置为 <code>true</code>，<code>sasl_errlog_type</code> 指示应记录进度报告，并且配置的主要日志级别为 <code>notice</code> 或更严重，则 SASL 会自动将主要日志级别设置为 <code>info</code>。也就是说，此设置可能会覆盖内核配置参数 <code>logger_level</code> 的值。这是为了允许将具有日志级别 <code>info</code> 的进度报告转发到处理程序。</p></div>',4)),i("div",h,[e[9]||(e[9]=i("p",{class:"hint-container-title"},"提示",-1)),i("p",null,[e[1]||(e[1]=s("Erlang 在较新的版本中将日志记录功能从 ")),e[2]||(e[2]=i("code",null,"sasl",-1)),e[3]||(e[3]=s(" 模块迁移到 ")),l(a,{to:"/notes/backend/erlang/erlang_core/kernel/logger.html"},{default:t(()=>e[0]||(e[0]=[s("logger")])),_:1}),e[4]||(e[4]=s(" 模块。因此，")),e[5]||(e[5]=i("strong",null,[i("code",null,"sasl"),s(" 的日志捕获功能")],-1)),e[6]||(e[6]=s("在新版本的 Erlang/OTP 中已经被弃用，取而代之的是使用 ")),e[7]||(e[7]=i("code",null,"logger",-1)),e[8]||(e[8]=s(" 模块来处理系统日志和错误信息。"))])]),e[11]||(e[11]=i("p",null,[s("==="),i("mark",null,[i("mark",null,[i("mark",null,[i("mark",null,[i("mark",null,[i("mark",null,"为 global_groups应用程序定义了以下配置参数")])])])])])],-1))]),e[13]||(e[13]=n(`<li><p><strong><code>global_groups = [GroupTuple]</code></strong> - 定义全局组，请参阅 <a href="https://erlang.org.cn/doc/apps/kernel/global_group" target="_blank" rel="noopener noreferrer"><code>global_group</code></a>。在此参数中</p><ul><li><code>GroupTuple = {GroupName, [Node]} | {GroupName, PublishType, [Node]}</code></li><li><code>GroupName = atom()</code></li><li><code>PublishType = normal | hidden</code></li><li><code>Node = node()</code></li></ul></li><li><p><strong><code>inet_default_connect_options = [{Opt, Val}]</code></strong> - 指定 <code>connect</code> 套接字的默认选项，请参阅 <a href="https://erlang.org.cn/doc/apps/kernel/inet" target="_blank" rel="noopener noreferrer"><code>inet</code></a>。</p></li><li><p><strong><code>inet_default_listen_options = [{Opt, Val}]</code></strong> - 指定 <code>listen</code>（和 <code>accept</code>）套接字的默认选项，请参阅 <a href="https://erlang.org.cn/doc/apps/kernel/inet" target="_blank" rel="noopener noreferrer"><code>inet</code></a>。</p></li><li><p><strong><code>inet_dist_use_interface = ip_address()</code></strong> - 如果 Erlang 节点的主机有多个网络接口，则此参数指定要侦听的接口。有关 <code>ip_address()</code> 的类型定义，请参阅 <a href="https://erlang.org.cn/doc/apps/kernel/inet" target="_blank" rel="noopener noreferrer"><code>inet</code></a>。</p></li><li><p><strong><code>inet_dist_listen_min = First</code><code>inet_dist_listen_max = Last</code></strong> 为分布式 Erlang 节点的侦听器套接字定义 <code>First..Last</code> 端口范围。</p></li><li><p><strong><code>inet_dist_listen_options = Opts</code></strong> - 定义打开分布式 Erlang 节点的侦听套接字时要使用的额外套接字选项列表。 请参阅 <a href="https://erlang.org.cn/doc/apps/kernel/gen_tcp#listen/2" target="_blank" rel="noopener noreferrer"><code>gen_tcp:listen/2</code></a>。</p></li><li><p><strong><code>inet_dist_connect_options = Opts</code></strong> - 定义一个额外的套接字选项列表，用于连接到其他分布式 Erlang 节点。请参阅 <a href="https://erlang.org.cn/doc/apps/kernel/gen_tcp#connect/4" target="_blank" rel="noopener noreferrer"><code>gen_tcp:connect/4</code></a>。</p></li><li><p><strong><code>inet_parse_error_log = silent</code></strong> - 如果设置此项，当在各种 Inet 配置文件中发现并跳过错误行时，不会发出任何日志事件。</p></li><li><p><strong><code>inetrc = Filename</code></strong> - Inet 用户配置文件的名称（字符串）。有关详细信息，请参阅 ERTS 用户指南中的 <a href="https://erlang.org.cn/doc/apps/erts/inet_cfg" target="_blank" rel="noopener noreferrer"><code>Inet Configuration</code></a> 部分。</p></li><li><p><strong><code>net_setuptime = SetupTime</code></strong> - <code>SetupTime</code> 必须为正整数或浮点数，它表示在连接到另一个 Erlang 节点期间，每次网络操作允许的最大时间。最大允许值为 <code>120</code>。如果指定的值更高，则会使用 <code>120</code>。如果未指定该变量或值不正确（例如，不是数字），则默认值为 7 秒。</p><p>请注意，此值不限制总连接建立时间，而是在连接建立和握手期间的每次单独的网络操作的时间。</p></li><li><p><strong><code>net_ticker_spawn_options = Opts</code></strong> - 为网络定时器进程定义一个额外的 spawn 选项列表。对于与另一个节点的每个连接，都存在一个这样的进程。网络定时器进程负责监督与其关联的连接。这些进程还在建立连接时执行分布握手协议。当存在大量分布连接时，设置垃圾回收选项有助于减少内存使用。默认值为 <code>[link, {priority, max}]</code>，并且这两个选项无法更改。<code>monitor</code> 和 <code>{monitor, MonitorOpts}</code> 选项是不允许的，如果存在，将被丢弃。有关有效选项的信息，请参阅 <a href="https://erlang.org.cn/doc/apps/erts/erlang#spawn_opt/4" target="_blank" rel="noopener noreferrer"><code>erlang:spawn_opt/4</code></a> BIF 的文档。如果 <code>Opts</code> 列表不是一个正确的列表，或者包含无效的选项，则连接的建立将失败。</p><p>请注意，只有当使用的分布载体协议按照 <a href="https://erlang.org.cn/doc/apps/erts/alt_dist#distribution-module" target="_blank" rel="noopener noreferrer">ERTS 用户指南 ➜ 如何为 Erlang 分布实现替代载体 ➜ 分布模块</a> 中描述的方式实现，而没有进一步更改时，上述行为才成立。所使用的分布载体协议的实现者可以选择忽略 <code>net_ticker_spawn_options</code> 参数或更改其行为。但是，目前所有随 OTP 提供的分布模块的行为都如上所述。</p></li><li><p><strong><code>net_tickintensity = NetTickIntensity</code></strong> - <em>网络心跳强度</em> 指定在 <a href="https://erlang.org.cn/doc/apps/kernel/kernel_app#net_ticktime" target="_blank" rel="noopener noreferrer">网络心跳时间</a> 期间，当没有其他数据通过与另一个节点的连接发送时，要发送多少个心跳。这也决定了检查来自另一个节点的数据的频率。网络心跳强度越高，节点检测到无响应节点的时间就越接近所选的网络心跳时间段。网络心跳强度默认为 <code>4</code>。<code>NetTickIntensity</code> 的值应为 <code>4..1000</code> 范围内的整数。如果 <code>NetTickIntensity</code> 不是整数或小于 <code>4</code> 的整数，则会静默使用 <code>4</code>。如果 <code>NetTickIntensity</code> 是大于 <code>1000</code> 的整数，则会静默使用 <code>1000</code>。</p><blockquote><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h3><p>请注意，所有通信节点都应使用相同的<em>网络心跳强度</em>以及相同的<em>网络心跳时间</em>。</p></blockquote><blockquote><h3 id="警告" tabindex="-1"><a class="header-anchor" href="#警告"><span>警告</span></a></h3><p>请注意不要设置过高的网络心跳强度，因为如果设置得太高，您可能会使节点工作量过大。</p></blockquote></li><li><p><strong><code>net_ticktime = NetTickTime</code></strong> - 指定<em>网络心跳时间</em>，以秒为单位。这是连接的节点可能无响应的最长时间，在此之后，它将被视为已关闭并断开连接。</p><p>网络心跳时间和 <a href="https://erlang.org.cn/doc/apps/kernel/kernel_app#net_tickintensity" target="_blank" rel="noopener noreferrer">网络心跳强度</a> 共同决定了一个间隔 <code>TickInterval = NetTickTime/NetTickIntensity</code>。每隔 <code>TickInterval</code> 秒，如果在此前 <code>TickInterval</code> 秒内没有向每个连接的节点发送任何内容，则会向其发送心跳。心跳是在连接上发送的一个小数据包。如果在此前 <code>NetTickIntensity</code> 个 <code>TickInterval</code> 秒间隔内没有收到心跳或有效负载数据包，则连接的节点将被视为已关闭。这确保了由于硬件错误等原因而没有响应的节点被视为已关闭。</p><p>由于仅每 <code>TickInterval</code> 秒检查一次可用性，因此当检测到节点无响应时，节点实际无响应的时间 <code>T</code> 可能在 <code>MinT</code> 和 <code>MaxT</code> 之间变化，其中</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>MinT = NetTickTime - NetTickTime / NetTickIntensity</span></span>
<span class="line"><span>MaxT = NetTickTime + NetTickTime / NetTickIntensitycopy</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>NetTickTime</code> 默认为 <code>60</code> 秒，<code>NetTickIntensity</code> 默认为 <code>4</code>。因此，<code>45 &lt; T &lt; 75</code> 秒。</p><blockquote><h3 id="注意-1" tabindex="-1"><a class="header-anchor" href="#注意-1"><span>注意</span></a></h3><p>请注意，<em>所有</em>通信节点都必须指定<em>相同</em>的 <code>NetTickTime</code> 和 <code>NetTickIntensity</code> 值，因为它决定了发出心跳的频率和预期接收心跳的频率。</p></blockquote><p><code>NetTickTime</code> 需要是 <code>NetTickIntensity</code> 的倍数。如果配置的值不是，则 <code>NetTickTime</code> 将在内部向上舍入到最接近的毫秒。但是，<a href="https://erlang.org.cn/doc/apps/kernel/net_kernel#get_net_ticktime/0" target="_blank" rel="noopener noreferrer"><code>net_kernel:get_net_ticktime()</code></a> 将报告截断为最接近秒的网络心跳时间。</p><p>通常，终止的节点会被传输协议（如 TCP/IP）立即检测到。</p></li><li><p><strong><code>prevent_overlapping_partitions = true | false</code></strong> - 如果启用 (<code>true</code>)，当节点之间的连接丢失时，<code>global</code> 将主动防止形成重叠的分区。此修复程序默认启用。如果您要禁用此修复程序，请务必阅读有关此修复程序的 <a href="https://erlang.org.cn/doc/apps/kernel/global#prevent_overlapping_partitions" target="_blank" rel="noopener noreferrer"><code>global</code></a> 文档，以获取更多重要信息。</p></li><li><p><strong><code>shutdown_timeout = integer() | infinity</code></strong> - 指定在节点关闭期间 <code>application_controller</code> 等待应用程序终止的时间。如果计时器过期，<code>application_controller</code> 将粗暴地杀死挂起的应用程序的 <code>application_master</code>。如果未定义此参数，则默认为 <code>infinity</code>。</p></li><li><p><strong><code>sync_nodes_mandatory = [NodeName]</code></strong> - 指定此节点要正确启动<em>必须</em>处于活动状态的其他节点。如果列表中的某些节点未在指定的时间内启动，则此节点也不会启动。如果未定义此参数，则默认为 <code>[]</code>。</p></li><li><p><strong><code>sync_nodes_optional = [NodeName]</code></strong> - 指定此节点要正确启动<em>可以</em>处于活动状态的其他节点。如果此列表中的某些节点未在指定的时间内启动，则此节点仍会启动。如果未定义此参数，则默认为空列表。</p></li><li><p><strong><code>sync_nodes_timeout = integer() | infinity</code></strong> - 指定此节点等待强制节点和可选节点启动的时间（以毫秒为单位）。如果未定义此参数，则不执行节点同步。此选项确保 <code>global</code> 同步。</p></li><li><p><strong><code>start_distribution = true | false</code></strong> - 如果参数为 <code>true</code>，则启动所有分布服务，例如 <code>rpc</code>、<code>global</code> 和 <code>net_kernel</code>。对于要禁用所有分布功能的系统，应将此参数设置为 <code>false</code>。</p><p>默认为 <code>true</code>。</p></li><li><p><strong><code>start_dist_ac = true | false</code></strong> - 如果参数为 <code>true</code>，则启动 <code>dist_ac</code> 服务器。对于使用分布式应用程序的系统，应将此参数设置为 <code>true</code>。</p><p>默认为 <code>false</code>。如果未定义此参数，则当设置参数 <code>distributed</code> 时，将启动服务器。</p></li><li><p><strong><code>start_boot_server = true | false</code></strong> - 如果参数为 <code>true</code>，则启动 <code>boot_server</code>（请参阅 <a href="https://erlang.org.cn/doc/apps/kernel/erl_boot_server" target="_blank" rel="noopener noreferrer"><code>erl_boot_server</code></a>）。在使用此服务的嵌入式系统中，应将此参数设置为 <code>true</code>。</p><p>默认为 <code>false</code>。</p></li><li><p><strong><code>boot_server_slaves = [SlaveIP]</code></strong> - 如果配置参数 <code>start_boot_server</code> 为 <code>true</code>，则可以使用此参数使用从属 IP 地址列表初始化 <code>boot_server</code></p><p><code>SlaveIP = string() | atom | {integer(),integer(),integer(),integer()}</code>,</p><p>其中 <code>0 &lt;= integer() &lt;=255</code>。</p><p>以原子、字符串和元组形式表示的 <code>SlaveIP</code> 示例</p><p><code>&#39;150.236.16.70&#39;, &quot;150,236,16,70&quot;, {150,236,16,70}</code>.</p><p>默认为 <code>[]</code>。</p></li><li><p><strong><code>start_disk_log = true | false</code></strong> - 如果参数为 <code>true</code>，则启动 <code>disk_log_server</code>（请参阅 <a href="https://erlang.org.cn/doc/apps/kernel/disk_log" target="_blank" rel="noopener noreferrer"><code>disk_log</code></a>）。在使用此服务的嵌入式系统中，应将此参数设置为 <code>true</code>。</p><p>默认为 <code>false</code>。</p></li><li><p><strong><code>start_pg = true | false</code></strong> - 如果参数为 <code>true</code>，则启动默认的 <code>pg</code> 作用域服务器（请参阅 <a href="https://erlang.org.cn/doc/apps/kernel/pg" target="_blank" rel="noopener noreferrer"><code>pg</code></a>）。在使用此服务的嵌入式系统中，应将此参数设置为 <code>true</code>。</p><p>默认为 <code>false</code>。</p></li><li><p><strong><code>start_timer = true | false</code></strong> - 如果参数为 <code>true</code>，则启动 <code>timer_server</code>（请参阅 <a href="https://erlang.org.cn/doc/apps/stdlib/timer" target="_blank" rel="noopener noreferrer"><code>timer</code></a>）。在使用此服务的嵌入式系统中，应将此参数设置为 <code>true</code>。</p><p>默认为 <code>false</code>。</p></li><li><p><strong><code>shell_history = enabled | disabled | module()</code></strong> - 指定是否将 shell 历史记录在 <code>erl</code> 使用之间记录到磁盘 (<code>enabled</code>)，完全不记录 (<code>disabled</code>)，或者使用用户指定的模块来记录 shell 历史记录。此模块应导出 <code>load() -&gt; [string()]</code>，该函数返回一个字符串列表，在 shell 启动时加载，以及 <code>add(iodata()) -&gt; ok.</code>，每次在 shell 中输入新行时调用。默认情况下，日志记录处于禁用状态。</p></li><li><p><strong><code>shell_history_drop = [string()]</code></strong> - 不应持久化的特定日志行。例如，<code>[&quot;q().&quot;, &quot;init:stop().&quot;]</code> 将允许忽略关闭节点的命令。默认为 <code>[]</code>。</p></li><li><p><strong><code>shell_history_file_bytes = integer()</code></strong> - shell 应记住的字节数。默认情况下，该值设置为 512kb，最小值为 50kb。</p></li><li><p><strong><code>shell_history_path = string()</code></strong> - 指定 shell 历史记录文件的存储位置。默认为用户缓存目录，由 <code>filename:basedir(user_cache, &quot;erlang-history&quot;)</code> 返回。</p></li><li><p><strong><code>shutdown_func = {Mod :: atom(), Func :: atom()}</code></strong> - 设置一个函数，当 <code>application_controller</code> 开始终止时调用。该函数以 <code>Mod:Func(Reason)</code> 的形式调用，其中 <code>Reason</code> 是 <code>application_controller</code> 的终止原因，并且必须尽快返回，以便 <code>application_controller</code> 正常终止。</p></li><li><p><strong><code>source_search_rules = [DirRule] | [SuffixRule]</code></strong></p><p>其中</p><ul><li><code>DirRule = {ObjDirSuffix,SrcDirSuffix}</code></li><li><code>SuffixRule = {ObjSuffix,SrcSuffix,[DirRule]}</code></li><li><code>ObjDirSuffix = string()</code></li><li><code>SrcDirSuffix = string()</code></li><li><code>ObjSuffix = string()</code></li><li><code>SrcSuffix = string()</code></li></ul><p>指定 <a href="https://erlang.org.cn/doc/apps/stdlib/filelib#find_file/2" target="_blank" rel="noopener noreferrer"><code>filelib:find_file/2</code></a> <a href="https://erlang.org.cn/doc/apps/stdlib/filelib#find_source/2" target="_blank" rel="noopener noreferrer"><code>filelib:find_source/2</code></a> 使用的规则列表。如果设置为除空列表之外的其他值，则它将替换默认规则。规则可以是简单的目录后缀对，例如 <code>{&quot;ebin&quot;, &quot;src&quot;}</code>，由 <a href="https://erlang.org.cn/doc/apps/stdlib/filelib#find_file/2" target="_blank" rel="noopener noreferrer"><code>filelib:find_file/2</code></a> 使用，或者三元组，指定取决于文件扩展名的单独目录后缀规则，例如 <code>[{&quot;.beam&quot;, &quot;.erl&quot;, [{&quot;ebin&quot;, &quot;src&quot;}]}</code>，由 <a href="https://erlang.org.cn/doc/apps/stdlib/filelib#find_source/2" target="_blank" rel="noopener noreferrer"><code>filelib:find_source/2</code></a> 使用。两种规则都可以在列表中混合使用。</p><p><code>ObjDirSuffix</code> 和 <code>SrcDirSuffix</code> 的解释如下：如果对象所在目录名称的末尾与 <code>ObjDirSuffix</code> 匹配，则通过调用 <a href="https://erlang.org.cn/doc/apps/stdlib/filelib#wildcard/1" target="_blank" rel="noopener noreferrer"><code>filelib:wildcard/1</code></a> 扩展通过将 <code>ObjDirSuffix</code> 替换为 <code>SrcDirSuffix</code> 创建的名称，并且在匹配项中找到的第一个常规文件是源文件。</p></li><li><p><strong><code>standard_io_encoding = Encoding</code></strong> - 设置通过 standard_io 发送或接收的字节应解释为 unicode 还是 latin1。默认情况下，如果主机支持，则输入和输出将解释为 Unicode。使用此标志，您可以在启动时配置编码。</p><p>这类似于 <a href="https://erlang.org.cn/doc/apps/stdlib/io#setopts/2" target="_blank" rel="noopener noreferrer"><code>io:setopts(standard_io, {encoding, Encoding})</code></a>，但在读取 standard_io 上的任何字节之前应用。</p><p>Encoding 是以下之一</p><ul><li><strong><code>unicode</code></strong> - 配置 standard_io 使用 unicode 模式。</li><li><strong><code>latin1</code></strong> - 配置 standard_io 使用 latin1 模式。</li><li><strong><code>_</code></strong> - 除 unicode 或 latin1 之外的任何内容都将被忽略，系统将自行配置编码，通常在现代系统上使用 unicode。</li></ul><p>有关更多详细信息，请参阅 <a href="https://erlang.org.cn/doc/apps/stdlib/unicode_usage#escripts-and-non-interactive-i-o" target="_blank" rel="noopener noreferrer">Erlang 中 Unicode 用法中的 Escripts 和非交互式 I/O</a>。</p></li><li><p><strong><code>os_cmd_shell = string()</code></strong> - 指定通过 <a href="https://erlang.org.cn/doc/apps/kernel/os#cmd/2" target="_blank" rel="noopener noreferrer"><code>os:cmd/2</code></a> 调用系统命令时要使用的 shell。默认情况下，shell 会自动检测。</p></li>`,33))]),e[15]||(e[15]=n(`<h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h2><h3 id="命令行" tabindex="-1"><a class="header-anchor" href="#命令行"><span>命令行</span></a></h3><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">erl</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -kernel</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 配置项</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 配置参数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h3><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%% xxxx.config</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">kernel</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  [{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">logger</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    [{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">handler</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> logger_std_h</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">level</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        config</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">file</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">log/erlang.log</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}},</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">     {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">handler</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> logger_std_h</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">level</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> debug</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        config</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">file</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">log/debug.log</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    ]}]}]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sys-config" tabindex="-1"><a class="header-anchor" href="#sys-config"><span><code>sys.config</code></span></a></h2><p>在嵌入模式下启动 Erlang 时，假设只使用一个名为 <code>sys.config</code> 的系统配置文件。此文件应位于 <code>$ROOT/releases/Vsn</code> 中，其中 <code>$ROOT</code> 是 Erlang/OTP 根安装目录，<code>Vsn</code> 是发布版本。</p><p>发布处理依赖于此假设。安装新的发布版本时，将读取新的 <code>sys.config</code> 并用于更新应用程序的配置。</p><p>这意味着指定另一个 <code>.config</code> 文件或多个 <code>.config</code> 文件会导致应用程序配置的不一致更新。但是，有一种方法可以从 <code>sys.config</code> 中指出其他配置文件</p><h3 id="从-sys-config-和-configfd-配置中包含文件" tabindex="-1"><a class="header-anchor" href="#从-sys-config-和-configfd-配置中包含文件"><span>从 <code>sys.config</code> 和 <code>-configfd</code> 配置中包含文件</span></a></h3><p>有一种方法可以从 <code>sys.config</code> 文件和从使用 <a href="https://erlang.org.cn/doc/apps/erts/erl_cmd#configfd" target="_blank" rel="noopener noreferrer"><code>-configfd</code></a> 命令行参数指定的文件描述符获取的配置中包含其他配置文件。</p><h4 id="文件语法-1" tabindex="-1"><a class="header-anchor" href="#文件语法-1"><span>文件语法</span></a></h4><p>包含文件的语法可以用 <a href="https://erlang.org.cn/doc/system/typespec" target="_blank" rel="noopener noreferrer">Erlang 类型语言</a> 描述如下</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Application</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Par</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Val</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}]}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> |</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> IncludeFile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong><code>IncludeFile = string()</code></strong> - <code>.config</code> 文件的名称。可以省略扩展名 <code>.config</code>。建议使用绝对路径。 <ul><li>如果在 <code>sys.config</code> 中使用相对路径，则首先相对于 <code>sys.config</code> 目录搜索 <code>IncludeFile</code>，然后相对于模拟器的当前工作目录搜索。</li><li>如果在 <code>-configfd</code> 配置中使用相对路径，则首先相对于包含 <a href="https://erlang.org.cn/doc/apps/sasl/script" target="_blank" rel="noopener noreferrer">引导脚本</a> 的字典（另请参阅模拟器的 <a href="https://erlang.org.cn/doc/apps/erts/erl_cmd#boot" target="_blank" rel="noopener noreferrer"><code>-boot</code></a> 命令行参数）搜索 <code>IncludeFile</code>，然后相对于模拟器的当前工作目录搜索。这使得可以使用 <code>sys.config</code> 来指出发布版本或其他 <code>.config</code> 文件，或者使用 <code>-config</code> 或 <code>-configfd</code> 手动启动的节点，无论当前工作目录是什么，结果都相同。</li></ul></li></ul><p>当遍历 <code>sys.config</code> 或 <code>-configfd</code> 配置的内容并遇到文件名时，会读取其内容并与到目前为止的结果合并。当找到应用程序配置元组 <code>{Application, Env}</code> 时，它会与到目前为止的结果合并。合并意味着添加新参数并覆盖现有参数值。</p><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span><em>示例</em></span></a></h4><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%% sys.config</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/home/user/myconfig1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">myapp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,[{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">par1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">val1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">par2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">val2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}]},</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/home/user/myconfig2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%% myconfig1.config:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">myapp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,[{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">par0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">val0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">par1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">val0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">par2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">val0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}]}]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">%% myconfig2.config:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">myapp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,[{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">par2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">val3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">par3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">val4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}]}]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将为 <code>myapp</code> 产生以下环境</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">par0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">val0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">par1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">val1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">par2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">val3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">par3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">val4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果 <code>sys.config</code> 或 <code>-configfd</code> 配置中指定的包含文件不存在或有错误，则运行时系统会在启动之前中止。但是，如果在加载包含文件时出现错误，安装新发布版本不会失败，但会返回错误消息并忽略错误文件。</p>`,21))])}const u=o(p,[["render",g]]),m=JSON.parse('{"path":"/backend/erlang/j23uezz6/","title":"配置文件","lang":"zh-CN","frontmatter":{"title":"配置文件","createTime":"2025/03/23 14:38:03","permalink":"/backend/erlang/j23uezz6/"},"headers":[],"readingTime":{"minutes":15.8,"words":4740},"git":{"updatedTime":1747107401000,"contributors":[{"name":"舒永好","username":"舒永好","email":"shuyonghao@guoshenghuaxing.com","commits":1,"avatar":"https://gravatar.com/avatar/4b1c3f37ea707968be73c631a79de33afd360724ce87bf8f9dcacd67d14df92c?d=retro"},{"name":"syh","username":"syh","email":"syh@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/060d67e779a1b0aeace68a2a010b367f852e56888393383ea27302df983f6814?d=retro"}]},"filePathRelative":"notes/backend/erlang/erlang_core/kernel/config.md"}');export{u as comp,m as data};
