import{_ as a,c as i,a as n,o as e}from"./app-C7T5jqfQ.js";const l="/blogs/assets/image-20231002165832841-DHh_vA9s.png",p="/blogs/assets/image-20231002170342450-CsdtSnRX.png",r="/blogs/assets/image-20231002173254162-Dwg3EaWb.png",t="/blogs/assets/image-20231002173457169-C8_itcZR.png",d="/blogs/assets/image-20231002174351514-CLbfi5a0.png",c="/blogs/assets/image-20231002174525730-C9qNCGAG.png",h="/blogs/assets/image-20231002190140436-Bm2J09N9.png",m="/blogs/assets/image-20231002191204702-pcF-wX5y.png",g="/blogs/assets/image-20231002191540026-LBGSsWiA.png",o="/blogs/assets/image-20231002191806729-DPrSD2aP.png",v="/blogs/assets/image-20231002192025081-B3Uv0M7F.png",u="/blogs/assets/image-20231002192413925-BULbvgy7.png",b="/blogs/assets/image-20231002192746101-CiSbEAIQ.png",f="/blogs/assets/image-20231002193126624-DjG4SXP_.png",k="/blogs/assets/image-20231002193714734-BUx-E9bL.png",x="/blogs/assets/image-20231002194106174-D0nMrbnE.png",_="/blogs/assets/image-20231002194314907-Bj6jTE_w.png",y="/blogs/assets/image-20231002195334213-qler71gH.png",N="/blogs/assets/image-20231002195357294-DmVxjDTS.png",D="/blogs/assets/image-20231002210542448-wsCfhG3Z.png",S="/blogs/assets/image-20231002211031875-N2kQj0LN.png",P="/blogs/assets/image-20231002213106692-CWHuCVD1.png",w={};function C(I,s){return e(),i("div",null,s[0]||(s[0]=[n('<p>系统的扩展可以分为纵向扩展和横向扩展</p><p>纵向扩展是从单机的角度出发，通过增加系统的硬件处理能力来提升服务器的处理能力</p><p>横向扩展是通过添加机器来满足大型网站服务的处理能力</p><p><img src="'+l+'" alt="image-20231002165832841"></p><p>这里面涉及到两个重要的角色分别是“应用集群”和“负载均衡器”</p><p>应用集群：将同一应用部署到多台机器上，组成处理集群，接收负载均衡设备颁发的请求，进行处理并返回响应的数据</p><p>负载均衡器：将用户访问的请求根据对应的负载均衡算法，颁发到集群中的一台服务器进行处理</p><h2 id="处理方式" tabindex="-1"><a class="header-anchor" href="#处理方式"><span>处理方式</span></a></h2><h3 id="用户手动选择" tabindex="-1"><a class="header-anchor" href="#用户手动选择"><span>用户手动选择</span></a></h3><ul><li>这种方式比较原始，主要实现的方式就是在网站主页上面提供不同线路，不同服务器链接方式，让用户来选择自己访问的具体服务器，来实现负载均衡</li></ul><p><img src="'+p+`" alt="image-20231002170342450"></p><h3 id="dns轮询方式" tabindex="-1"><a class="header-anchor" href="#dns轮询方式"><span>DNS轮询方式</span></a></h3><p>大多域名注册商都支持绑定多个IP，这就是DNS轮询，DNS服务器将解析请求按照A康的顺序，随机分配到不同的IP上，这样就能完成简单的负载均衡</p><ul><li>缺点 <ul><li>可靠性低 <ul><li>假设一个域名DNS轮询多台服务器，如果其中的一台服务器发生故障，那么所有的访问该服务器的请求将不会有所回应，即使你将该服务器的IP从DNS中去掉，但是由于各大宽带接入商将众多的NDS存放在缓存中，以节省访问时间，导致NDS不会实时得闲</li></ul></li><li>负载均衡不均衡</li></ul></li></ul><h3 id="四-七层负载均衡" tabindex="-1"><a class="header-anchor" href="#四-七层负载均衡"><span>四/七层负载均衡</span></a></h3><ul><li>所谓四层负载均衡指的是OSI七层模型中的<strong>传输层</strong>，主要是基于IP+PORT的负载均衡</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>实现四层负载均衡的方式</span></span>
<span class="line"><span>软件：LVS，Nginx，Hayproxy等</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>七层负载均衡指的是在<strong>应用层</strong>，主要是基于虚拟的URL或主机的负载均衡</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>实现七层负载均衡的方式</span></span>
<span class="line"><span>软件：Nginx，Hayproxy等</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nginx七层负载均衡" tabindex="-1"><a class="header-anchor" href="#nginx七层负载均衡"><span>Nginx七层负载均衡</span></a></h2><ul><li>Nginx要实现七层负载均衡需要乃至proxy_papss代理模块配置，Nginx默认安装支持这个模块，我们不需要再做任何处理</li></ul><h3 id="nginx七层负载均衡的指令" tabindex="-1"><a class="header-anchor" href="#nginx七层负载均衡的指令"><span>Nginx七层负载均衡的指令</span></a></h3><h4 id="upstream" tabindex="-1"><a class="header-anchor" href="#upstream"><span>upstream</span></a></h4><ul><li>该指令是用来定义一组服务器，它们可以是监听不同端口的服务器，并且也可以是同时监听TCP和Unix socket的服务器，服务器可以指定不同的权重，默认为1</li></ul><p><img src="`+r+'" alt="image-20231002173254162"></p><h4 id="server" tabindex="-1"><a class="header-anchor" href="#server"><span>server</span></a></h4><ul><li>该指令用来指定后端服务器的名称和一些参数，可以使用域名、IP、端口或者Unix socket</li></ul><p><img src="'+t+`" alt="image-20231002173457169"></p><p>服务端设置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>listen 9001;</span></span>
<span class="line"><span>server_name localhost;</span></span>
<span class="line"><span>default_type text/html;</span></span>
<span class="line"><span>location /{</span></span>
<span class="line"><span>return 200 &#39;&lt;h1&gt;192.168.200.146:9001&lt;/h1&gt;&#39;;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>listen 9002;</span></span>
<span class="line"><span>server_name localhost;</span></span>
<span class="line"><span>default_type text/html;</span></span>
<span class="line"><span>location /{</span></span>
<span class="line"><span>return 200 &#39;&lt;h1&gt;192.168.200.146:9002&lt;/h1&gt;&#39;;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>listen 9003;</span></span>
<span class="line"><span>server_name localhost;</span></span>
<span class="line"><span>default_type text/html;</span></span>
<span class="line"><span>location /{</span></span>
<span class="line"><span>return 200 &#39;&lt;h1&gt;192.168.200.146:9003&lt;/h1&gt;&#39;;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>负载均衡器设置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>upstream backend{</span></span>
<span class="line"><span>server 192.168.200.146:9091;</span></span>
<span class="line"><span>server 192.168.200.146:9092;</span></span>
<span class="line"><span>server 192.168.200.146:9093;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>listen 8083;</span></span>
<span class="line"><span>server_name localhost;</span></span>
<span class="line"><span>location /{</span></span>
<span class="line"><span>proxy_pass http://backend;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="负载均衡状态" tabindex="-1"><a class="header-anchor" href="#负载均衡状态"><span>负载均衡状态</span></a></h3><ul><li>代理服务器在负载均衡调度中的状态有以下几个</li></ul><p><img src="`+d+'" alt="image-20231002174351514"></p><h4 id="down" tabindex="-1"><a class="header-anchor" href="#down"><span>down</span></a></h4><ul><li>将该服务器标记为永久不可用，那么该代理服务器将不参与负载均衡 <ul><li>该状态一般会对需要停机维护的服务器进行设置</li></ul></li></ul><p><img src="'+c+'" alt="image-20231002174525730"></p><h4 id="backup" tabindex="-1"><a class="header-anchor" href="#backup"><span>backup</span></a></h4><ul><li>将该服务器标记为备份服务器，当主服务器不可用时，将用来传递请求</li></ul><p><img src="'+h+'" alt="image-20231002190140436"></p><h4 id="max-conns" tabindex="-1"><a class="header-anchor" href="#max-conns"><span>max_conns</span></a></h4><ul><li>max_conns=number:用来设置代理服务器同时活动链接的最大数量，默认为0，表示不限制，使用该配置可以根据后端服务器处理请求的并发量来进行设置，防止后端服务器被压垮</li></ul><h4 id="max-fails和fail-timeout" tabindex="-1"><a class="header-anchor" href="#max-fails和fail-timeout"><span>max_fails和fail_timeout</span></a></h4><p>max_fails=number:设置允许请求代理服务器失败的次数，默认为1</p><p>fail_timeout=time:设置经过max_fails失败后，服务暂停的时间，默认是10秒</p><p><img src="'+m+'" alt="image-20231002191204702"></p><h3 id="负载均衡策略" tabindex="-1"><a class="header-anchor" href="#负载均衡策略"><span>负载均衡策略</span></a></h3><p>Nginx的upstream支持如下六种方式的分配算法</p><p><img src="'+g+'" alt="image-20231002191540026"></p><h4 id="轮询" tabindex="-1"><a class="header-anchor" href="#轮询"><span>轮询</span></a></h4><p>是upstream模块负载均衡默认的策略，每个请求会按时间顺序逐个分配到不同的后端服务器，轮询不需要额外的配置</p><p><img src="'+o+'" alt="image-20231002191806729"></p><h4 id="weight加权" tabindex="-1"><a class="header-anchor" href="#weight加权"><span>weight加权</span></a></h4><p>weight=number:用来设置服务器的权重，默认为1，权重数据越大，被分配到请求的几率越大，该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的，所有此策略比较适合服务器的硬件配置差别比较大的情况</p><p><img src="'+v+'" alt="image-20231002192025081"></p><h4 id="ip-hash" tabindex="-1"><a class="header-anchor" href="#ip-hash"><span>Ip_hash</span></a></h4><p>当对后端的多台动态应用服务器做负载均衡时，ip_hash指令能够<strong>将某客户端ip的请求通过哈希算法定位到同一台后端服务器上</strong>，这样，当来自某一个IP的用户在后端Web服务器A上登录后，在访问该站点的其他URL，能保证其访问的还是后端Web服务器A</p><p><img src="'+u+'" alt="image-20231002192413925"></p><p>使用ip_hash指令无法保证后端服务器的负载均衡，可能慌到有些后端服务器接收到的请求多，有些后端服务器接收的请求少，而且设置后端服务器权重待方法将不起作用</p><p><img src="'+b+'" alt="image-20231002192746101"></p><h4 id="least-conn" tabindex="-1"><a class="header-anchor" href="#least-conn"><span>least_conn</span></a></h4><p>最少连接，<strong>把请求转发给连接数较少的后端服务器</strong>，轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同，但是，有些请求占用的时间很长，会导致其所在的后端负载较高，这种情况下，least_conn这种方式就可以达到更好的负载均衡效果</p><p><img src="'+f+'" alt="image-20231002193126624"></p><p>适合请求处理时间长航不一致造成服务器过载的情况</p><h4 id="url-hash" tabindex="-1"><a class="header-anchor" href="#url-hash"><span>url_hash</span></a></h4><p>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，要配合缓存命中来使用，同一个资源多次请求，可能会到过不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费，而<strong>使用url_hash，可以使得同一个url（也就是同一个资源请求）会到达同一台服务器</strong>，一旦缓存住了资源，再此收到请求，就可以从缓存中读取</p><p><img src="'+k+'" alt="image-20231002193714734"></p><p><img src="'+x+'" alt="image-20231002194106174"></p><h4 id="fair" tabindex="-1"><a class="header-anchor" href="#fair"><span>fair</span></a></h4><p>fair采用的不是内建负载均衡使用的办的的均衡算法，而是可以<strong>根据页面大小，加载时间长航特测的进行负载均衡</strong>，那么如何使用第三方模块的fair负载均衡策略</p><p><img src="'+_+`" alt="image-20231002194314907"></p><p>直接使用会报错，因为fair属于第三方模块实现的负载均衡，需要添加<code>nginx-upstream-fair</code>，如何添加对应的模块</p><ul><li>下载nginx-upstream-fair模块</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>下载地址为:</span></span>
<span class="line"><span>https://github.com/gnosek/nginx-upstream-fair</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将下载的文件上传到服务器并进行解压缩</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>unzip nginx-upstream-fair-master.zip</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>使用./configure命令将资源添加到Nginx模块中</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>./configure --add-module=/root/fair</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>编译</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>make</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>编译可能会出现如下错误，ngx_http_upstream_srv_conf_t结构中缺少 default_port</p><p><img src="`+y+'" alt="image-20231002195334213"></p><p>解决方案: 在Nginx的源码中 src/http/ngx_http_upstream.h,找到 ngx_http_upstream_srv_conf_s，在模块中添加添加default_port属 性</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>in_port_t default_port</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+N+`" alt="image-20231002195357294"></p><p>然后再进行make.</p><ul><li>、更新Nginx</li><li>将sbin目录下的nginx进行备份</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>mv /usr/local/nginx/sbin/nginx</span></span>
<span class="line"><span>/usr/local/nginx/sbin/nginxold</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将安装目录下的objs中的nginx拷贝到sbin目录</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>cd objs</span></span>
<span class="line"><span>cp nginx /usr/local/nginx/sbin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>更新Nginx</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>cd ../</span></span>
<span class="line"><span>make upgrade</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nginx四层负载均衡" tabindex="-1"><a class="header-anchor" href="#nginx四层负载均衡"><span>Nginx四层负载均衡</span></a></h2><p>Nginx在1.9之后，增加了一个stream模块，用来实现四层协议的转发，代理、负载均衡等，stream模块的用法跟http的用法类似，允许我们配置一组TCP或者UDP等无图说锤的监听，然后通过proxy+pass来转发我们的请求通过upstream添加多个后端服务，实现负载均衡</p><h3 id="添加stream模块的支持" tabindex="-1"><a class="header-anchor" href="#添加stream模块的支持"><span>添加stream模块的支持</span></a></h3><p>Nginx默认是没有编译这个模块的，需要使用到stream模块，那么需要在编译的时候加上<code>--with-stream</code></p><p><img src="`+D+'" alt="image-20231002210542448"></p><h3 id="四层负载均衡的指令" tabindex="-1"><a class="header-anchor" href="#四层负载均衡的指令"><span>四层负载均衡的指令</span></a></h3><h4 id="stream" tabindex="-1"><a class="header-anchor" href="#stream"><span>stream</span></a></h4><ul><li>该指令提供在其中指定流服务器指令的配置文件上下文，和http指令同级</li></ul><p><img src="'+S+'" alt="image-20231002211031875"></p><h4 id="upstream-1" tabindex="-1"><a class="header-anchor" href="#upstream-1"><span>upstream</span></a></h4><p>该指令和http的upstream指令是类似的</p><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h3><p>需求分析</p><p><img src="'+P+`" alt="image-20231002213106692"></p><p>nginx.conf配置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>stream {</span></span>
<span class="line"><span>	upstream redisbackend {</span></span>
<span class="line"><span>	server 192.168.200.146:6379;</span></span>
<span class="line"><span>	server 192.168.200.146:6378;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>upstream tomcatbackend {</span></span>
<span class="line"><span>	server 192.168.200.146:8080;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>	listen 81;</span></span>
<span class="line"><span>	proxy_pass redisbackend;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>	listen 82;</span></span>
<span class="line"><span>	proxy_pass tomcatbackend;</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,109)]))}const L=a(w,[["render",C]]),T=JSON.parse('{"path":"/os/hp9ent42/","title":"负载均衡","lang":"zh-CN","frontmatter":{"title":"负载均衡","createTime":"2025/04/05 16:43:28","permalink":"/os/hp9ent42/"},"headers":[],"readingTime":{"minutes":7.36,"words":2207},"git":{"updatedTime":1743864983000,"contributors":[{"name":"舒永好","username":"舒永好","email":"shuyonghao@guoshenghuaxing.com","commits":1,"avatar":"https://gravatar.com/avatar/4b1c3f37ea707968be73c631a79de33afd360724ce87bf8f9dcacd67d14df92c?d=retro"}]},"filePathRelative":"notes/os/nginx/advance/load_balance.md"}');export{L as comp,T as data};
