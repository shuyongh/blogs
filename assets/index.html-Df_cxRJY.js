import{_ as i,c as a,a as h,o as k}from"./app-C7T5jqfQ.js";const n={};function l(e,s){return k(),a("div",null,s[0]||(s[0]=[h(`<h2 id="推导式" tabindex="-1"><a class="header-anchor" href="#推导式"><span>推导式</span></a></h2><blockquote><p>comprehension 提供了一种简洁的表示法，用于遍历一个或多个项并构造一个新的项。comprehension 有三种不同的形式，这取决于它们构建的项的类型。</p></blockquote><h3 id="生成器" tabindex="-1"><a class="header-anchor" href="#生成器"><span>生成器</span></a></h3><p>过滤器是一个表达式，评估结果为 <code>true</code> 或 <code>false</code> 。</p><p>生成器模式中的变量会遮蔽之前绑定的变量，包括之前生成器模式中绑定的变量。</p><p>生成器表达式中绑定的变量在表达式外部不可见：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">E</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">L</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> E</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> L</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">variable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">L</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> is</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> unbound</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Y</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;-</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[],</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;-</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="特殊情况" tabindex="-1"><a class="header-anchor" href="#特殊情况"><span>特殊情况</span></a></h4><p>当没有生成器时，一个列表推导式如果所有过滤器都为真，则返回一个由单个元素构成的项（即， <code>Expr</code> 评估的结果），或者返回一个不包含任何元素的项（对于列表推导式来说，即 <code>[]</code> ；对于位字符串推导式来说，即 <code>&lt;&lt;&gt;&gt;</code> ；对于映射推导式来说，即 <code>#{}</code> ）。</p><p><em>示例:</em></p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> is_integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> is_integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当过滤表达式不评估为布尔值时，具体会发生什么取决于该表达式：</p><ul><li>如果该表达式是一个守卫表达式，评估失败或评估为非布尔值等同于评估为 <code>false</code> 。</li><li>如果该表达式不是守卫表达式且评估为非布尔值 <code>Val</code> ，则会在运行时触发异常 <code>{bad_filter, Val}</code> 。如果表达式的评估触发了异常，该异常将不会被列表推导捕获。</li></ul><p>示例（使用守卫表达式作为过滤器）:</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> List</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">E</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> E</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> E</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> rem</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">E</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> E</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> E</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> rem</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =:=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例（使用非守卫表达式作为过滤器）:</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> List</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> FaultyIsEven</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">E</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> E</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> rem</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> end</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Fun</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">erl_eval</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">42</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">17316486</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">E</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> E</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> FaultyIsEven</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">E</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">**</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> exception</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> error</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">bad</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> filter</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> IsEven</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">E</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> E</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> rem</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =:=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> end</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Fun</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">erl_eval</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">42</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">17316486</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">E</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> E</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> IsEven</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">E</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">**</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> exception</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> error</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">an</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> error</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> occurred</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> when</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> evaluating</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> an</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> arithmetic</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> expression</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">     in</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> operator</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  rem/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        called</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> as</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> a</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> rem</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">6</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">E</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> E</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> is_integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">E</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> IsEven</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">E</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列表推导" tabindex="-1"><a class="header-anchor" href="#列表推导"><span>列表推导</span></a></h3><blockquote><p><strong>列表生成式（List Comprehensions）</strong> 是一种非常简洁且强大的方式，用于从现有列表生成新的列表。通过列表生成式，可以对列表中的元素进行计算、过滤、映射等操作。列表生成式的基本结构包括：循环遍历、条件判断和表达式。</p></blockquote><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h4><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Expr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Qualifier1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> . . .</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> QualifierN</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在这里， <code>Expr</code> 是一个任意表达式，而每个 <code>Qualifier</code> 或者是一个生成器，或者是一个过滤器。</p><p>列表推导返回一个列表，其中列表元素是当所有过滤条件都为真时，对每个生成器元素组合评估 <code>Expr</code> 的结果。</p><h4 id="生成器-1" tabindex="-1"><a class="header-anchor" href="#生成器-1"><span>生成器</span></a></h4><p>列表生成器具有以下语法：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Pattern</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ListExpr</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>ListExpr</code> 是一个表达式，评估为一个项的列表。</p><h4 id="几种常见类型" tabindex="-1"><a class="header-anchor" href="#几种常见类型"><span>几种常见类型</span></a></h4><h6 id="简单的列表生成式" tabindex="-1"><a class="header-anchor" href="#简单的列表生成式"><span>简单的列表生成式</span></a></h6><p>最基本的形式，通过遍历一个列表并对每个元素进行计算：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Element</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Element</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Element</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% 结果为 [1, 4, 9, 16, 25]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="带条件的列表生成式" tabindex="-1"><a class="header-anchor" href="#带条件的列表生成式"><span>带条件的列表生成式</span></a></h6><p>在列表生成式中，您可以添加 <strong>guard（守卫条件）</strong>，用于过滤列表中的元素，只保留满足条件的元素：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Element</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Element</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Element</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> rem</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% 结果为 [2,4]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="多个列表的生成式" tabindex="-1"><a class="header-anchor" href="#多个列表的生成式"><span>多个列表的生成式</span></a></h6><p>创建一个包含元组的列表，每个元组由 <code>X</code> 和 <code>Y</code> 组成，<code>X</code> 和 <code>Y</code> 分别来自两个不同的列表。</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> X</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Y</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% 结果为  [{1, 3}, {1, 4}, {2, 3}, {2, 4}]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="带多个条件的列表生成式" tabindex="-1"><a class="header-anchor" href="#带多个条件的列表生成式"><span>带多个条件的列表生成式</span></a></h6><p>列表生成式可以有多个条件，来进一步过滤和限制生成的元素：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Element</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Element</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Element</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> rem</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Element</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% 结果为 [4]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="嵌套列表生成式" tabindex="-1"><a class="header-anchor" href="#嵌套列表生成式"><span>嵌套列表生成式</span></a></h6><p>Erlang 允许嵌套列表生成式，即在一个列表生成式中使用其他列表生成式：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> X</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> X</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Y</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% 结果为 [[1, 4, 9], [1, 4, 9]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="列表生成式与元组" tabindex="-1"><a class="header-anchor" href="#列表生成式与元组"><span>列表生成式与元组</span></a></h6><p>列表生成式中生成元组：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> X</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> X</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> X</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% 结果 [{1, 1}, {2, 4}, {3, 9}, {4, 16}]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="合并多个列表" tabindex="-1"><a class="header-anchor" href="#合并多个列表"><span>合并多个列表</span></a></h6><p>列表生成式也可以用于合并多个列表：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Item</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Sublist</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]],</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Item</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Sublist</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% 结果为 [1, 2, 3, 4, 5, 6]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="生成矩阵" tabindex="-1"><a class="header-anchor" href="#生成矩阵"><span>生成矩阵</span></a></h6><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> _</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> lists</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">seq</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Cols</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> _</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> lists</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">seq</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Rows</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><strong><code>lists:seq(1, Cols)</code></strong>：生成一个从 <code>1</code> 到 <code>Cols</code> 的整数列表。我们用它来表示矩阵的一行。</p></li><li><p><strong><code>[0 || _ &lt;- lists:seq(1, Cols)]</code></strong>：这是一个列表生成式，它生成一个长度为 <code>Cols</code> 的子列表，所有元素都是 <code>0</code>。</p></li><li><p><strong><code>[[0 || _ &lt;- lists:seq(1, Cols)] || _ &lt;- lists:seq(1, Rows)]</code></strong>：这是一个嵌套的列表生成式。外层生成 <code>Rows</code> 行，内层生成每行的元素。最终得到一个包含 <code>Rows</code> 行，每行 <code>Cols</code> 列的矩阵。</p></li></ul><h6 id="使用复杂表达式的列表生成式" tabindex="-1"><a class="header-anchor" href="#使用复杂表达式的列表生成式"><span>使用复杂表达式的列表生成式</span></a></h6><p>列表生成式不仅限于简单的表达式，你还可以使用复杂的计算或函数调用：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">math</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> X</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;-</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">% 结果为 [1.0, 4.0, 9.0, 16.0]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="位串推导" tabindex="-1"><a class="header-anchor" href="#位串推导"><span>位串推导</span></a></h3><p>位串推导用于构造位字符串或二进制数据。</p><h4 id="语法-1" tabindex="-1"><a class="header-anchor" href="#语法-1"><span>语法</span></a></h4><p>它们具有以下语法：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> BitStringExpr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Qualifier1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> . . .</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> QualifierN</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  或者</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> BitStringExpr</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> || </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Qualifier1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> . . .</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> QualifierN</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &gt;&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BitStringExpr</code> 是一个表达式，用于计算得到一个位字符串。如果 <code>BitStringExpr</code> 是一个函数调用，它必须被括号包围。每个 <code>Qualifier</code> 或者是一个生成器，或者是一个过滤器。</p><p>位字符串综合返回一个位字符串，该位字符串是由满足所有过滤条件的位字符串生成器元素组合中 <code>BitStringExpr</code> 的结果连接而成的。</p><h4 id="生成器-2" tabindex="-1"><a class="header-anchor" href="#生成器-2"><span>生成器</span></a></h4><p>位字符串生成器具有以下语法：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">BitstringPattern</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> BitStringExpr1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>BitStringExpr1</code> 是一个表达式，评估为位字符串</p><h3 id="集合推导" tabindex="-1"><a class="header-anchor" href="#集合推导"><span>集合推导</span></a></h3><blockquote><p>在 Erlang/OTP 26 中引入</p></blockquote><p>集合推导用于构造集合。</p><h4 id="语法-2" tabindex="-1"><a class="header-anchor" href="#语法-2"><span>语法</span></a></h4><p>它们具有以下语法：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">KeyExpr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ValueExpr</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> || </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Qualifier1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> . . .</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> QualifierN</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在这里， <code>KeyExpr</code> 和 <code>ValueExpr</code> 是任意表达式，而每个 <code>Qualifier</code> 或者是一个生成器，或者是一个过滤器。</p><p>一个 map 理解返回一个 map，其中的 map 元素是对于生成器元素的每种组合（其中所有过滤器都为真）评估 <code>KeyExpr</code> 和 <code>ValueExpr</code> 的结果。如果键表达式不唯一，则 map 中存储最后一个出现的值。</p><h4 id="生成器-3" tabindex="-1"><a class="header-anchor" href="#生成器-3"><span>生成器</span></a></h4><p>一个映射生成器具有以下语法：</p><div class="language-eralgn line-numbers-mode" data-highlighter="shiki" data-ext="eralgn" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>KeyPattern := ValuePattern &lt;- MapExpression</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>MapExpr</code> 是一个表达式，评估结果为一个映射，或通过调用 <code>maps:iterator/1</code> 或 <code>maps:iterator/2</code> 获取的映射迭代器。</p><h2 id="匹配模式" tabindex="-1"><a class="header-anchor" href="#匹配模式"><span>匹配模式</span></a></h2><blockquote><p>Erlang 的模式匹配不仅限于简单的数字，它还可以用于更复杂的数据结构，如元组、列表、记录等。我们可以通过不同的模式来匹配不同类型的数据。</p></blockquote><p><strong>函数重载</strong>：Erlang 中的函数重载是通过不同的 <strong>参数数量</strong> 或者 <strong>参数类型</strong> 来实现的。函数的唯一性由模块名、函数名和参数数量决定。</p><p><strong>模式匹配</strong>：Erlang 通过模式匹配来选择调用的函数。每个函数可以有多个匹配模式，Erlang 会按顺序检查模式，找到最适合的一个来执行。</p><p><strong>匹配条件（Guards）</strong>：在模式匹配中，可以使用 <code>when</code> 子句添加条件，进一步限制匹配的条件。</p><h3 id="匹配运算符" tabindex="-1"><a class="header-anchor" href="#匹配运算符"><span>匹配运算符</span></a></h3><p>以下匹配 <code>Pattern</code> 对于 <code>Expr</code> ：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Pattern</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Expr</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果匹配成功，模式中的任何未绑定变量将变得绑定，并返回 <code>Expr</code> 的值。</p><p>如果连续应用多个匹配运算符，它们将从右到左进行评估。</p><p>如果匹配失败，将发生一个 <code>badmatch</code> 运行时错误。</p><p><em>示例：</em></p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> T</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">answer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 42</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">answer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">42</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> A</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">answer</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> B</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">42</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> T</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">answer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">42</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">C</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> D</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">**</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> exception</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> error</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">no</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> match</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> of</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> right</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">hand</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> side</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为多个匹配操作符是从右向左评估的，这意味着：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Pattern1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pattern2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> . . . </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> PatternN</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Expression</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>等价于：</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Temporary</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Expression</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PatternN</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Temporary</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   .</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   .</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   .,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Pattern2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Temporary</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Pattern</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Temporary</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匹配运算符和复合模式运算符" tabindex="-1"><a class="header-anchor" href="#匹配运算符和复合模式运算符"><span>匹配运算符和复合模式运算符</span></a></h3><p><code>=</code> 字符用于表示两个相似但不同的运算符：匹配运算符和复合模式运算符。具体是哪一个取决于上下文。</p><p>复合模式操作符用于从两个模式构建一个复合模式。复合模式在任何接受模式的地方都被接受。一个复合模式匹配当且仅当其所有组成部分模式都匹配。复合模式中的模式（作为映射模式中的键或二进制模式中的大小）不能绑定在同一个复合模式的其他子模式中的变量。</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">key</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Value</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> end</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">7</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">variable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> is</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> unbound</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> F</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> E</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">E</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> A</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> end</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{{</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> G</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(&lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">C</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">16</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&gt;)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> C</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> end</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">G</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(&lt;&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">42</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">43</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&gt;)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">42</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">43</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10795</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>匹配运算符在任何表达式允许的地方都是允许的。它用于将表达式的值与模式匹配。如果连续应用多个匹配运算符，它们将从右到左进行评估。</p><p><em>示例：</em></p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> M</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">key</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> key2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> key2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">key</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> key2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">key2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> f</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">key</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> M</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Value</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">value</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> f</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">key</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> M</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Value</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">value</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> f</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> #</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">key</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> M</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Value</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">12</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">variable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> is</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> unbound</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> begin</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Y</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">42</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&gt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> end</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">42</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>// 提示 <code>2&gt;</code> 处的表达式首先将变量 <code>M</code> 的值与模式 <code>#{key := Key}</code> 匹配，并将变量 <code>M</code> 绑定。然后使用变量 <code>Key</code> 作为键，将 <code>M</code> 的值与模式 <code>#{Key := Value}</code> 匹配，并将变量 <code>Value</code> 绑定。</p><p>// 提示 <code>3&gt;</code> 处的表达式将表达式 <code>(#{key := Key} = M)</code> 匹配到模式 <code>#{Key := Value}</code> 。括号内的表达式首先被评估。也就是说， <code>M</code> 首先被匹配到 <code>#{key := Key}</code> ，然后 <code>M</code> 的值再被匹配到模式 <code>#{Key := Value}</code> 。因此，括号是多余的，与第 2 点的评估顺序相同。</p><p>// 在提示 <code>4&gt;</code> 处的表达式中，表达式 <code>M</code> 与括号内的模式进行匹配。由于括号内的构造是一个模式，因此 <code>=</code> 是复合模式操作符（而不是匹配操作符）。匹配失败，因为两个子模式同时匹配，因此在与模式 <code>#{Key := Value}</code> 匹配时变量 <code>Key</code> 并未绑定。</p><p>// 在提示 <code>5&gt;</code> 的表达式中，块表达式内的表达式会首先被评估，绑定变量 <code>Y</code> 并创建一个二进制数据。然后使用 <code>Y</code> 的值作为段的大小，将二进制数据与模式 <code>&lt;&lt;X:Y&gt;&gt;</code> 进行匹配。</p><h3 id="匹配列表" tabindex="-1"><a class="header-anchor" href="#匹配列表"><span>匹配列表</span></a></h3><ul><li><p><code>sum_list/1</code> 通过模式匹配来递归计算列表中所有元素的和。</p></li><li><p><code>[]</code> 是空列表的匹配模式，当输入为空列表时返回 <code>0</code>。</p></li><li><p><code>[Head | Tail]</code> 是非空列表的匹配模式，它将列表的第一个元素（<code>Head</code>）和剩余部分（<code>Tail</code>）分开，并递归计算 <code>Tail</code> 的和。</p></li></ul><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">math</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sum_list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sum_list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([])</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sum_list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Head</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> |</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Tail</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Head</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sum_list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Tail</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>1&gt; c(math).</span></span>
<span class="line"><span>{ok,math}</span></span>
<span class="line"><span>2&gt; math:sum_list([1, 2, 3, 4]).</span></span>
<span class="line"><span>10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="管道符" tabindex="-1"><a class="header-anchor" href="#管道符"><span>管道符</span></a></h4><blockquote><p><code>[Head | Tail]</code> 主要用于 <strong>匹配列表</strong>，因为在 Erlang 中，列表是一种基础的数据结构。<code>|</code> 是用来 <strong>解构列表</strong> 的，<code>Head</code> 是列表的第一个元素，<code>Tail</code> 是剩下的部分。</p><ul><li><code>|</code> 符号主要用于 <strong>分解</strong> 和 <strong>解构列表</strong></li><li><strong>参数名</strong> 是可以自定义的，<code>Head</code> 和 <code>Tail</code> 只是惯例，其他名字也是完全合法的。</li><li><strong>不限制两个参数</strong>，你可以在解构时匹配多个元素</li></ul></blockquote><ul><li>匹配 <strong>一个列表的前两个元素</strong> 和 <strong>剩余的元素</strong><ul><li><code>First</code> 是列表的第一个元素</li><li><code>Second</code> 是列表的第二个元素</li><li><code>Rest</code> 是剩余的部分（可能是空列表）</li></ul></li></ul><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">list_example</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">example</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">example</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">First</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Second</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> |</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Rest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">    io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">format</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">First: </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">~</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">w</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, Second: </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">~</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">w</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, Rest: </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">~</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">w</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">~</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">First</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Second</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Rest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匹配元组" tabindex="-1"><a class="header-anchor" href="#匹配元组"><span>匹配元组</span></a></h3><p><code>sum_tuple/1</code> 函数使用元组模式匹配，接收一个二元元组 <code>(A, B)</code> 并返回它们的和。</p><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">math</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sum_tuple</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sum_tuple</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> A</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>1&gt; c(math).</span></span>
<span class="line"><span>{ok,math}</span></span>
<span class="line"><span>2&gt; math:sum_tuple({5, 10}).</span></span>
<span class="line"><span>15</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匹配条件-guard" tabindex="-1"><a class="header-anchor" href="#匹配条件-guard"><span>匹配条件（Guard）</span></a></h3><blockquote><p>Guard 表达式可以帮助在特定模式匹配成功时添加额外的条件判断。守卫通常用于 <code>case</code>、<code>if</code>、<code>receive</code>、<code>fun</code> 等表达式中，允许你在匹配到一个模式时对输入数据进行进一步的条件判断，只有条件成立时才继续执行相关的代码。</p><p>主要作用是 <strong>过滤掉不满足特定条件的匹配项</strong></p></blockquote><h4 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h4><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">FunctionPattern</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> when</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Guard1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Guard2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, ... </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Result</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><strong>FunctionPattern</strong>: 函数的模式匹配部分。</p></li><li><p><strong>when</strong>: 后面跟随的是 Guard 表达式。</p></li><li><p><strong>Guard</strong>: 一个条件表达式，只有在所有 Guard 条件成立时，函数才会执行。</p></li></ul><h2 id="守卫序列" tabindex="-1"><a class="header-anchor" href="#守卫序列"><span>守卫序列</span></a></h2><ul><li>由分号（;）分隔的一系列守卫表达式。如果至少有一个守卫表达式为真，那么守卫序列就为真。（如果存在其他守卫，则不会进行评估。） 类似于||</li></ul><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Guard1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">; ...; </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">GuardK</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>用逗号分隔的 守卫表达式 ( <code>,</code> )。如果所有 守卫表达式都评估为 <code>true</code> ，则 守卫序列为真。 类似于&amp;&amp;</li></ul><div class="language-erlang line-numbers-mode" data-highlighter="shiki" data-ext="erlang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">GuardExpr1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, ..., </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">GuardExprN</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="守卫表达式" tabindex="-1"><a class="header-anchor" href="#守卫表达式"><span>守卫表达式</span></a></h3><p>有效的守卫表达式是有效 Erlang 表达式的子集。限制有效表达式集合的原因是，守卫表达式的求值必须保证没有副作用。有效的守卫表达式如下：</p><ul><li>变量</li><li>常量（原子、整数、浮点数、列表、元组、记录、二进制数据和映射）</li><li>构造原子、整数、浮点数、列表、元组、记录、二进制数据和映射的表达式</li><li>更新映射的表达式</li><li>记录表达式 <code>Expr#Name.Field</code> 和 <code>#Name.Field</code></li><li>BIFs 指定在类型测试 BIFs 和允许在守卫表达式中使用的其他 BIFs 调用</li><li>术语比较</li><li>算术表达式</li><li>布尔表达式</li><li>短路表达式 ( <code>andalso</code> / <code>orelse</code> )</li></ul><h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h1>`,134)]))}const p=i(n,[["render",l]]),d=JSON.parse('{"path":"/backend/erlang/7m508u8r/","title":"特殊表达式","lang":"zh-CN","frontmatter":{"title":"特殊表达式","createTime":"2025/03/22 16:00:52","permalink":"/backend/erlang/7m508u8r/"},"headers":[],"readingTime":{"minutes":11.73,"words":3519},"git":{"updatedTime":1743666461000,"contributors":[{"name":"舒永好","username":"舒永好","email":"shuyonghao@guoshenghuaxing.com","commits":1,"avatar":"https://gravatar.com/avatar/4b1c3f37ea707968be73c631a79de33afd360724ce87bf8f9dcacd67d14df92c?d=retro"},{"name":"syh","username":"syh","email":"syh@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/060d67e779a1b0aeace68a2a010b367f852e56888393383ea27302df983f6814?d=retro"}]},"filePathRelative":"notes/backend/erlang/erlang_foundation/special_expression.md"}');export{p as comp,d as data};
